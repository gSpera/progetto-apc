
Progetto APC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800a130  0800a130  0000b130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a598  0800a598  0000dd34  2**0
                  CONTENTS
  4 .ARM          00000008  0800a598  0800a598  0000b598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a0  0800a5a0  0000dd34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a0  0800a5a0  0000b5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000125c  0800a5a4  0800a5a4  0000b5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000d34  20000000  0800b800  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000dd34  2**0
                  CONTENTS
 10 .bss          000012e4  20000d38  20000d38  0000dd38  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000201c  2000201c  0000dd38  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000dd34  2**0
                  CONTENTS, READONLY
 13 .debug_info   000142a1  00000000  00000000  0000dd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d88  00000000  00000000  00022005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00025d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d32  00000000  00000000  00026f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a0f  00000000  00000000  00027c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175c7  00000000  00000000  00048651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b14ee  00000000  00000000  0005fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111106  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004eb4  00000000  00000000  0011114c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00116000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000d38 	.word	0x20000d38
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a118 	.word	0x0800a118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000d3c 	.word	0x20000d3c
 80001cc:	0800a118 	.word	0x0800a118

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f001 f80e 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f816 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f8f4 	bl	8000478 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000290:	f000 f874 	bl	800037c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000294:	f000 f8b2 	bl	80003fc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000298:	f008 f97c 	bl	8008594 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  usart_init(115200);
 800029c:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80002a0:	f000 fee4 	bl	800106c <usart_init>
  usart_puts("Password Manager 3000 Starting up\n");
 80002a4:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <main+0x34>)
 80002a6:	f000 ff43 	bl	8001130 <usart_puts>

  real_main();
 80002aa:	f000 fc2b 	bl	8000b04 <real_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ae:	bf00      	nop
 80002b0:	e7fd      	b.n	80002ae <main+0x2e>
 80002b2:	bf00      	nop
 80002b4:	0800a130 	.word	0x0800a130

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b09e      	sub	sp, #120	@ 0x78
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f008 fe24 	bl	8008f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	463b      	mov	r3, r7
 80002de:	223c      	movs	r2, #60	@ 0x3c
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f008 fe16 	bl	8008f14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002e8:	2303      	movs	r3, #3
 80002ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002f0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	2310      	movs	r3, #16
 80002fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000306:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000308:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800030c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000312:	4618      	mov	r0, r3
 8000314:	f003 fa5c 	bl	80037d0 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800031e:	f000 f929 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000332:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000338:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800033c:	2101      	movs	r1, #1
 800033e:	4618      	mov	r0, r3
 8000340:	f004 fa84 	bl	800484c <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800034a:	f000 f913 	bl	8000574 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800034e:	4b0a      	ldr	r3, [pc, #40]	@ (8000378 <SystemClock_Config+0xc0>)
 8000350:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000352:	2300      	movs	r3, #0
 8000354:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000356:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800035a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035c:	463b      	mov	r3, r7
 800035e:	4618      	mov	r0, r3
 8000360:	f004 fc44 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800036a:	f000 f903 	bl	8000574 <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3778      	adds	r7, #120	@ 0x78
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	00020020 	.word	0x00020020

0800037c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000380:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <MX_I2C1_Init+0x74>)
 8000382:	4a1c      	ldr	r2, [pc, #112]	@ (80003f4 <MX_I2C1_Init+0x78>)
 8000384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000386:	4b1a      	ldr	r3, [pc, #104]	@ (80003f0 <MX_I2C1_Init+0x74>)
 8000388:	4a1b      	ldr	r2, [pc, #108]	@ (80003f8 <MX_I2C1_Init+0x7c>)
 800038a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000392:	4b17      	ldr	r3, [pc, #92]	@ (80003f0 <MX_I2C1_Init+0x74>)
 8000394:	2201      	movs	r2, #1
 8000396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000398:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <MX_I2C1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800039e:	4b14      	ldr	r3, [pc, #80]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003aa:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003b6:	480e      	ldr	r0, [pc, #56]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003b8:	f001 fc56 	bl	8001c68 <HAL_I2C_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003c2:	f000 f8d7 	bl	8000574 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c6:	2100      	movs	r1, #0
 80003c8:	4809      	ldr	r0, [pc, #36]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003ca:	f001 fce8 	bl	8001d9e <HAL_I2CEx_ConfigAnalogFilter>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003d4:	f000 f8ce 	bl	8000574 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d8:	2100      	movs	r1, #0
 80003da:	4805      	ldr	r0, [pc, #20]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003dc:	f001 fd2a 	bl	8001e34 <HAL_I2CEx_ConfigDigitalFilter>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003e6:	f000 f8c5 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000d54 	.word	0x20000d54
 80003f4:	40005400 	.word	0x40005400
 80003f8:	2000090e 	.word	0x2000090e

080003fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000400:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000402:	4a1c      	ldr	r2, [pc, #112]	@ (8000474 <MX_SPI1_Init+0x78>)
 8000404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000406:	4b1a      	ldr	r3, [pc, #104]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000408:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800040c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800040e:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000414:	4b16      	ldr	r3, [pc, #88]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000416:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800041a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041c:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <MX_SPI1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000422:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_SPI1_Init+0x74>)
 800042a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800042e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000432:	2208      	movs	r2, #8
 8000434:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800043c:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_SPI1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_SPI1_Init+0x74>)
 800044a:	2207      	movs	r2, #7
 800044c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_SPI1_Init+0x74>)
 8000456:	2208      	movs	r2, #8
 8000458:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_SPI1_Init+0x74>)
 800045c:	f004 fd76 	bl	8004f4c <HAL_SPI_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000466:	f000 f885 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000da8 	.word	0x20000da8
 8000474:	40013000 	.word	0x40013000

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	@ 0x28
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048e:	4b37      	ldr	r3, [pc, #220]	@ (800056c <MX_GPIO_Init+0xf4>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a36      	ldr	r2, [pc, #216]	@ (800056c <MX_GPIO_Init+0xf4>)
 8000494:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b34      	ldr	r3, [pc, #208]	@ (800056c <MX_GPIO_Init+0xf4>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b31      	ldr	r3, [pc, #196]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a30      	ldr	r2, [pc, #192]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b2e      	ldr	r3, [pc, #184]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004be:	4b2b      	ldr	r3, [pc, #172]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a2a      	ldr	r2, [pc, #168]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b28      	ldr	r3, [pc, #160]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b25      	ldr	r3, [pc, #148]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a24      	ldr	r2, [pc, #144]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b22      	ldr	r3, [pc, #136]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a1e      	ldr	r2, [pc, #120]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <MX_GPIO_Init+0xf4>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000506:	2200      	movs	r2, #0
 8000508:	f64f 7108 	movw	r1, #65288	@ 0xff08
 800050c:	4818      	ldr	r0, [pc, #96]	@ (8000570 <MX_GPIO_Init+0xf8>)
 800050e:	f001 fb93 	bl	8001c38 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000512:	2337      	movs	r3, #55	@ 0x37
 8000514:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000516:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800051a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	4619      	mov	r1, r3
 8000526:	4812      	ldr	r0, [pc, #72]	@ (8000570 <MX_GPIO_Init+0xf8>)
 8000528:	f001 fa0c 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800052c:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000530:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	480a      	ldr	r0, [pc, #40]	@ (8000570 <MX_GPIO_Init+0xf8>)
 8000546:	f001 f9fd 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000560:	f001 f9f0 	bl	8001944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	@ 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	48001000 	.word	0x48001000

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <Error_Handler+0x8>

08000580 <memfind>:
#define EP_BULK 2
uint8_t cmdBuffer[16];
uint8_t bulkBuffer[256];
#define FLASH_BLOCK 0x1

int memfind(char *buff, char what) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	for (int i=0;i<2048;i++) {
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	e00b      	b.n	80005aa <memfind+0x2a>
		if (buff[i] == what) return i;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	78fa      	ldrb	r2, [r7, #3]
 800059c:	429a      	cmp	r2, r3
 800059e:	d101      	bne.n	80005a4 <memfind+0x24>
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	e008      	b.n	80005b6 <memfind+0x36>
	for (int i=0;i<2048;i++) {
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005b0:	dbef      	blt.n	8000592 <memfind+0x12>
	}
	return 2043;
 80005b2:	f240 73fb 	movw	r3, #2043	@ 0x7fb
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <class_init>:

uint8_t class_init(USBD_HandleTypeDef *usb, uint8_t cfgid) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	usart_puts("Password manager class init\n");
 80005d0:	4816      	ldr	r0, [pc, #88]	@ (800062c <class_init+0x68>)
 80005d2:	f000 fdad 	bl	8001130 <usart_puts>

    /* Open EP OUT Control */
    USBD_LL_OpenEP(usb, EP_CTRL, USBD_EP_TYPE_CTRL, 16);
 80005d6:	2310      	movs	r3, #16
 80005d8:	2200      	movs	r2, #0
 80005da:	2101      	movs	r1, #1
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f008 fb0c 	bl	8008bfa <USBD_LL_OpenEP>

    /* Open EP OUT Bulk */
    USBD_LL_OpenEP(usb, EP_BULK, USBD_EP_TYPE_BULK, sizeof(bulkBuffer));
 80005e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005e6:	2202      	movs	r2, #2
 80005e8:	2102      	movs	r1, #2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f008 fb05 	bl	8008bfa <USBD_LL_OpenEP>
    USBD_LL_OpenEP(usb, EP_BULK | 0x80, USBD_EP_TYPE_BULK, sizeof(bulkBuffer));
 80005f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f4:	2202      	movs	r2, #2
 80005f6:	2182      	movs	r1, #130	@ 0x82
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f008 fafe 	bl	8008bfa <USBD_LL_OpenEP>

    usb->ep_out[1].is_used = 1U;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    usb->ep_out[2].is_used = 1U;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2201      	movs	r2, #1
 800060a:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    usb->ep_in[2].is_used = 1U;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2201      	movs	r2, #1
 8000612:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare Out endpoint to receive next packet */
    // USBD_LL_PrepareReceive(usb, EP_CTRL, cmdBuffer, sizeof(cmdBuffer));
    USBD_LL_PrepareReceive(usb, EP_BULK, bulkBuffer, sizeof(bulkBuffer));
 8000614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000618:	4a05      	ldr	r2, [pc, #20]	@ (8000630 <class_init+0x6c>)
 800061a:	2102      	movs	r1, #2
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f008 fbbe 	bl	8008d9e <USBD_LL_PrepareReceive>
    // USBD_LL_StallEP(usb, 2);
	return 0;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	0800a154 	.word	0x0800a154
 8000630:	20000e0c 	.word	0x20000e0c

08000634 <data_sent>:

uint8_t data_sent(USBD_HandleTypeDef *usb, uint8_t ep) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
	usart_puts("Sent data on EP");
 8000640:	480b      	ldr	r0, [pc, #44]	@ (8000670 <data_sent+0x3c>)
 8000642:	f000 fd75 	bl	8001130 <usart_puts>
	usart_putdec(ep);
 8000646:	78fb      	ldrb	r3, [r7, #3]
 8000648:	b29b      	uxth	r3, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fdba 	bl	80011c4 <usart_putdec>
	usart_putc('\n');
 8000650:	200a      	movs	r0, #10
 8000652:	f000 fd55 	bl	8001100 <usart_putc>
    USBD_LL_PrepareReceive(usb, EP_BULK, bulkBuffer, sizeof(bulkBuffer));
 8000656:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800065a:	4a06      	ldr	r2, [pc, #24]	@ (8000674 <data_sent+0x40>)
 800065c:	2102      	movs	r1, #2
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f008 fb9d 	bl	8008d9e <USBD_LL_PrepareReceive>
	return USBD_OK;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	0800a174 	.word	0x0800a174
 8000674:	20000e0c 	.word	0x20000e0c

08000678 <data_received>:

uint8_t data_received(USBD_HandleTypeDef *usb, uint8_t ep) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b0cc      	sub	sp, #304	@ 0x130
 800067c:	af00      	add	r7, sp, #0
 800067e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000682:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000686:	6018      	str	r0, [r3, #0]
 8000688:	460a      	mov	r2, r1
 800068a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800068e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8000692:	701a      	strb	r2, [r3, #0]
	uint32_t len = USBD_LL_GetRxDataSize(usb, ep);
 8000694:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000698:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80006a6:	4611      	mov	r1, r2
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	f008 fb9b 	bl	8008de4 <USBD_LL_GetRxDataSize>
 80006ae:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
	usart_puts("Received data on EP");
 80006b2:	48b4      	ldr	r0, [pc, #720]	@ (8000984 <data_received+0x30c>)
 80006b4:	f000 fd3c 	bl	8001130 <usart_puts>
	usart_putdec(ep);
 80006b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006bc:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fd7d 	bl	80011c4 <usart_putdec>
	usart_puts(", received: ");
 80006ca:	48af      	ldr	r0, [pc, #700]	@ (8000988 <data_received+0x310>)
 80006cc:	f000 fd30 	bl	8001130 <usart_puts>
	usart_putdec(len);
 80006d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fd74 	bl	80011c4 <usart_putdec>
	usart_puts(" bytes \n");
 80006dc:	48ab      	ldr	r0, [pc, #684]	@ (800098c <data_received+0x314>)
 80006de:	f000 fd27 	bl	8001130 <usart_puts>
	if (ep != 2) {
 80006e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006e6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d002      	beq.n	80006f6 <data_received+0x7e>
		usart_puts("Unkown endpoint\n");
 80006f0:	48a7      	ldr	r0, [pc, #668]	@ (8000990 <data_received+0x318>)
 80006f2:	f000 fd1d 	bl	8001130 <usart_puts>
	}

	for (uint32_t i = 0; i < len; i++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80006fc:	e00f      	b.n	800071e <data_received+0xa6>
		usart_puthex(bulkBuffer[i]);
 80006fe:	4aa5      	ldr	r2, [pc, #660]	@ (8000994 <data_received+0x31c>)
 8000700:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fd2d 	bl	8001168 <usart_puthex>
		usart_putc(' ');
 800070e:	2020      	movs	r0, #32
 8000710:	f000 fcf6 	bl	8001100 <usart_putc>
	for (uint32_t i = 0; i < len; i++) {
 8000714:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000718:	3301      	adds	r3, #1
 800071a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800071e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000722:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000726:	429a      	cmp	r2, r3
 8000728:	d3e9      	bcc.n	80006fe <data_received+0x86>
	}
	usart_putc('\n');
 800072a:	200a      	movs	r0, #10
 800072c:	f000 fce8 	bl	8001100 <usart_putc>
	// R: Retrieve password, argument: index
	// S: Save password, argument: index, password

	int index;
	char password[256];
	switch (bulkBuffer[0]) {
 8000730:	4b98      	ldr	r3, [pc, #608]	@ (8000994 <data_received+0x31c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3b43      	subs	r3, #67	@ 0x43
 8000736:	2b15      	cmp	r3, #21
 8000738:	f200 8196 	bhi.w	8000a68 <data_received+0x3f0>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <data_received+0xcc>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	080007f9 	.word	0x080007f9
 8000748:	08000a69 	.word	0x08000a69
 800074c:	08000a69 	.word	0x08000a69
 8000750:	08000a69 	.word	0x08000a69
 8000754:	08000a69 	.word	0x08000a69
 8000758:	08000a69 	.word	0x08000a69
 800075c:	08000a69 	.word	0x08000a69
 8000760:	08000a69 	.word	0x08000a69
 8000764:	08000a69 	.word	0x08000a69
 8000768:	08000a69 	.word	0x08000a69
 800076c:	08000a69 	.word	0x08000a69
 8000770:	08000873 	.word	0x08000873
 8000774:	08000a69 	.word	0x08000a69
 8000778:	08000a69 	.word	0x08000a69
 800077c:	08000a69 	.word	0x08000a69
 8000780:	080008d1 	.word	0x080008d1
 8000784:	0800092f 	.word	0x0800092f
 8000788:	08000a69 	.word	0x08000a69
 800078c:	0800079d 	.word	0x0800079d
 8000790:	08000a69 	.word	0x08000a69
 8000794:	080007bf 	.word	0x080007bf
 8000798:	080009d5 	.word	0x080009d5
	case 'U':
		usart_puts("Unlocking vault\n");
 800079c:	487e      	ldr	r0, [pc, #504]	@ (8000998 <data_received+0x320>)
 800079e:	f000 fcc7 	bl	8001130 <usart_puts>
		vault_unlock();
 80007a2:	f000 f9a5 	bl	8000af0 <vault_unlock>
		// USBD_LL_ClearStallEP(usb, EP_BULK);
		USBD_LL_PrepareReceive(usb, EP_BULK, bulkBuffer, sizeof(bulkBuffer));
 80007a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007aa:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 80007ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007b2:	4a78      	ldr	r2, [pc, #480]	@ (8000994 <data_received+0x31c>)
 80007b4:	2102      	movs	r1, #2
 80007b6:	6800      	ldr	r0, [r0, #0]
 80007b8:	f008 faf1 	bl	8008d9e <USBD_LL_PrepareReceive>
		break;
 80007bc:	e163      	b.n	8000a86 <data_received+0x40e>
	case 'W':
		usart_puts("Checking if vault is locked\n");
 80007be:	4877      	ldr	r0, [pc, #476]	@ (800099c <data_received+0x324>)
 80007c0:	f000 fcb6 	bl	8001130 <usart_puts>
		int v = vault_is_locked();
 80007c4:	f000 fb13 	bl	8000dee <vault_is_locked>
 80007c8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
		if (v == 0) {
 80007cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d103      	bne.n	80007dc <data_received+0x164>
			// Unlocked
			strcpy((char *) bulkBuffer, "U");
 80007d4:	4b6f      	ldr	r3, [pc, #444]	@ (8000994 <data_received+0x31c>)
 80007d6:	2255      	movs	r2, #85	@ 0x55
 80007d8:	801a      	strh	r2, [r3, #0]
 80007da:	e002      	b.n	80007e2 <data_received+0x16a>
		} else {
			strcpy((char *) bulkBuffer, "L");
 80007dc:	4b6d      	ldr	r3, [pc, #436]	@ (8000994 <data_received+0x31c>)
 80007de:	224c      	movs	r2, #76	@ 0x4c
 80007e0:	801a      	strh	r2, [r3, #0]
		}
		USBD_LL_Transmit(usb, EP_BULK | 0x80, bulkBuffer, 1);
 80007e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007e6:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 80007ea:	2301      	movs	r3, #1
 80007ec:	4a69      	ldr	r2, [pc, #420]	@ (8000994 <data_received+0x31c>)
 80007ee:	2182      	movs	r1, #130	@ 0x82
 80007f0:	6800      	ldr	r0, [r0, #0]
 80007f2:	f008 fab1 	bl	8008d58 <USBD_LL_Transmit>
		break;
 80007f6:	e146      	b.n	8000a86 <data_received+0x40e>
	case 'C':
		usart_puts("Counting passwords\n");
 80007f8:	4869      	ldr	r0, [pc, #420]	@ (80009a0 <data_received+0x328>)
 80007fa:	f000 fc99 	bl	8001130 <usart_puts>
		int c = password_count();
 80007fe:	f000 fa5d 	bl	8000cbc <password_count>
 8000802:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
		uint16_t n = (uint16_t) sprintf((char *) bulkBuffer, "C:%d", c);
 8000806:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800080a:	4966      	ldr	r1, [pc, #408]	@ (80009a4 <data_received+0x32c>)
 800080c:	4861      	ldr	r0, [pc, #388]	@ (8000994 <data_received+0x31c>)
 800080e:	f008 fb35 	bl	8008e7c <siprintf>
 8000812:	4603      	mov	r3, r0
 8000814:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
		usart_puts("Sending ");
 8000818:	4863      	ldr	r0, [pc, #396]	@ (80009a8 <data_received+0x330>)
 800081a:	f000 fc89 	bl	8001130 <usart_puts>
		usart_putdec(n);
 800081e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fcce 	bl	80011c4 <usart_putdec>
		usart_puts(" bytes\n");
 8000828:	4860      	ldr	r0, [pc, #384]	@ (80009ac <data_received+0x334>)
 800082a:	f000 fc81 	bl	8001130 <usart_puts>
		USBD_StatusTypeDef res = USBD_LL_Transmit(usb, EP_BULK | 0x80, bulkBuffer, n);
 800082e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8000832:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000836:	f5a2 7096 	sub.w	r0, r2, #300	@ 0x12c
 800083a:	4a56      	ldr	r2, [pc, #344]	@ (8000994 <data_received+0x31c>)
 800083c:	2182      	movs	r1, #130	@ 0x82
 800083e:	6800      	ldr	r0, [r0, #0]
 8000840:	f008 fa8a 	bl	8008d58 <USBD_LL_Transmit>
 8000844:	4603      	mov	r3, r0
 8000846:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
		if (res != USBD_OK) {
 800084a:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00b      	beq.n	800086a <data_received+0x1f2>
			usart_puts("ERROR while sending data: ");
 8000852:	4857      	ldr	r0, [pc, #348]	@ (80009b0 <data_received+0x338>)
 8000854:	f000 fc6c 	bl	8001130 <usart_puts>
			usart_puthex((uint32_t) res);
 8000858:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fc83 	bl	8001168 <usart_puthex>
			usart_putc('\n');
 8000862:	200a      	movs	r0, #10
 8000864:	f000 fc4c 	bl	8001100 <usart_putc>
		} else {
			usart_puts("DONE\n");
		}
		break;
 8000868:	e10d      	b.n	8000a86 <data_received+0x40e>
			usart_puts("DONE\n");
 800086a:	4852      	ldr	r0, [pc, #328]	@ (80009b4 <data_received+0x33c>)
 800086c:	f000 fc60 	bl	8001130 <usart_puts>
		break;
 8000870:	e109      	b.n	8000a86 <data_received+0x40e>
	case 'N':
		sscanf((char *) bulkBuffer, "N:%d", &index);
 8000872:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000876:	461a      	mov	r2, r3
 8000878:	494f      	ldr	r1, [pc, #316]	@ (80009b8 <data_received+0x340>)
 800087a:	4846      	ldr	r0, [pc, #280]	@ (8000994 <data_received+0x31c>)
 800087c:	f008 fb1e 	bl	8008ebc <siscanf>
		usart_puts("Reading name: ");
 8000880:	484e      	ldr	r0, [pc, #312]	@ (80009bc <data_received+0x344>)
 8000882:	f000 fc55 	bl	8001130 <usart_puts>
		usart_putdec(index);
 8000886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800088a:	b29b      	uxth	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fc99 	bl	80011c4 <usart_putdec>
		usart_putc('\n');
 8000892:	200a      	movs	r0, #10
 8000894:	f000 fc34 	bl	8001100 <usart_putc>
		char *password = password_name(index);
 8000898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fa3d 	bl	8000d1c <password_name>
 80008a2:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
		strcpy((char *) bulkBuffer, password);
 80008a6:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80008aa:	483a      	ldr	r0, [pc, #232]	@ (8000994 <data_received+0x31c>)
 80008ac:	f008 fb66 	bl	8008f7c <strcpy>
		USBD_LL_Transmit(usb, EP_BULK | 0x80, bulkBuffer, strlen(password));
 80008b0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80008b4:	f7ff fc8c 	bl	80001d0 <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80008c0:	f5a2 7096 	sub.w	r0, r2, #300	@ 0x12c
 80008c4:	4a33      	ldr	r2, [pc, #204]	@ (8000994 <data_received+0x31c>)
 80008c6:	2182      	movs	r1, #130	@ 0x82
 80008c8:	6800      	ldr	r0, [r0, #0]
 80008ca:	f008 fa45 	bl	8008d58 <USBD_LL_Transmit>
		break;
 80008ce:	e0da      	b.n	8000a86 <data_received+0x40e>
	case 'R':
		sscanf((char *) bulkBuffer, "R:%d", &index);
 80008d0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80008d4:	461a      	mov	r2, r3
 80008d6:	493a      	ldr	r1, [pc, #232]	@ (80009c0 <data_received+0x348>)
 80008d8:	482e      	ldr	r0, [pc, #184]	@ (8000994 <data_received+0x31c>)
 80008da:	f008 faef 	bl	8008ebc <siscanf>
		usart_puts("Reading password: ");
 80008de:	4839      	ldr	r0, [pc, #228]	@ (80009c4 <data_received+0x34c>)
 80008e0:	f000 fc26 	bl	8001130 <usart_puts>
		usart_putdec(index);
 80008e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fc6a 	bl	80011c4 <usart_putdec>
		usart_putc('\n');
 80008f0:	200a      	movs	r0, #10
 80008f2:	f000 fc05 	bl	8001100 <usart_putc>
		password = password_retrieve(index);
 80008f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fa1e 	bl	8000d3c <password_retrieve>
 8000900:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
		strcpy((char *) bulkBuffer, password);
 8000904:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8000908:	4822      	ldr	r0, [pc, #136]	@ (8000994 <data_received+0x31c>)
 800090a:	f008 fb37 	bl	8008f7c <strcpy>
		USBD_LL_Transmit(usb, EP_BULK | 0x80, bulkBuffer, strlen(password));
 800090e:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8000912:	f7ff fc5d 	bl	80001d0 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	b29b      	uxth	r3, r3
 800091a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800091e:	f5a2 7096 	sub.w	r0, r2, #300	@ 0x12c
 8000922:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <data_received+0x31c>)
 8000924:	2182      	movs	r1, #130	@ 0x82
 8000926:	6800      	ldr	r0, [r0, #0]
 8000928:	f008 fa16 	bl	8008d58 <USBD_LL_Transmit>
		break;
 800092c:	e0ab      	b.n	8000a86 <data_received+0x40e>
	case 'S':
		sscanf((char *) bulkBuffer, "S:%d:%50s:", &index, password);
 800092e:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8000932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000936:	4924      	ldr	r1, [pc, #144]	@ (80009c8 <data_received+0x350>)
 8000938:	4816      	ldr	r0, [pc, #88]	@ (8000994 <data_received+0x31c>)
 800093a:	f008 fabf 	bl	8008ebc <siscanf>
		usart_puts("Writing password: ");
 800093e:	4823      	ldr	r0, [pc, #140]	@ (80009cc <data_received+0x354>)
 8000940:	f000 fbf6 	bl	8001130 <usart_puts>
		usart_putdec(index);
 8000944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000948:	b29b      	uxth	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fc3a 	bl	80011c4 <usart_putdec>
		usart_puts(" : ");
 8000950:	481f      	ldr	r0, [pc, #124]	@ (80009d0 <data_received+0x358>)
 8000952:	f000 fbed 	bl	8001130 <usart_puts>
		usart_putc('\n');
 8000956:	200a      	movs	r0, #10
 8000958:	f000 fbd2 	bl	8001100 <usart_putc>
		password_save(index, password);
 800095c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000960:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fa37 	bl	8000dd8 <password_save>
		USBD_LL_PrepareReceive(usb, EP_BULK, bulkBuffer, sizeof(bulkBuffer));
 800096a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800096e:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8000972:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000976:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <data_received+0x31c>)
 8000978:	2102      	movs	r1, #2
 800097a:	6800      	ldr	r0, [r0, #0]
 800097c:	f008 fa0f 	bl	8008d9e <USBD_LL_PrepareReceive>
		break;
 8000980:	e081      	b.n	8000a86 <data_received+0x40e>
 8000982:	bf00      	nop
 8000984:	0800a184 	.word	0x0800a184
 8000988:	0800a198 	.word	0x0800a198
 800098c:	0800a1a8 	.word	0x0800a1a8
 8000990:	0800a1b4 	.word	0x0800a1b4
 8000994:	20000e0c 	.word	0x20000e0c
 8000998:	0800a1c8 	.word	0x0800a1c8
 800099c:	0800a1dc 	.word	0x0800a1dc
 80009a0:	0800a1fc 	.word	0x0800a1fc
 80009a4:	0800a210 	.word	0x0800a210
 80009a8:	0800a218 	.word	0x0800a218
 80009ac:	0800a224 	.word	0x0800a224
 80009b0:	0800a22c 	.word	0x0800a22c
 80009b4:	0800a248 	.word	0x0800a248
 80009b8:	0800a250 	.word	0x0800a250
 80009bc:	0800a258 	.word	0x0800a258
 80009c0:	0800a268 	.word	0x0800a268
 80009c4:	0800a270 	.word	0x0800a270
 80009c8:	0800a284 	.word	0x0800a284
 80009cc:	0800a290 	.word	0x0800a290
 80009d0:	0800a2a4 	.word	0x0800a2a4
	case 'X':
		// int ret = sscanf((char *) bulkBuffer, "X:%50s:%50s:", name, password);
		char *name = &bulkBuffer[2];
 80009d4:	4b30      	ldr	r3, [pc, #192]	@ (8000a98 <data_received+0x420>)
 80009d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		int index = memfind(name, ':');
 80009da:	213a      	movs	r1, #58	@ 0x3a
 80009dc:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80009e0:	f7ff fdce 	bl	8000580 <memfind>
 80009e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		name[index] = 0;
 80009e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009ec:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f0:	4413      	add	r3, r2
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
		password = &name[index+1];
 80009f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009fa:	3301      	adds	r3, #1
 80009fc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000a00:	4413      	add	r3, r2
 8000a02:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		index = memfind(password, ':');
 8000a06:	213a      	movs	r1, #58	@ 0x3a
 8000a08:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8000a0c:	f7ff fdb8 	bl	8000580 <memfind>
 8000a10:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		password[index] = 0;
 8000a14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a18:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000a1c:	4413      	add	r3, r2
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
		usart_puts("New password: ");
 8000a22:	481e      	ldr	r0, [pc, #120]	@ (8000a9c <data_received+0x424>)
 8000a24:	f000 fb84 	bl	8001130 <usart_puts>
		usart_puts(name);
 8000a28:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8000a2c:	f000 fb80 	bl	8001130 <usart_puts>
		usart_puts(" ");
 8000a30:	481b      	ldr	r0, [pc, #108]	@ (8000aa0 <data_received+0x428>)
 8000a32:	f000 fb7d 	bl	8001130 <usart_puts>
		usart_puts(password);
 8000a36:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8000a3a:	f000 fb79 	bl	8001130 <usart_puts>
		usart_putc('\n');
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f000 fb5e 	bl	8001100 <usart_putc>

		password_new(name, password);
 8000a44:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8000a48:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8000a4c:	f000 f986 	bl	8000d5c <password_new>
		USBD_LL_PrepareReceive(usb, EP_BULK, bulkBuffer, sizeof(bulkBuffer));
 8000a50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a54:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8000a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a5c:	4a11      	ldr	r2, [pc, #68]	@ (8000aa4 <data_received+0x42c>)
 8000a5e:	2102      	movs	r1, #2
 8000a60:	6800      	ldr	r0, [r0, #0]
 8000a62:	f008 f99c 	bl	8008d9e <USBD_LL_PrepareReceive>
		break;
 8000a66:	e00e      	b.n	8000a86 <data_received+0x40e>
	default:
		usart_puts("Unkown command\n");
 8000a68:	480f      	ldr	r0, [pc, #60]	@ (8000aa8 <data_received+0x430>)
 8000a6a:	f000 fb61 	bl	8001130 <usart_puts>
		USBD_LL_PrepareReceive(usb, EP_BULK, bulkBuffer, sizeof(bulkBuffer));
 8000a6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a72:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8000a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <data_received+0x42c>)
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	6800      	ldr	r0, [r0, #0]
 8000a80:	f008 f98d 	bl	8008d9e <USBD_LL_PrepareReceive>
		break;
 8000a84:	bf00      	nop
	}

	usart_puts("Done handling command\n");
 8000a86:	4809      	ldr	r0, [pc, #36]	@ (8000aac <data_received+0x434>)
 8000a88:	f000 fb52 	bl	8001130 <usart_puts>
	return USBD_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000e0e 	.word	0x20000e0e
 8000a9c:	0800a2a8 	.word	0x0800a2a8
 8000aa0:	0800a2b8 	.word	0x0800a2b8
 8000aa4:	20000e0c 	.word	0x20000e0c
 8000aa8:	0800a2bc 	.word	0x0800a2bc
 8000aac:	0800a2cc 	.word	0x0800a2cc

08000ab0 <descriptor>:
		0x00, 0x01, // BCD Version
		0xEE, // Vendor Code
		3, // Landing page String Index
};

uint8_t *descriptor(uint16_t *len) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	*len = sizeof(class_descriptor);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	223f      	movs	r2, #63	@ 0x3f
 8000abc:	801a      	strh	r2, [r3, #0]
	return class_descriptor;
 8000abe:	4b03      	ldr	r3, [pc, #12]	@ (8000acc <descriptor+0x1c>)
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	20000000 	.word	0x20000000

08000ad0 <handle_setup>:

uint8_t *handle_setup(USBD_HandleTypeDef *usb, USBD_SetupReqTypedef *req) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	usart_puts("Handle setup");
 8000ada:	4804      	ldr	r0, [pc, #16]	@ (8000aec <handle_setup+0x1c>)
 8000adc:	f000 fb28 	bl	8001130 <usart_puts>
	return NULL;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	0800a2e4 	.word	0x0800a2e4

08000af0 <vault_unlock>:
		.GetFSConfigDescriptor = descriptor,
		.GetOtherSpeedConfigDescriptor = descriptor,
		.GetDeviceQualifierDescriptor = NULL,
};

int vault_unlock() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	usart_puts("Unlocking vault\n");
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <vault_unlock+0x10>)
 8000af6:	f000 fb1b 	bl	8001130 <usart_puts>
	return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	0800a1c8 	.word	0x0800a1c8

08000b04 <real_main>:
__attribute__((section(".vault"))) char names[1024];
__attribute__((section(".vault"))) char passwords[2048];
char namesBuff[1024] = {0xFF};
char passwordsBuff[2048] = {0xFF};

void real_main() {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
	if (names[0] == 0) {
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <real_main+0x3c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d112      	bne.n	8000b38 <real_main+0x34>
		usart_puts("Setting up vault\n");
 8000b12:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <real_main+0x40>)
 8000b14:	f000 fb0c 	bl	8001130 <usart_puts>
		HAL_FLASH_Unlock();
 8000b18:	f000 fdac 	bl	8001674 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef erase;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
		erase.PageAddress = (uint32_t) &names;
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <real_main+0x3c>)
 8000b22:	60bb      	str	r3, [r7, #8]
		erase.NbPages = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
		uint32_t *err;
		HAL_FLASHEx_Erase(&erase, &err);
 8000b28:	463a      	mov	r2, r7
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fe64 	bl	80017fc <HAL_FLASHEx_Erase>
		HAL_FLASH_Lock();
 8000b34:	f000 fdc4 	bl	80016c0 <HAL_FLASH_Lock>
	}
}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	0800a800 	.word	0x0800a800
 8000b44:	0800a304 	.word	0x0800a304

08000b48 <get_index>:


#define PAGE_SIZE 2048

char *get_index(char *buff, int index) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	int count = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<2048;i++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	e013      	b.n	8000b84 <get_index+0x3c>
		if (count == index) return &buff[i];
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d103      	bne.n	8000b6c <get_index+0x24>
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	e012      	b.n	8000b92 <get_index+0x4a>
		if (buff[i] == '\0') count++;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <get_index+0x36>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<2048;i++) {
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	3301      	adds	r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b8a:	dbe7      	blt.n	8000b5c <get_index+0x14>
	}

	return &buff[2048];
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <update_flash>:

void update_flash() {
 8000ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ba4:	b088      	sub	sp, #32
 8000ba6:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000ba8:	f000 fd64 	bl	8001674 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
	erase.PageAddress = (uint32_t) &names;
 8000bb0:	4b38      	ldr	r3, [pc, #224]	@ (8000c94 <update_flash+0xf4>)
 8000bb2:	60bb      	str	r3, [r7, #8]
	erase.NbPages = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
	uint32_t *err;
	usart_puts("Erasing flash\n");
 8000bb8:	4837      	ldr	r0, [pc, #220]	@ (8000c98 <update_flash+0xf8>)
 8000bba:	f000 fab9 	bl	8001130 <usart_puts>
	HAL_FLASHEx_Erase(&erase, &err);
 8000bbe:	463a      	mov	r2, r7
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fe19 	bl	80017fc <HAL_FLASHEx_Erase>

	usart_puts("Programming flash\n");
 8000bca:	4834      	ldr	r0, [pc, #208]	@ (8000c9c <update_flash+0xfc>)
 8000bcc:	f000 fab0 	bl	8001130 <usart_puts>
	uint32_t *buff = (uint32_t *) namesBuff;
 8000bd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ca0 <update_flash+0x100>)
 8000bd2:	617b      	str	r3, [r7, #20]
	uint32_t *src = (uint32_t *) names;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <update_flash+0xf4>)
 8000bd6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i< 1024 / 4; i++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	e027      	b.n	8000c2e <update_flash+0x8e>
		usart_puts("Programming address: ");
 8000bde:	4831      	ldr	r0, [pc, #196]	@ (8000ca4 <update_flash+0x104>)
 8000be0:	f000 faa6 	bl	8001130 <usart_puts>
		usart_puthex((uint32_t) &buff[i]);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	4413      	add	r3, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fabb 	bl	8001168 <usart_puthex>
		usart_putc('\n');
 8000bf2:	200a      	movs	r0, #10
 8000bf4:	f000 fa84 	bl	8001100 <usart_putc>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)&src[i], buff[i]) != HAL_OK) {
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4619      	mov	r1, r3
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4413      	add	r3, r2
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4698      	mov	r8, r3
 8000c10:	4691      	mov	r9, r2
 8000c12:	4642      	mov	r2, r8
 8000c14:	464b      	mov	r3, r9
 8000c16:	2002      	movs	r0, #2
 8000c18:	f000 fcbc 	bl	8001594 <HAL_FLASH_Program>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <update_flash+0x88>
			usart_puts("Cannot program flash names\n");
 8000c22:	4821      	ldr	r0, [pc, #132]	@ (8000ca8 <update_flash+0x108>)
 8000c24:	f000 fa84 	bl	8001130 <usart_puts>
	for (int i = 0; i< 1024 / 4; i++) {
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2bff      	cmp	r3, #255	@ 0xff
 8000c32:	ddd4      	ble.n	8000bde <update_flash+0x3e>
		}
	}

	buff = (uint32_t *) passwordsBuff;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <update_flash+0x10c>)
 8000c36:	617b      	str	r3, [r7, #20]
	src = (uint32_t *) passwords;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <update_flash+0x110>)
 8000c3a:	613b      	str	r3, [r7, #16]
	for (int i=0;i<2048 / 4;i++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	e01a      	b.n	8000c78 <update_flash+0xd8>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)&src[i], buff[i]) != HAL_OK) {
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	4413      	add	r3, r2
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	461c      	mov	r4, r3
 8000c5a:	4615      	mov	r5, r2
 8000c5c:	4622      	mov	r2, r4
 8000c5e:	462b      	mov	r3, r5
 8000c60:	2002      	movs	r0, #2
 8000c62:	f000 fc97 	bl	8001594 <HAL_FLASH_Program>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <update_flash+0xd2>
			usart_puts("Cannot program flash passwords\n");
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <update_flash+0x114>)
 8000c6e:	f000 fa5f 	bl	8001130 <usart_puts>
	for (int i=0;i<2048 / 4;i++) {
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3301      	adds	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c7e:	dbe0      	blt.n	8000c42 <update_flash+0xa2>
		}
	}

	usart_puts("Programmed flash\n");
 8000c80:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <update_flash+0x118>)
 8000c82:	f000 fa55 	bl	8001130 <usart_puts>
	HAL_FLASH_Lock();
 8000c86:	f000 fd1b 	bl	80016c0 <HAL_FLASH_Lock>
}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c94:	0800a800 	.word	0x0800a800
 8000c98:	0800a318 	.word	0x0800a318
 8000c9c:	0800a328 	.word	0x0800a328
 8000ca0:	20000078 	.word	0x20000078
 8000ca4:	0800a33c 	.word	0x0800a33c
 8000ca8:	0800a354 	.word	0x0800a354
 8000cac:	20000478 	.word	0x20000478
 8000cb0:	0800ac00 	.word	0x0800ac00
 8000cb4:	0800a370 	.word	0x0800a370
 8000cb8:	0800a390 	.word	0x0800a390

08000cbc <password_count>:

int password_count() {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
	int count = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
	if (names[0] == '\0') return 0;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <password_count+0x5c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <password_count+0x16>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e01b      	b.n	8000d0a <password_count+0x4e>
	for (int i=0;i<1024;i++) {
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	e011      	b.n	8000cfc <password_count+0x40>
		if (names[i] == '\xff') {
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d18 <password_count+0x5c>)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d010      	beq.n	8000d06 <password_count+0x4a>
			break;
		}
		if (names[i] == '\0') {
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d18 <password_count+0x5c>)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <password_count+0x3a>
			count++;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	607b      	str	r3, [r7, #4]
	for (int i=0;i<1024;i++) {
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d02:	dbe9      	blt.n	8000cd8 <password_count+0x1c>
 8000d04:	e000      	b.n	8000d08 <password_count+0x4c>
			break;
 8000d06:	bf00      	nop
		}
	}

	return count;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	0800a800 	.word	0x0800a800

08000d1c <password_name>:

char *password_name(int index) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	return get_index(names, index);
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <password_name+0x1c>)
 8000d28:	f7ff ff0e 	bl	8000b48 <get_index>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	0800a800 	.word	0x0800a800

08000d3c <password_retrieve>:
char *password_retrieve(int index) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	return get_index(passwords, index);
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <password_retrieve+0x1c>)
 8000d48:	f7ff fefe 	bl	8000b48 <get_index>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	0800ac00 	.word	0x0800ac00

08000d5c <password_new>:

void password_new(char *name, char *password) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	memcpy(namesBuff, names, sizeof(names));
 8000d66:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <password_new+0x6c>)
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <password_new+0x70>)
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d72:	461a      	mov	r2, r3
 8000d74:	f008 f90a 	bl	8008f8c <memcpy>
	memcpy(passwordsBuff, passwords, sizeof(passwords));
 8000d78:	4a15      	ldr	r2, [pc, #84]	@ (8000dd0 <password_new+0x74>)
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <password_new+0x78>)
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d84:	461a      	mov	r2, r3
 8000d86:	f008 f901 	bl	8008f8c <memcpy>
	int namesIndex = memfind(namesBuff, '\xff');
 8000d8a:	21ff      	movs	r1, #255	@ 0xff
 8000d8c:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <password_new+0x6c>)
 8000d8e:	f7ff fbf7 	bl	8000580 <memfind>
 8000d92:	60f8      	str	r0, [r7, #12]
	strcpy(&namesBuff[namesIndex], name);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <password_new+0x6c>)
 8000d98:	4413      	add	r3, r2
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f008 f8ed 	bl	8008f7c <strcpy>
	int passwordIndex = memfind(passwordsBuff, '\xff');
 8000da2:	21ff      	movs	r1, #255	@ 0xff
 8000da4:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <password_new+0x74>)
 8000da6:	f7ff fbeb 	bl	8000580 <memfind>
 8000daa:	60b8      	str	r0, [r7, #8]
	strcpy(&passwordsBuff[passwordIndex], password);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <password_new+0x74>)
 8000db0:	4413      	add	r3, r2
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f008 f8e1 	bl	8008f7c <strcpy>

	update_flash();
 8000dba:	f7ff fef1 	bl	8000ba0 <update_flash>
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000078 	.word	0x20000078
 8000dcc:	0800a800 	.word	0x0800a800
 8000dd0:	20000478 	.word	0x20000478
 8000dd4:	0800ac00 	.word	0x0800ac00

08000dd8 <password_save>:

void password_save(int index, char *password) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <vault_is_locked>:

int vault_is_locked() {
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
	return 0;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6193      	str	r3, [r2, #24]
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	4a08      	ldr	r2, [pc, #32]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e28:	61d3      	str	r3, [r2, #28]
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e36:	2007      	movs	r0, #7
 8000e38:	f000 fb6a 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a17      	ldr	r2, [pc, #92]	@ (8000ec4 <HAL_I2C_MspInit+0x7c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d127      	bne.n	8000eba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a16      	ldr	r2, [pc, #88]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e82:	23c0      	movs	r3, #192	@ 0xc0
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e92:	2304      	movs	r3, #4
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <HAL_I2C_MspInit+0x84>)
 8000e9e:	f000 fd51 	bl	8001944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a08      	ldr	r2, [pc, #32]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	@ 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48000400 	.word	0x48000400

08000ed0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <HAL_SPI_MspInit+0x7c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d128      	bne.n	8000f44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef2:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <HAL_SPI_MspInit+0x80>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	4a16      	ldr	r2, [pc, #88]	@ (8000f50 <HAL_SPI_MspInit+0x80>)
 8000ef8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000efc:	6193      	str	r3, [r2, #24]
 8000efe:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <HAL_SPI_MspInit+0x80>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <HAL_SPI_MspInit+0x80>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <HAL_SPI_MspInit+0x80>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f14:	6153      	str	r3, [r2, #20]
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <HAL_SPI_MspInit+0x80>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000f22:	23e0      	movs	r3, #224	@ 0xe0
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f32:	2305      	movs	r3, #5
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f000 fd00 	bl	8001944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	@ 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40013000 	.word	0x40013000
 8000f50:	40021000 	.word	0x40021000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <NMI_Handler+0x4>

08000f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000faa:	f000 f9c1 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <USB_HP_CAN_TX_IRQHandler+0x10>)
 8000fba:	f001 f874 	bl	80020a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20001c00 	.word	0x20001c00

08000fc8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000fce:	f001 f86a 	bl	80020a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20001c00 	.word	0x20001c00

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f007 ff8a 	bl	8008f24 <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000a000 	.word	0x2000a000
 800103c:	00000400 	.word	0x00000400
 8001040:	20000f0c 	.word	0x20000f0c
 8001044:	20002020 	.word	0x20002020

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <usart_init>:
#include "usart.h"

#include <stm32f303xc.h>

void usart_init(int baud) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <usart_init+0x84>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a1d      	ldr	r2, [pc, #116]	@ (80010f0 <usart_init+0x84>)
 800107a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107e:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;  // Used by USART1
 8001080:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <usart_init+0x84>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	4a1a      	ldr	r2, [pc, #104]	@ (80010f0 <usart_init+0x84>)
 8001086:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800108a:	6153      	str	r3, [r2, #20]
    // GPIOC 4, 5 Alternate function
    GPIOC->MODER &= ~(GPIO_MODER_MODER4 | GPIO_MODER_MODER5);
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <usart_init+0x88>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <usart_init+0x88>)
 8001092:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001096:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <usart_init+0x88>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <usart_init+0x88>)
 800109e:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 80010a2:	6013      	str	r3, [r2, #0]
    // GPIOC 4,5 Alternate function 7 (USART 1 TX/RX)
    // STM32F3Datasheet.pdf Page 47
    GPIOC->AFR[0] &= ~(GPIO_AFRL_AFRL4 | GPIO_AFRL_AFRL5);
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <usart_init+0x88>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <usart_init+0x88>)
 80010aa:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80010ae:	6213      	str	r3, [r2, #32]
    GPIOC->AFR[0] |= (7 << 16) | (7 << 20);
 80010b0:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <usart_init+0x88>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4a0f      	ldr	r2, [pc, #60]	@ (80010f4 <usart_init+0x88>)
 80010b6:	f443 03ee 	orr.w	r3, r3, #7798784	@ 0x770000
 80010ba:	6213      	str	r3, [r2, #32]

    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <usart_init+0x8c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <usart_init+0x8c>)
 80010c2:	f043 030c 	orr.w	r3, r3, #12
 80010c6:	6013      	str	r3, [r2, #0]
    USART1->BRR = SystemCoreClock / baud;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <usart_init+0x90>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	490a      	ldr	r1, [pc, #40]	@ (80010f8 <usart_init+0x8c>)
 80010d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d4:	60cb      	str	r3, [r1, #12]
    USART1->CR1 |= USART_CR1_UE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <usart_init+0x8c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <usart_init+0x8c>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6013      	str	r3, [r2, #0]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000800 	.word	0x48000800
 80010f8:	40013800 	.word	0x40013800
 80010fc:	20000c78 	.word	0x20000c78

08001100 <usart_putc>:

void usart_putc(char ch) {
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
    // Wait for USART1->ISR->TXE to be set
    while ((USART1->ISR & USART_ISR_TXE) == 0)
 800110a:	bf00      	nop
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <usart_putc+0x2c>)
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f9      	beq.n	800110c <usart_putc+0xc>
        ;
    USART1->TDR = ch;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <usart_putc+0x2c>)
 800111a:	79fa      	ldrb	r2, [r7, #7]
 800111c:	b292      	uxth	r2, r2
 800111e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40013800 	.word	0x40013800

08001130 <usart_puts>:

void usart_puts(const char *str) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    for (int i = 0; str[i] != '\0'; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e009      	b.n	8001152 <usart_puts+0x22>
        usart_putc(str[i]);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ffda 	bl	8001100 <usart_putc>
    for (int i = 0; str[i] != '\0'; i++) {
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ef      	bne.n	800113e <usart_puts+0xe>
    }
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <usart_puthex>:

void usart_puthex(uint32_t word) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    // Mask top 4 bit
    uint32_t mask = 0xF << (32 - 4);
 8001170:	f04f 4370 	mov.w	r3, #4026531840	@ 0xf0000000
 8001174:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < 8; i++) {
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e01a      	b.n	80011b2 <usart_puthex+0x4a>
        // Extract next 4 bit
        char v = (word & mask) >> (32 - 4);
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	0f1b      	lsrs	r3, r3, #28
 8001184:	73fb      	strb	r3, [r7, #15]
        if (v < 10) {
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b09      	cmp	r3, #9
 800118a:	d806      	bhi.n	800119a <usart_puthex+0x32>
            usart_putc(v + 0x30);
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	3330      	adds	r3, #48	@ 0x30
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ffb4 	bl	8001100 <usart_putc>
 8001198:	e005      	b.n	80011a6 <usart_puthex+0x3e>
        } else {
            usart_putc(v + 0x41 - 10);
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	3337      	adds	r3, #55	@ 0x37
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ffad 	bl	8001100 <usart_putc>
        }

        word = word << 4;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 8; i++) {
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b07      	cmp	r3, #7
 80011b6:	dde1      	ble.n	800117c <usart_puthex+0x14>
    }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <usart_putdec>:

void usart_putdec(uint16_t halfword) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
    char buff[5];
    int n;

    for(n=0;n<5;n++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e01f      	b.n	8001214 <usart_putdec+0x50>
        uint8_t v = halfword %  10 + '0';
 80011d4:	88fa      	ldrh	r2, [r7, #6]
 80011d6:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <usart_putdec+0x88>)
 80011d8:	fba3 1302 	umull	r1, r3, r3, r2
 80011dc:	08d9      	lsrs	r1, r3, #3
 80011de:	460b      	mov	r3, r1
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	3330      	adds	r3, #48	@ 0x30
 80011ee:	73fb      	strb	r3, [r7, #15]
        buff[n] = v;
 80011f0:	f107 0208 	add.w	r2, r7, #8
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	701a      	strb	r2, [r3, #0]
        halfword /= 10;
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	4a13      	ldr	r2, [pc, #76]	@ (800124c <usart_putdec+0x88>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	08db      	lsrs	r3, r3, #3
 8001206:	80fb      	strh	r3, [r7, #6]
        if (halfword == 0) break;
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <usart_putdec+0x58>
    for(n=0;n<5;n++) {
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2b04      	cmp	r3, #4
 8001218:	dddc      	ble.n	80011d4 <usart_putdec+0x10>
 800121a:	e000      	b.n	800121e <usart_putdec+0x5a>
        if (halfword == 0) break;
 800121c:	bf00      	nop
    }

    for (int i=n;i>=0;i--) {
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	e00a      	b.n	800123a <usart_putdec+0x76>
        usart_putc(buff[i]);
 8001224:	f107 0208 	add.w	r2, r7, #8
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff66 	bl	8001100 <usart_putc>
    for (int i=n;i>=0;i--) {
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	3b01      	subs	r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	daf1      	bge.n	8001224 <usart_putdec+0x60>
    }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	cccccccd 	.word	0xcccccccd

08001250 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001288 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001254:	f7ff fef8 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	@ (800129c <LoopForever+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f007 fe57 	bl	8008f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001282:	f7fe fffd 	bl	8000280 <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001288:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000d34 	.word	0x20000d34
  ldr r2, =_sidata
 8001294:	0800b800 	.word	0x0800b800
  ldr r2, =_sbss
 8001298:	20000d38 	.word	0x20000d38
  ldr r4, =_ebss
 800129c:	2000201c 	.word	0x2000201c

080012a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_2_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <HAL_Init+0x28>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <HAL_Init+0x28>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 f92b 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f808 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c0:	f7ff fd9e 	bl	8000e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40022000 	.word	0x40022000

080012d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f943 	bl	800157a <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800130c:	f000 f90b 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	@ (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000c78 	.word	0x20000c78
 8001328:	20000c80 	.word	0x20000c80
 800132c:	20000c7c 	.word	0x20000c7c

08001330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000c80 	.word	0x20000c80
 8001354:	20000f10 	.word	0x20000f10

08001358 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;  
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000f10 	.word	0x20000f10

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	@ (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	@ (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	@ 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	@ 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014f0:	f7ff ff8e 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff29 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff3e 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff8e 	bl	8001464 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5d 	bl	8001410 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff31 	bl	80013d4 <__NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa2 	bl	80014cc <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015ae:	4b2f      	ldr	r3, [pc, #188]	@ (800166c <HAL_FLASH_Program+0xd8>)
 80015b0:	7e1b      	ldrb	r3, [r3, #24]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_FLASH_Program+0x26>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e054      	b.n	8001664 <HAL_FLASH_Program+0xd0>
 80015ba:	4b2c      	ldr	r3, [pc, #176]	@ (800166c <HAL_FLASH_Program+0xd8>)
 80015bc:	2201      	movs	r2, #1
 80015be:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80015c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015c4:	f000 f8a8 	bl	8001718 <FLASH_WaitForLastOperation>
 80015c8:	4603      	mov	r3, r0
 80015ca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d144      	bne.n	800165c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d102      	bne.n	80015de <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80015d8:	2301      	movs	r3, #1
 80015da:	757b      	strb	r3, [r7, #21]
 80015dc:	e007      	b.n	80015ee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d102      	bne.n	80015ea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80015e4:	2302      	movs	r3, #2
 80015e6:	757b      	strb	r3, [r7, #21]
 80015e8:	e001      	b.n	80015ee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80015ea:	2304      	movs	r3, #4
 80015ec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	75bb      	strb	r3, [r7, #22]
 80015f2:	e02d      	b.n	8001650 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80015f4:	7dbb      	ldrb	r3, [r7, #22]
 80015f6:	005a      	lsls	r2, r3, #1
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	eb02 0c03 	add.w	ip, r2, r3
 80015fe:	7dbb      	ldrb	r3, [r7, #22]
 8001600:	0119      	lsls	r1, r3, #4
 8001602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001606:	f1c1 0620 	rsb	r6, r1, #32
 800160a:	f1a1 0020 	sub.w	r0, r1, #32
 800160e:	fa22 f401 	lsr.w	r4, r2, r1
 8001612:	fa03 f606 	lsl.w	r6, r3, r6
 8001616:	4334      	orrs	r4, r6
 8001618:	fa23 f000 	lsr.w	r0, r3, r0
 800161c:	4304      	orrs	r4, r0
 800161e:	fa23 f501 	lsr.w	r5, r3, r1
 8001622:	b2a3      	uxth	r3, r4
 8001624:	4619      	mov	r1, r3
 8001626:	4660      	mov	r0, ip
 8001628:	f000 f85a 	bl	80016e0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800162c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001630:	f000 f872 	bl	8001718 <FLASH_WaitForLastOperation>
 8001634:	4603      	mov	r3, r0
 8001636:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001638:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <HAL_FLASH_Program+0xdc>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <HAL_FLASH_Program+0xdc>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d107      	bne.n	800165a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800164a:	7dbb      	ldrb	r3, [r7, #22]
 800164c:	3301      	adds	r3, #1
 800164e:	75bb      	strb	r3, [r7, #22]
 8001650:	7dba      	ldrb	r2, [r7, #22]
 8001652:	7d7b      	ldrb	r3, [r7, #21]
 8001654:	429a      	cmp	r2, r3
 8001656:	d3cd      	bcc.n	80015f4 <HAL_FLASH_Program+0x60>
 8001658:	e000      	b.n	800165c <HAL_FLASH_Program+0xc8>
      {
        break;
 800165a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_FLASH_Program+0xd8>)
 800165e:	2200      	movs	r2, #0
 8001660:	761a      	strb	r2, [r3, #24]

  return status;
 8001662:	7dfb      	ldrb	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166c:	20000f18 	.word	0x20000f18
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_FLASH_Unlock+0x40>)
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00d      	beq.n	80016a6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_FLASH_Unlock+0x40>)
 800168c:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <HAL_FLASH_Unlock+0x44>)
 800168e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_FLASH_Unlock+0x40>)
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <HAL_FLASH_Unlock+0x48>)
 8001694:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001696:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <HAL_FLASH_Unlock+0x40>)
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40022000 	.word	0x40022000
 80016b8:	45670123 	.word	0x45670123
 80016bc:	cdef89ab 	.word	0xcdef89ab

080016c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_FLASH_Lock+0x1c>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_FLASH_Lock+0x1c>)
 80016ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40022000 	.word	0x40022000

080016e0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <FLASH_Program_HalfWord+0x30>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <FLASH_Program_HalfWord+0x34>)
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <FLASH_Program_HalfWord+0x34>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	887a      	ldrh	r2, [r7, #2]
 8001702:	801a      	strh	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20000f18 	.word	0x20000f18
 8001714:	40022000 	.word	0x40022000

08001718 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fe1a 	bl	8001358 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001726:	e010      	b.n	800174a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800172e:	d00c      	beq.n	800174a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <FLASH_WaitForLastOperation+0x2e>
 8001736:	f7ff fe0f 	bl	8001358 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	d201      	bcs.n	800174a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e01f      	b.n	800178a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <FLASH_WaitForLastOperation+0x7c>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d0e8      	beq.n	8001728 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <FLASH_WaitForLastOperation+0x7c>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	2b20      	cmp	r3, #32
 8001760:	d102      	bne.n	8001768 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <FLASH_WaitForLastOperation+0x7c>)
 8001764:	2220      	movs	r2, #32
 8001766:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <FLASH_WaitForLastOperation+0x7c>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b10      	cmp	r3, #16
 8001772:	d005      	beq.n	8001780 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <FLASH_WaitForLastOperation+0x7c>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800177c:	2b04      	cmp	r3, #4
 800177e:	d103      	bne.n	8001788 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001780:	f000 f80a 	bl	8001798 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000

08001798 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <FLASH_SetErrorCode+0x5c>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d109      	bne.n	80017c2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <FLASH_SetErrorCode+0x60>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	4a10      	ldr	r2, [pc, #64]	@ (80017f8 <FLASH_SetErrorCode+0x60>)
 80017b8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f043 0310 	orr.w	r3, r3, #16
 80017c0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <FLASH_SetErrorCode+0x5c>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d109      	bne.n	80017e2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <FLASH_SetErrorCode+0x60>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <FLASH_SetErrorCode+0x60>)
 80017d8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80017e2:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <FLASH_SetErrorCode+0x5c>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	60d3      	str	r3, [r2, #12]
}  
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40022000 	.word	0x40022000
 80017f8:	20000f18 	.word	0x20000f18

080017fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800180e:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <HAL_FLASHEx_Erase+0xcc>)
 8001810:	7e1b      	ldrb	r3, [r3, #24]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_FLASHEx_Erase+0x1e>
 8001816:	2302      	movs	r3, #2
 8001818:	e052      	b.n	80018c0 <HAL_FLASHEx_Erase+0xc4>
 800181a:	4b2b      	ldr	r3, [pc, #172]	@ (80018c8 <HAL_FLASHEx_Erase+0xcc>)
 800181c:	2201      	movs	r2, #1
 800181e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d115      	bne.n	8001854 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001828:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800182c:	f7ff ff74 	bl	8001718 <FLASH_WaitForLastOperation>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d140      	bne.n	80018b8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001836:	f000 f84b 	bl	80018d0 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800183a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800183e:	f7ff ff6b 	bl	8001718 <FLASH_WaitForLastOperation>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001846:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <HAL_FLASHEx_Erase+0xd0>)
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	4a20      	ldr	r2, [pc, #128]	@ (80018cc <HAL_FLASHEx_Erase+0xd0>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6113      	str	r3, [r2, #16]
 8001852:	e031      	b.n	80018b8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001854:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001858:	f7ff ff5e 	bl	8001718 <FLASH_WaitForLastOperation>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d12a      	bne.n	80018b8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001868:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	e019      	b.n	80018a6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f000 f846 	bl	8001904 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001878:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800187c:	f7ff ff4c 	bl	8001718 <FLASH_WaitForLastOperation>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_FLASHEx_Erase+0xd0>)
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	4a10      	ldr	r2, [pc, #64]	@ (80018cc <HAL_FLASHEx_Erase+0xd0>)
 800188a:	f023 0302 	bic.w	r3, r3, #2
 800188e:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	601a      	str	r2, [r3, #0]
            break;
 800189c:	e00c      	b.n	80018b8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018a4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	02da      	lsls	r2, r3, #11
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d3dc      	bcc.n	8001872 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_FLASHEx_Erase+0xcc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	761a      	strb	r2, [r3, #24]

  return status;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000f18 	.word	0x20000f18
 80018cc:	40022000 	.word	0x40022000

080018d0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <FLASH_MassErase+0x2c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <FLASH_MassErase+0x30>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	4a08      	ldr	r2, [pc, #32]	@ (8001900 <FLASH_MassErase+0x30>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <FLASH_MassErase+0x30>)
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <FLASH_MassErase+0x30>)
 80018ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f0:	6113      	str	r3, [r2, #16]
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20000f18 	.word	0x20000f18
 8001900:	40022000 	.word	0x40022000

08001904 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <FLASH_PageErase+0x38>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <FLASH_PageErase+0x3c>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <FLASH_PageErase+0x3c>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800191e:	4a08      	ldr	r2, [pc, #32]	@ (8001940 <FLASH_PageErase+0x3c>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <FLASH_PageErase+0x3c>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <FLASH_PageErase+0x3c>)
 800192a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800192e:	6113      	str	r3, [r2, #16]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	20000f18 	.word	0x20000f18
 8001940:	40022000 	.word	0x40022000

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	e154      	b.n	8001bfe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8146 	beq.w	8001bf8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d005      	beq.n	8001984 <HAL_GPIO_Init+0x40>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d130      	bne.n	80019e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ba:	2201      	movs	r2, #1
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	f003 0201 	and.w	r2, r3, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d017      	beq.n	8001a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d123      	bne.n	8001a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	6939      	ldr	r1, [r7, #16]
 8001a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0203 	and.w	r2, r3, #3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 80a0 	beq.w	8001bf8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	4b58      	ldr	r3, [pc, #352]	@ (8001c1c <HAL_GPIO_Init+0x2d8>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a57      	ldr	r2, [pc, #348]	@ (8001c1c <HAL_GPIO_Init+0x2d8>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b55      	ldr	r3, [pc, #340]	@ (8001c1c <HAL_GPIO_Init+0x2d8>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad0:	4a53      	ldr	r2, [pc, #332]	@ (8001c20 <HAL_GPIO_Init+0x2dc>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001afa:	d019      	beq.n	8001b30 <HAL_GPIO_Init+0x1ec>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a49      	ldr	r2, [pc, #292]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d013      	beq.n	8001b2c <HAL_GPIO_Init+0x1e8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a48      	ldr	r2, [pc, #288]	@ (8001c28 <HAL_GPIO_Init+0x2e4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1e4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a47      	ldr	r2, [pc, #284]	@ (8001c2c <HAL_GPIO_Init+0x2e8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1e0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a46      	ldr	r2, [pc, #280]	@ (8001c30 <HAL_GPIO_Init+0x2ec>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1dc>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e008      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e004      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b30:	2300      	movs	r3, #0
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b42:	4937      	ldr	r1, [pc, #220]	@ (8001c20 <HAL_GPIO_Init+0x2dc>)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b50:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <HAL_GPIO_Init+0x2f0>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b74:	4a2f      	ldr	r2, [pc, #188]	@ (8001c34 <HAL_GPIO_Init+0x2f0>)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c34 <HAL_GPIO_Init+0x2f0>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b9e:	4a25      	ldr	r2, [pc, #148]	@ (8001c34 <HAL_GPIO_Init+0x2f0>)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba4:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <HAL_GPIO_Init+0x2f0>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c34 <HAL_GPIO_Init+0x2f0>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bce:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_GPIO_Init+0x2f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bf2:	4a10      	ldr	r2, [pc, #64]	@ (8001c34 <HAL_GPIO_Init+0x2f0>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f47f aea3 	bne.w	8001954 <HAL_GPIO_Init+0x10>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	48000400 	.word	0x48000400
 8001c28:	48000800 	.word	0x48000800
 8001c2c:	48000c00 	.word	0x48000c00
 8001c30:	48001000 	.word	0x48001000
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
 8001c44:	4613      	mov	r3, r2
 8001c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e08d      	b.n	8001d96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff f8da 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	@ 0x24
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e006      	b.n	8001cf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d108      	bne.n	8001d0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	e007      	b.n	8001d1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69d9      	ldr	r1, [r3, #28]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1a      	ldr	r2, [r3, #32]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d138      	bne.n	8001e26 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e032      	b.n	8001e28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2224      	movs	r2, #36	@ 0x24
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001df0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e26:	2302      	movs	r3, #2
  }
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d139      	bne.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e033      	b.n	8001ec0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	@ 0x24
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
  }
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0b9      	b.n	8002052 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f006 fd1c 	bl	8008930 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2203      	movs	r2, #3
 8001efc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f003 f8e3 	bl	80050d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	e03e      	b.n	8001f8e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3311      	adds	r3, #17
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	3310      	adds	r3, #16
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	3313      	adds	r3, #19
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3324      	adds	r3, #36	@ 0x24
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	791b      	ldrb	r3, [r3, #4]
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3bb      	bcc.n	8001f10 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e044      	b.n	8002028 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	3301      	adds	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	791b      	ldrb	r3, [r3, #4]
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	429a      	cmp	r2, r3
 8002030:	d3b5      	bcc.n	8001f9e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3304      	adds	r3, #4
 800203a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800203e:	f003 f862 	bl	8005106 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_PCD_Start+0x16>
 800206c:	2302      	movs	r3, #2
 800206e:	e016      	b.n	800209e <HAL_PCD_Start+0x44>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f003 f810 	bl	80050a2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002082:	2101      	movs	r1, #1
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f006 fec0 	bl	8008e0a <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f005 f8e1 	bl	8007256 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f005 f8da 	bl	800726c <USB_ReadInterrupts>
 80020b8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fa69 	bl	800259c <PCD_EP_ISR_Handler>

    return;
 80020ca:	e0bd      	b.n	8002248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d013      	beq.n	80020fe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020e8:	b292      	uxth	r2, r2
 80020ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f006 fcc7 	bl	8008a82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020f4:	2100      	movs	r1, #0
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8a9 	bl	800224e <HAL_PCD_SetAddress>

    return;
 80020fc:	e0a4      	b.n	8002248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00c      	beq.n	8002122 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800211a:	b292      	uxth	r2, r2
 800211c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002120:	e092      	b.n	8002248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00c      	beq.n	8002146 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800213e:	b292      	uxth	r2, r2
 8002140:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002144:	e080      	b.n	8002248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d027      	beq.n	80021a0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	b292      	uxth	r2, r2
 8002164:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002170:	b29a      	uxth	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0208 	bic.w	r2, r2, #8
 800217a:	b292      	uxth	r2, r2
 800217c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f006 fcb7 	bl	8008af4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002198:	b292      	uxth	r2, r2
 800219a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800219e:	e053      	b.n	8002248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d027      	beq.n	80021fa <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0208 	orr.w	r2, r2, #8
 80021bc:	b292      	uxth	r2, r2
 80021be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d4:	b292      	uxth	r2, r2
 80021d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0204 	orr.w	r2, r2, #4
 80021ec:	b292      	uxth	r2, r2
 80021ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f006 fc64 	bl	8008ac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021f8:	e026      	b.n	8002248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00f      	beq.n	8002224 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800220c:	b29a      	uxth	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002216:	b292      	uxth	r2, r2
 8002218:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f006 fc22 	bl	8008a66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002222:	e011      	b.n	8002248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00c      	beq.n	8002248 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002236:	b29a      	uxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002240:	b292      	uxth	r2, r2
 8002242:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002246:	bf00      	nop
  }
}
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_PCD_SetAddress+0x1a>
 8002264:	2302      	movs	r3, #2
 8002266:	e012      	b.n	800228e <HAL_PCD_SetAddress+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f004 ffd5 	bl	800722e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	4608      	mov	r0, r1
 80022a0:	4611      	mov	r1, r2
 80022a2:	461a      	mov	r2, r3
 80022a4:	4603      	mov	r3, r0
 80022a6:	70fb      	strb	r3, [r7, #3]
 80022a8:	460b      	mov	r3, r1
 80022aa:	803b      	strh	r3, [r7, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da0e      	bge.n	80022da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 0207 	and.w	r2, r3, #7
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	3310      	adds	r3, #16
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	705a      	strb	r2, [r3, #1]
 80022d8:	e00e      	b.n	80022f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 0207 	and.w	r2, r3, #7
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002304:	883a      	ldrh	r2, [r7, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	78ba      	ldrb	r2, [r7, #2]
 800230e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002310:	78bb      	ldrb	r3, [r7, #2]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d102      	bne.n	800231c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_PCD_EP_Open+0x94>
 8002326:	2302      	movs	r3, #2
 8002328:	e00e      	b.n	8002348 <HAL_PCD_EP_Open+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	4618      	mov	r0, r3
 800233a:	f002 ff03 	bl	8005144 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002346:	7afb      	ldrb	r3, [r7, #11]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	460b      	mov	r3, r1
 800235e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002360:	7afb      	ldrb	r3, [r7, #11]
 8002362:	f003 0207 	and.w	r2, r3, #7
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2200      	movs	r2, #0
 800238e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	b2da      	uxtb	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6979      	ldr	r1, [r7, #20]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fa92 	bl	80058cc <USB_EPStartXfer>

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f003 0207 	and.w	r2, r3, #7
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80023d4:	681b      	ldr	r3, [r3, #0]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	460b      	mov	r3, r1
 80023f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f2:	7afb      	ldrb	r3, [r7, #11]
 80023f4:	f003 0207 	and.w	r2, r3, #7
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	3310      	adds	r3, #16
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4413      	add	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2200      	movs	r2, #0
 8002426:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2201      	movs	r2, #1
 800242c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800242e:	7afb      	ldrb	r3, [r7, #11]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	b2da      	uxtb	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6979      	ldr	r1, [r7, #20]
 8002440:	4618      	mov	r0, r3
 8002442:	f003 fa43 	bl	80058cc <USB_EPStartXfer>

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	7912      	ldrb	r2, [r2, #4]
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e03e      	b.n	80024ec <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800246e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002472:	2b00      	cmp	r3, #0
 8002474:	da0e      	bge.n	8002494 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0207 	and.w	r2, r3, #7
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	3310      	adds	r3, #16
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	705a      	strb	r2, [r3, #1]
 8002492:	e00c      	b.n	80024ae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_PCD_EP_SetStall+0x7e>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e00e      	b.n	80024ec <HAL_PCD_EP_SetStall+0x9c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68f9      	ldr	r1, [r7, #12]
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 fda7 	bl	8007030 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	7912      	ldrb	r2, [r2, #4]
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e040      	b.n	8002594 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002516:	2b00      	cmp	r3, #0
 8002518:	da0e      	bge.n	8002538 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f003 0207 	and.w	r2, r3, #7
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	3310      	adds	r3, #16
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	705a      	strb	r2, [r3, #1]
 8002536:	e00e      	b.n	8002556 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 0207 	and.w	r2, r3, #7
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_PCD_EP_ClrStall+0x82>
 8002572:	2302      	movs	r3, #2
 8002574:	e00e      	b.n	8002594 <HAL_PCD_EP_ClrStall+0xa0>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68f9      	ldr	r1, [r7, #12]
 8002584:	4618      	mov	r0, r3
 8002586:	f004 fda4 	bl	80070d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b096      	sub	sp, #88	@ 0x58
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025a4:	e3bb      	b.n	8002d1e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80025c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 8175 	bne.w	80028b4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d14e      	bne.n	8002674 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80025e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025e6:	81fb      	strh	r3, [r7, #14]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	89fb      	ldrh	r3, [r7, #14]
 80025ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3310      	adds	r3, #16
 80025fe:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	3302      	adds	r3, #2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800262c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	441a      	add	r2, r3
 8002636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002638:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800263a:	2100      	movs	r1, #0
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f006 f9f8 	bl	8008a32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7b1b      	ldrb	r3, [r3, #12]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8368 	beq.w	8002d1e <PCD_EP_ISR_Handler+0x782>
 800264e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 8363 	bne.w	8002d1e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7b1b      	ldrb	r3, [r3, #12]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002662:	b2da      	uxtb	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	731a      	strb	r2, [r3, #12]
 8002672:	e354      	b.n	8002d1e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800267a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002686:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800268a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800268e:	2b00      	cmp	r3, #0
 8002690:	d034      	beq.n	80026fc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	3306      	adds	r3, #6
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80026c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f004 fe21 	bl	8007318 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80026e2:	4013      	ands	r3, r2
 80026e4:	823b      	strh	r3, [r7, #16]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	8a3a      	ldrh	r2, [r7, #16]
 80026ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026f0:	b292      	uxth	r2, r2
 80026f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f006 f96f 	bl	80089d8 <HAL_PCD_SetupStageCallback>
 80026fa:	e310      	b.n	8002d1e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002700:	2b00      	cmp	r3, #0
 8002702:	f280 830c 	bge.w	8002d1e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b29a      	uxth	r2, r3
 800270e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002712:	4013      	ands	r3, r2
 8002714:	83fb      	strh	r3, [r7, #30]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	8bfa      	ldrh	r2, [r7, #30]
 800271c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002720:	b292      	uxth	r2, r2
 8002722:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800272c:	b29b      	uxth	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	3306      	adds	r3, #6
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800274c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d019      	beq.n	800278c <PCD_EP_ISR_Handler+0x1f0>
 8002758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002766:	6959      	ldr	r1, [r3, #20]
 8002768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800276c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002770:	b29b      	uxth	r3, r3
 8002772:	f004 fdd1 	bl	8007318 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	441a      	add	r2, r3
 8002780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002782:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002784:	2100      	movs	r1, #0
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f006 f938 	bl	80089fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002796:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800279a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f040 82bd 	bne.w	8002d1e <PCD_EP_ISR_Handler+0x782>
 80027a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80027a8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80027ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027b0:	f000 82b5 	beq.w	8002d1e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4413      	add	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027de:	b29a      	uxth	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <PCD_EP_ISR_Handler+0x266>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	801a      	strh	r2, [r3, #0]
 8002800:	e039      	b.n	8002876 <PCD_EP_ISR_Handler+0x2da>
 8002802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b3e      	cmp	r3, #62	@ 0x3e
 8002808:	d818      	bhi.n	800283c <PCD_EP_ISR_Handler+0x2a0>
 800280a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	647b      	str	r3, [r7, #68]	@ 0x44
 8002812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <PCD_EP_ISR_Handler+0x288>
 800281e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002820:	3301      	adds	r3, #1
 8002822:	647b      	str	r3, [r7, #68]	@ 0x44
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29a      	uxth	r2, r3
 800282a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800282c:	b29b      	uxth	r3, r3
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	b29b      	uxth	r3, r3
 8002832:	4313      	orrs	r3, r2
 8002834:	b29a      	uxth	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	e01c      	b.n	8002876 <PCD_EP_ISR_Handler+0x2da>
 800283c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	647b      	str	r3, [r7, #68]	@ 0x44
 8002844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <PCD_EP_ISR_Handler+0x2ba>
 8002850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002852:	3b01      	subs	r3, #1
 8002854:	647b      	str	r3, [r7, #68]	@ 0x44
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29a      	uxth	r2, r3
 800285c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800285e:	b29b      	uxth	r3, r3
 8002860:	029b      	lsls	r3, r3, #10
 8002862:	b29b      	uxth	r3, r3
 8002864:	4313      	orrs	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800286c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002870:	b29a      	uxth	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002886:	827b      	strh	r3, [r7, #18]
 8002888:	8a7b      	ldrh	r3, [r7, #18]
 800288a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800288e:	827b      	strh	r3, [r7, #18]
 8002890:	8a7b      	ldrh	r3, [r7, #18]
 8002892:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002896:	827b      	strh	r3, [r7, #18]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	8a7b      	ldrh	r3, [r7, #18]
 800289e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	8013      	strh	r3, [r2, #0]
 80028b2:	e234      	b.n	8002d1e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028c8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f280 80fc 	bge.w	8002aca <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80028e8:	4013      	ands	r3, r2
 80028ea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002900:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002904:	b292      	uxth	r2, r2
 8002906:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002908:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800291e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002920:	7b1b      	ldrb	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d125      	bne.n	8002972 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800292e:	b29b      	uxth	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	3306      	adds	r3, #6
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002952:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8092 	beq.w	8002a80 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002962:	6959      	ldr	r1, [r3, #20]
 8002964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002966:	88da      	ldrh	r2, [r3, #6]
 8002968:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800296c:	f004 fcd4 	bl	8007318 <USB_ReadPMA>
 8002970:	e086      	b.n	8002a80 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d10a      	bne.n	8002990 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800297a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800297e:	461a      	mov	r2, r3
 8002980:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f9d9 	bl	8002d3a <HAL_PCD_EP_DB_Receive>
 8002988:	4603      	mov	r3, r0
 800298a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800298e:	e077      	b.n	8002a80 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029aa:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	441a      	add	r2, r3
 80029bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80029c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d024      	beq.n	8002a38 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	3302      	adds	r3, #2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a16:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d02e      	beq.n	8002a80 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a28:	6959      	ldr	r1, [r3, #20]
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2c:	891a      	ldrh	r2, [r3, #8]
 8002a2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a32:	f004 fc71 	bl	8007318 <USB_ReadPMA>
 8002a36:	e023      	b.n	8002a80 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3306      	adds	r3, #6
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a60:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a72:	6959      	ldr	r1, [r3, #20]
 8002a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a76:	895a      	ldrh	r2, [r3, #10]
 8002a78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a7c:	f004 fc4c 	bl	8007318 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a88:	441a      	add	r2, r3
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a96:	441a      	add	r2, r3
 8002a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <PCD_EP_ISR_Handler+0x514>
 8002aa4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d206      	bcs.n	8002abe <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f005 ffa0 	bl	80089fc <HAL_PCD_DataOutStageCallback>
 8002abc:	e005      	b.n	8002aca <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f002 ff01 	bl	80058cc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002aca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8123 	beq.w	8002d1e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ad8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	3310      	adds	r3, #16
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	441a      	add	r2, r3
 8002b18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2a:	78db      	ldrb	r3, [r3, #3]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	f040 80a2 	bne.w	8002c76 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3a:	7b1b      	ldrb	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8093 	beq.w	8002c68 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d046      	beq.n	8002bdc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d126      	bne.n	8002ba4 <PCD_EP_ISR_Handler+0x608>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	4413      	add	r3, r2
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	011a      	lsls	r2, r3, #4
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	4413      	add	r3, r2
 8002b78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b7c:	623b      	str	r3, [r7, #32]
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	801a      	strh	r2, [r3, #0]
 8002ba2:	e061      	b.n	8002c68 <PCD_EP_ISR_Handler+0x6cc>
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d15d      	bne.n	8002c68 <PCD_EP_ISR_Handler+0x6cc>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc0:	4413      	add	r3, r2
 8002bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	011a      	lsls	r2, r3, #4
 8002bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bcc:	4413      	add	r3, r2
 8002bce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	801a      	strh	r2, [r3, #0]
 8002bda:	e045      	b.n	8002c68 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d126      	bne.n	8002c38 <PCD_EP_ISR_Handler+0x69c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfe:	4413      	add	r3, r2
 8002c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	011a      	lsls	r2, r3, #4
 8002c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c20:	801a      	strh	r2, [r3, #0]
 8002c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	e017      	b.n	8002c68 <PCD_EP_ISR_Handler+0x6cc>
 8002c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3a:	785b      	ldrb	r3, [r3, #1]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d113      	bne.n	8002c68 <PCD_EP_ISR_Handler+0x6cc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4e:	4413      	add	r3, r2
 8002c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	011a      	lsls	r2, r3, #4
 8002c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c64:	2200      	movs	r2, #0
 8002c66:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f005 fedf 	bl	8008a32 <HAL_PCD_DataInStageCallback>
 8002c74:	e053      	b.n	8002d1e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d146      	bne.n	8002d10 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	3302      	adds	r3, #2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002caa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d907      	bls.n	8002cca <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cc2:	1ad2      	subs	r2, r2, r3
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc6:	619a      	str	r2, [r3, #24]
 8002cc8:	e002      	b.n	8002cd0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d106      	bne.n	8002ce6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f005 fea7 	bl	8008a32 <HAL_PCD_DataInStageCallback>
 8002ce4:	e01b      	b.n	8002d1e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cee:	441a      	add	r2, r3
 8002cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cfc:	441a      	add	r2, r3
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d00:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 fddf 	bl	80058cc <USB_EPStartXfer>
 8002d0e:	e006      	b.n	8002d1e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002d14:	461a      	mov	r2, r3
 8002d16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f91b 	bl	8002f54 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	b21b      	sxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f6ff ac3b 	blt.w	80025a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3758      	adds	r7, #88	@ 0x58
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b088      	sub	sp, #32
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	4613      	mov	r3, r2
 8002d46:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d07e      	beq.n	8002e50 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	3302      	adds	r3, #2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	8b7b      	ldrh	r3, [r7, #26]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d306      	bcc.n	8002d94 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	8b7b      	ldrh	r3, [r7, #26]
 8002d8c:	1ad2      	subs	r2, r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	619a      	str	r2, [r3, #24]
 8002d92:	e002      	b.n	8002d9a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2200      	movs	r2, #0
 8002d98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d123      	bne.n	8002dea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dbc:	833b      	strh	r3, [r7, #24]
 8002dbe:	8b3b      	ldrh	r3, [r7, #24]
 8002dc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002dc4:	833b      	strh	r3, [r7, #24]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	441a      	add	r2, r3
 8002dd4:	8b3b      	ldrh	r3, [r7, #24]
 8002dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01f      	beq.n	8002e34 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e0e:	82fb      	strh	r3, [r7, #22]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	8afb      	ldrh	r3, [r7, #22]
 8002e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e34:	8b7b      	ldrh	r3, [r7, #26]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8087 	beq.w	8002f4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6959      	ldr	r1, [r3, #20]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	891a      	ldrh	r2, [r3, #8]
 8002e48:	8b7b      	ldrh	r3, [r7, #26]
 8002e4a:	f004 fa65 	bl	8007318 <USB_ReadPMA>
 8002e4e:	e07c      	b.n	8002f4a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	3306      	adds	r3, #6
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	8b7b      	ldrh	r3, [r7, #26]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d306      	bcc.n	8002e92 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	8b7b      	ldrh	r3, [r7, #26]
 8002e8a:	1ad2      	subs	r2, r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	619a      	str	r2, [r3, #24]
 8002e90:	e002      	b.n	8002e98 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d123      	bne.n	8002ee8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eba:	83fb      	strh	r3, [r7, #30]
 8002ebc:	8bfb      	ldrh	r3, [r7, #30]
 8002ebe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ec2:	83fb      	strh	r3, [r7, #30]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	8bfb      	ldrh	r3, [r7, #30]
 8002ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11f      	bne.n	8002f32 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f0c:	83bb      	strh	r3, [r7, #28]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	441a      	add	r2, r3
 8002f1c:	8bbb      	ldrh	r3, [r7, #28]
 8002f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f32:	8b7b      	ldrh	r3, [r7, #26]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6959      	ldr	r1, [r3, #20]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	895a      	ldrh	r2, [r3, #10]
 8002f44:	8b7b      	ldrh	r3, [r7, #26]
 8002f46:	f004 f9e7 	bl	8007318 <USB_ReadPMA>
    }
  }

  return count;
 8002f4a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b0a4      	sub	sp, #144	@ 0x90
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 81dd 	beq.w	8003328 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	3302      	adds	r3, #2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f96:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d907      	bls.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002fae:	1ad2      	subs	r2, r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	619a      	str	r2, [r3, #24]
 8002fb4:	e002      	b.n	8002fbc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 80b9 	bne.w	8003138 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d126      	bne.n	800301c <HAL_PCD_EP_DB_Transmit+0xc8>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe2:	4413      	add	r3, r2
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	011a      	lsls	r2, r3, #4
 8002fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fee:	4413      	add	r3, r2
 8002ff0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003000:	b29a      	uxth	r2, r3
 8003002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003014:	b29a      	uxth	r2, r3
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	e01a      	b.n	8003052 <HAL_PCD_EP_DB_Transmit+0xfe>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d116      	bne.n	8003052 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	637b      	str	r3, [r7, #52]	@ 0x34
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003038:	4413      	add	r3, r2
 800303a:	637b      	str	r3, [r7, #52]	@ 0x34
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	011a      	lsls	r2, r3, #4
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	4413      	add	r3, r2
 8003046:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30
 800304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304e:	2200      	movs	r2, #0
 8003050:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	785b      	ldrb	r3, [r3, #1]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d126      	bne.n	80030ae <HAL_PCD_EP_DB_Transmit+0x15a>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800306e:	b29b      	uxth	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	011a      	lsls	r2, r3, #4
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003092:	b29a      	uxth	r2, r3
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	801a      	strh	r2, [r3, #0]
 80030ac:	e017      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x18a>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d113      	bne.n	80030de <HAL_PCD_EP_DB_Transmit+0x18a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030be:	b29b      	uxth	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	4413      	add	r3, r2
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	011a      	lsls	r2, r3, #4
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	4413      	add	r3, r2
 80030d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030d6:	623b      	str	r3, [r7, #32]
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	2200      	movs	r2, #0
 80030dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	4619      	mov	r1, r3
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f005 fca4 	bl	8008a32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 82fc 	beq.w	80036ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800310c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003110:	82fb      	strh	r3, [r7, #22]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	441a      	add	r2, r3
 8003120:	8afb      	ldrh	r3, [r7, #22]
 8003122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800312a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800312e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003132:	b29b      	uxth	r3, r3
 8003134:	8013      	strh	r3, [r2, #0]
 8003136:	e2da      	b.n	80036ee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d021      	beq.n	8003186 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	441a      	add	r2, r3
 800316e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800317a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800317e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003182:	b29b      	uxth	r3, r3
 8003184:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800318c:	2b01      	cmp	r3, #1
 800318e:	f040 82ae 	bne.w	80036ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800319a:	441a      	add	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80031a8:	441a      	add	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d30b      	bcc.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ca:	1ad2      	subs	r2, r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	621a      	str	r2, [r3, #32]
 80031d0:	e017      	b.n	8003202 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80031da:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80031de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80031ea:	e00a      	b.n	8003202 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2200      	movs	r2, #0
 8003200:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d165      	bne.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x382>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003218:	b29b      	uxth	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321e:	4413      	add	r3, r2
 8003220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	011a      	lsls	r2, r3, #4
 8003228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800322a:	4413      	add	r3, r2
 800322c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003230:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800323c:	b29a      	uxth	r2, r3
 800323e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <HAL_PCD_EP_DB_Transmit+0x30c>
 800324a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	b29b      	uxth	r3, r3
 8003250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003258:	b29a      	uxth	r2, r3
 800325a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	e057      	b.n	8003310 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003260:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003264:	2b3e      	cmp	r3, #62	@ 0x3e
 8003266:	d818      	bhi.n	800329a <HAL_PCD_EP_DB_Transmit+0x346>
 8003268:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_PCD_EP_DB_Transmit+0x32e>
 800327c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800327e:	3301      	adds	r3, #1
 8003280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29a      	uxth	r2, r3
 8003288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800328a:	b29b      	uxth	r3, r3
 800328c:	029b      	lsls	r3, r3, #10
 800328e:	b29b      	uxth	r3, r3
 8003290:	4313      	orrs	r3, r2
 8003292:	b29a      	uxth	r2, r3
 8003294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003296:	801a      	strh	r2, [r3, #0]
 8003298:	e03a      	b.n	8003310 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800329a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <HAL_PCD_EP_DB_Transmit+0x360>
 80032ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032b0:	3b01      	subs	r3, #1
 80032b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032bc:	b29b      	uxth	r3, r3
 80032be:	029b      	lsls	r3, r3, #10
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d2:	801a      	strh	r2, [r3, #0]
 80032d4:	e01c      	b.n	8003310 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	785b      	ldrb	r3, [r3, #1]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d118      	bne.n	8003310 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f2:	4413      	add	r3, r2
 80032f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	011a      	lsls	r2, r3, #4
 80032fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032fe:	4413      	add	r3, r2
 8003300:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003304:	643b      	str	r3, [r7, #64]	@ 0x40
 8003306:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800330a:	b29a      	uxth	r2, r3
 800330c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800330e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	6959      	ldr	r1, [r3, #20]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	891a      	ldrh	r2, [r3, #8]
 800331c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003320:	b29b      	uxth	r3, r3
 8003322:	f003 ffb3 	bl	800728c <USB_WritePMA>
 8003326:	e1e2      	b.n	80036ee <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003330:	b29b      	uxth	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	3306      	adds	r3, #6
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003350:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800335c:	429a      	cmp	r2, r3
 800335e:	d307      	bcc.n	8003370 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003368:	1ad2      	subs	r2, r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	619a      	str	r2, [r3, #24]
 800336e:	e002      	b.n	8003376 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2200      	movs	r2, #0
 8003374:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 80c0 	bne.w	8003500 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	785b      	ldrb	r3, [r3, #1]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d126      	bne.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x482>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003396:	b29b      	uxth	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800339c:	4413      	add	r3, r2
 800339e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	011a      	lsls	r2, r3, #4
 80033a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033a8:	4413      	add	r3, r2
 80033aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e01a      	b.n	800340c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	785b      	ldrb	r3, [r3, #1]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d116      	bne.n	800340c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033f2:	4413      	add	r3, r2
 80033f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	011a      	lsls	r2, r3, #4
 80033fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033fe:	4413      	add	r3, r2
 8003400:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003404:	663b      	str	r3, [r7, #96]	@ 0x60
 8003406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003408:	2200      	movs	r2, #0
 800340a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	677b      	str	r3, [r7, #116]	@ 0x74
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d12b      	bne.n	8003472 <HAL_PCD_EP_DB_Transmit+0x51e>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003428:	b29b      	uxth	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800342e:	4413      	add	r3, r2
 8003430:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	011a      	lsls	r2, r3, #4
 8003438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800343a:	4413      	add	r3, r2
 800343c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003450:	b29a      	uxth	r2, r3
 8003452:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003456:	801a      	strh	r2, [r3, #0]
 8003458:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003468:	b29a      	uxth	r2, r3
 800346a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	e017      	b.n	80034a2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d113      	bne.n	80034a2 <HAL_PCD_EP_DB_Transmit+0x54e>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003482:	b29b      	uxth	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003488:	4413      	add	r3, r2
 800348a:	677b      	str	r3, [r7, #116]	@ 0x74
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	011a      	lsls	r2, r3, #4
 8003492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003494:	4413      	add	r3, r2
 8003496:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800349a:	673b      	str	r3, [r7, #112]	@ 0x70
 800349c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800349e:	2200      	movs	r2, #0
 80034a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f005 fac2 	bl	8008a32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 811a 	bne.w	80036ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	441a      	add	r2, r3
 80034e6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80034ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8013      	strh	r3, [r2, #0]
 80034fe:	e0f6      	b.n	80036ee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d121      	bne.n	800354e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003524:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	441a      	add	r2, r3
 8003536:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800353a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800353e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003542:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800354a:	b29b      	uxth	r3, r3
 800354c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003554:	2b01      	cmp	r3, #1
 8003556:	f040 80ca 	bne.w	80036ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003562:	441a      	add	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003570:	441a      	add	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6a1a      	ldr	r2, [r3, #32]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	429a      	cmp	r2, r3
 8003580:	d30b      	bcc.n	800359a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	6a1a      	ldr	r2, [r3, #32]
 800358e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003592:	1ad2      	subs	r2, r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	621a      	str	r2, [r3, #32]
 8003598:	e017      	b.n	80035ca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80035a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80035a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035b2:	e00a      	b.n	80035ca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2200      	movs	r2, #0
 80035c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d165      	bne.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x750>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ec:	4413      	add	r3, r2
 80035ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	011a      	lsls	r2, r3, #4
 80035f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035f8:	4413      	add	r3, r2
 80035fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003600:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800360a:	b29a      	uxth	r2, r3
 800360c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <HAL_PCD_EP_DB_Transmit+0x6da>
 8003618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003626:	b29a      	uxth	r2, r3
 8003628:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800362a:	801a      	strh	r2, [r3, #0]
 800362c:	e054      	b.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x784>
 800362e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003632:	2b3e      	cmp	r3, #62	@ 0x3e
 8003634:	d818      	bhi.n	8003668 <HAL_PCD_EP_DB_Transmit+0x714>
 8003636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800363e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800364a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800364c:	3301      	adds	r3, #1
 800364e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29a      	uxth	r2, r3
 8003656:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003658:	b29b      	uxth	r3, r3
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	b29b      	uxth	r3, r3
 800365e:	4313      	orrs	r3, r2
 8003660:	b29a      	uxth	r2, r3
 8003662:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	e037      	b.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003668:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003670:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <HAL_PCD_EP_DB_Transmit+0x72e>
 800367c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800367e:	3b01      	subs	r3, #1
 8003680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29a      	uxth	r2, r3
 8003688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800368a:	b29b      	uxth	r3, r3
 800368c:	029b      	lsls	r3, r3, #10
 800368e:	b29b      	uxth	r3, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369c:	b29a      	uxth	r2, r3
 800369e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036a0:	801a      	strh	r2, [r3, #0]
 80036a2:	e019      	b.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x784>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d115      	bne.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x784>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ba:	4413      	add	r3, r2
 80036bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	011a      	lsls	r2, r3, #4
 80036c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c6:	4413      	add	r3, r2
 80036c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80036ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6959      	ldr	r1, [r3, #20]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	895a      	ldrh	r2, [r3, #10]
 80036e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f003 fdcf 	bl	800728c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003708:	82bb      	strh	r3, [r7, #20]
 800370a:	8abb      	ldrh	r3, [r7, #20]
 800370c:	f083 0310 	eor.w	r3, r3, #16
 8003710:	82bb      	strh	r3, [r7, #20]
 8003712:	8abb      	ldrh	r3, [r7, #20]
 8003714:	f083 0320 	eor.w	r3, r3, #32
 8003718:	82bb      	strh	r3, [r7, #20]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	441a      	add	r2, r3
 8003728:	8abb      	ldrh	r3, [r7, #20]
 800372a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800372e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800373a:	b29b      	uxth	r3, r3
 800373c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3790      	adds	r7, #144	@ 0x90
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	817b      	strh	r3, [r7, #10]
 8003756:	4613      	mov	r3, r2
 8003758:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800375a:	897b      	ldrh	r3, [r7, #10]
 800375c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003766:	897b      	ldrh	r3, [r7, #10]
 8003768:	f003 0207 	and.w	r2, r3, #7
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	3310      	adds	r3, #16
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e009      	b.n	8003792 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800377e:	897a      	ldrh	r2, [r7, #10]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003792:	893b      	ldrh	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d107      	bne.n	80037a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	80da      	strh	r2, [r3, #6]
 80037a6:	e00b      	b.n	80037c0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2201      	movs	r2, #1
 80037ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f001 b823 	b.w	800483c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 817d 	beq.w	8003b06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800380c:	4bbc      	ldr	r3, [pc, #752]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b04      	cmp	r3, #4
 8003816:	d00c      	beq.n	8003832 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003818:	4bb9      	ldr	r3, [pc, #740]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b08      	cmp	r3, #8
 8003822:	d15c      	bne.n	80038de <HAL_RCC_OscConfig+0x10e>
 8003824:	4bb6      	ldr	r3, [pc, #728]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003830:	d155      	bne.n	80038de <HAL_RCC_OscConfig+0x10e>
 8003832:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003836:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003846:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d102      	bne.n	8003864 <HAL_RCC_OscConfig+0x94>
 800385e:	4ba8      	ldr	r3, [pc, #672]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	e015      	b.n	8003890 <HAL_RCC_OscConfig+0xc0>
 8003864:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003868:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800387c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003880:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800388c:	4b9c      	ldr	r3, [pc, #624]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003894:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003898:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800389c:	fa92 f2a2 	rbit	r2, r2
 80038a0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80038a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80038a8:	fab2 f282 	clz	r2, r2
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	f042 0220 	orr.w	r2, r2, #32
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f002 021f 	and.w	r2, r2, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 811f 	beq.w	8003b04 <HAL_RCC_OscConfig+0x334>
 80038c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 8116 	bne.w	8003b04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f000 bfaf 	b.w	800483c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_OscConfig+0x12e>
 80038f0:	4b83      	ldr	r3, [pc, #524]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a82      	ldr	r2, [pc, #520]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 80038f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	e036      	b.n	800396c <HAL_RCC_OscConfig+0x19c>
 80038fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003902:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x158>
 800390e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7b      	ldr	r2, [pc, #492]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b79      	ldr	r3, [pc, #484]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a78      	ldr	r2, [pc, #480]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e021      	b.n	800396c <HAL_RCC_OscConfig+0x19c>
 8003928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x184>
 800393a:	4b71      	ldr	r3, [pc, #452]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a70      	ldr	r2, [pc, #448]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b6e      	ldr	r3, [pc, #440]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6d      	ldr	r2, [pc, #436]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0x19c>
 8003954:	4b6a      	ldr	r3, [pc, #424]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a69      	ldr	r2, [pc, #420]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b67      	ldr	r3, [pc, #412]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a66      	ldr	r2, [pc, #408]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800396a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800396c:	4b64      	ldr	r3, [pc, #400]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	f023 020f 	bic.w	r2, r3, #15
 8003974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003978:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	495f      	ldr	r1, [pc, #380]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003982:	4313      	orrs	r3, r2
 8003984:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d059      	beq.n	8003a4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7fd fcdf 	bl	8001358 <HAL_GetTick>
 800399a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fd fcda 	bl	8001358 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	@ 0x64
 80039ae:	d902      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	f000 bf43 	b.w	800483c <HAL_RCC_OscConfig+0x106c>
 80039b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039ba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80039ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_RCC_OscConfig+0x218>
 80039e2:	4b47      	ldr	r3, [pc, #284]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	e015      	b.n	8003a14 <HAL_RCC_OscConfig+0x244>
 80039e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039ec:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80039fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a00:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003a04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003a10:	4b3b      	ldr	r3, [pc, #236]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a18:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003a1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a20:	fa92 f2a2 	rbit	r2, r2
 8003a24:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003a28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003a2c:	fab2 f282 	clz	r2, r2
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	f042 0220 	orr.w	r2, r2, #32
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	f002 021f 	and.w	r2, r2, #31
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ab      	beq.n	80039a0 <HAL_RCC_OscConfig+0x1d0>
 8003a48:	e05d      	b.n	8003b06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fd fc85 	bl	8001358 <HAL_GetTick>
 8003a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd fc80 	bl	8001358 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b64      	cmp	r3, #100	@ 0x64
 8003a62:	d902      	bls.n	8003a6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	f000 bee9 	b.w	800483c <HAL_RCC_OscConfig+0x106c>
 8003a6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a6e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003a7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d102      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2cc>
 8003a96:	4b1a      	ldr	r3, [pc, #104]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	e015      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2f8>
 8003a9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003aa0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003ab0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ab4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ab8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b00 <HAL_RCC_OscConfig+0x330>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003acc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003ad0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003ad4:	fa92 f2a2 	rbit	r2, r2
 8003ad8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003adc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003ae0:	fab2 f282 	clz	r2, r2
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	f042 0220 	orr.w	r2, r2, #32
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	f002 021f 	and.w	r2, r2, #31
 8003af0:	2101      	movs	r1, #1
 8003af2:	fa01 f202 	lsl.w	r2, r1, r2
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ab      	bne.n	8003a54 <HAL_RCC_OscConfig+0x284>
 8003afc:	e003      	b.n	8003b06 <HAL_RCC_OscConfig+0x336>
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 817d 	beq.w	8003e16 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b1c:	4ba6      	ldr	r3, [pc, #664]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b28:	4ba3      	ldr	r3, [pc, #652]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 030c 	and.w	r3, r3, #12
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d172      	bne.n	8003c1a <HAL_RCC_OscConfig+0x44a>
 8003b34:	4ba0      	ldr	r3, [pc, #640]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d16c      	bne.n	8003c1a <HAL_RCC_OscConfig+0x44a>
 8003b40:	2302      	movs	r3, #2
 8003b42:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003b52:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d102      	bne.n	8003b70 <HAL_RCC_OscConfig+0x3a0>
 8003b6a:	4b93      	ldr	r3, [pc, #588]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	e013      	b.n	8003b98 <HAL_RCC_OscConfig+0x3c8>
 8003b70:	2302      	movs	r3, #2
 8003b72:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003b82:	2302      	movs	r3, #2
 8003b84:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003b88:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003b94:	4b88      	ldr	r3, [pc, #544]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003b9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003ba2:	fa92 f2a2 	rbit	r2, r2
 8003ba6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003baa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003bae:	fab2 f282 	clz	r2, r2
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	f042 0220 	orr.w	r2, r2, #32
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	f002 021f 	and.w	r2, r2, #31
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCC_OscConfig+0x410>
 8003bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d002      	beq.n	8003be0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f000 be2e 	b.w	800483c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b75      	ldr	r3, [pc, #468]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	21f8      	movs	r1, #248	@ 0xf8
 8003bf6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003bfe:	fa91 f1a1 	rbit	r1, r1
 8003c02:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003c06:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003c0a:	fab1 f181 	clz	r1, r1
 8003c0e:	b2c9      	uxtb	r1, r1
 8003c10:	408b      	lsls	r3, r1
 8003c12:	4969      	ldr	r1, [pc, #420]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c18:	e0fd      	b.n	8003e16 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 8088 	beq.w	8003d3c <HAL_RCC_OscConfig+0x56c>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003c3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	461a      	mov	r2, r3
 8003c54:	2301      	movs	r3, #1
 8003c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fd fb7e 	bl	8001358 <HAL_GetTick>
 8003c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c62:	f7fd fb79 	bl	8001358 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d902      	bls.n	8003c78 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	f000 bde2 	b.w	800483c <HAL_RCC_OscConfig+0x106c>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003c8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d102      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4d8>
 8003ca2:	4b45      	ldr	r3, [pc, #276]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	e013      	b.n	8003cd0 <HAL_RCC_OscConfig+0x500>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003cba:	2302      	movs	r3, #2
 8003cbc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003cc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003cd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003cda:	fa92 f2a2 	rbit	r2, r2
 8003cde:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003ce2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003ce6:	fab2 f282 	clz	r2, r2
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	f042 0220 	orr.w	r2, r2, #32
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	f002 021f 	and.w	r2, r2, #31
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0af      	beq.n	8003c62 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	4b2d      	ldr	r3, [pc, #180]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	21f8      	movs	r1, #248	@ 0xf8
 8003d18:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003d20:	fa91 f1a1 	rbit	r1, r1
 8003d24:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003d28:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003d2c:	fab1 f181 	clz	r1, r1
 8003d30:	b2c9      	uxtb	r1, r1
 8003d32:	408b      	lsls	r3, r1
 8003d34:	4920      	ldr	r1, [pc, #128]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
 8003d3a:	e06c      	b.n	8003e16 <HAL_RCC_OscConfig+0x646>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	461a      	mov	r2, r3
 8003d64:	2300      	movs	r3, #0
 8003d66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd faf6 	bl	8001358 <HAL_GetTick>
 8003d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fd faf1 	bl	8001358 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	f000 bd5a 	b.w	800483c <HAL_RCC_OscConfig+0x106c>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d104      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5ec>
 8003db2:	4b01      	ldr	r3, [pc, #4]	@ (8003db8 <HAL_RCC_OscConfig+0x5e8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	e015      	b.n	8003de4 <HAL_RCC_OscConfig+0x614>
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003dce:	2302      	movs	r3, #2
 8003dd0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003de0:	4bc8      	ldr	r3, [pc, #800]	@ (8004104 <HAL_RCC_OscConfig+0x934>)
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	2202      	movs	r2, #2
 8003de6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003dea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003dee:	fa92 f2a2 	rbit	r2, r2
 8003df2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003df6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003dfa:	fab2 f282 	clz	r2, r2
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	f042 0220 	orr.w	r2, r2, #32
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f002 021f 	and.w	r2, r2, #31
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ad      	bne.n	8003d72 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8110 	beq.w	800404c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d079      	beq.n	8003f30 <HAL_RCC_OscConfig+0x760>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4bab      	ldr	r3, [pc, #684]	@ (8004108 <HAL_RCC_OscConfig+0x938>)
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	461a      	mov	r2, r3
 8003e62:	2301      	movs	r3, #1
 8003e64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7fd fa77 	bl	8001358 <HAL_GetTick>
 8003e6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e70:	f7fd fa72 	bl	8001358 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d902      	bls.n	8003e86 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	f000 bcdb 	b.w	800483c <HAL_RCC_OscConfig+0x106c>
 8003e86:	2302      	movs	r3, #2
 8003e88:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fa93 f2a3 	rbit	r2, r3
 8003eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	fa93 f2a3 	rbit	r2, r3
 8003ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003ede:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee0:	4b88      	ldr	r3, [pc, #544]	@ (8004104 <HAL_RCC_OscConfig+0x934>)
 8003ee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003eec:	2102      	movs	r1, #2
 8003eee:	6019      	str	r1, [r3, #0]
 8003ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	fa93 f1a3 	rbit	r1, r3
 8003efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003f06:	6019      	str	r1, [r3, #0]
  return result;
 8003f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2101      	movs	r1, #1
 8003f24:	fa01 f303 	lsl.w	r3, r1, r3
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0a0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x6a0>
 8003f2e:	e08d      	b.n	800404c <HAL_RCC_OscConfig+0x87c>
 8003f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f34:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f52:	601a      	str	r2, [r3, #0]
  return result;
 8003f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b68      	ldr	r3, [pc, #416]	@ (8004108 <HAL_RCC_OscConfig+0x938>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f72:	f7fd f9f1 	bl	8001358 <HAL_GetTick>
 8003f76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fd f9ec 	bl	8001358 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d902      	bls.n	8003f92 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	f000 bc55 	b.w	800483c <HAL_RCC_OscConfig+0x106c>
 8003f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	fa93 f2a3 	rbit	r2, r3
 8003fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	fa93 f2a3 	rbit	r2, r3
 8003fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fde:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	fa93 f2a3 	rbit	r2, r3
 8003ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003ffc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffe:	4b41      	ldr	r3, [pc, #260]	@ (8004104 <HAL_RCC_OscConfig+0x934>)
 8004000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004006:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800400a:	2102      	movs	r1, #2
 800400c:	6019      	str	r1, [r3, #0]
 800400e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004012:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	fa93 f1a3 	rbit	r1, r3
 800401c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004020:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004024:	6019      	str	r1, [r3, #0]
  return result;
 8004026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d197      	bne.n	8003f7c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004050:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 81a1 	beq.w	80043a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004068:	4b26      	ldr	r3, [pc, #152]	@ (8004104 <HAL_RCC_OscConfig+0x934>)
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d116      	bne.n	80040a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	4b23      	ldr	r3, [pc, #140]	@ (8004104 <HAL_RCC_OscConfig+0x934>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	4a22      	ldr	r2, [pc, #136]	@ (8004104 <HAL_RCC_OscConfig+0x934>)
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800407e:	61d3      	str	r3, [r2, #28]
 8004080:	4b20      	ldr	r3, [pc, #128]	@ (8004104 <HAL_RCC_OscConfig+0x934>)
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004096:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800409a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <HAL_RCC_OscConfig+0x93c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11a      	bne.n	80040e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ae:	4b17      	ldr	r3, [pc, #92]	@ (800410c <HAL_RCC_OscConfig+0x93c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a16      	ldr	r2, [pc, #88]	@ (800410c <HAL_RCC_OscConfig+0x93c>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ba:	f7fd f94d 	bl	8001358 <HAL_GetTick>
 80040be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c2:	e009      	b.n	80040d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c4:	f7fd f948 	bl	8001358 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b64      	cmp	r3, #100	@ 0x64
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e3b1      	b.n	800483c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <HAL_RCC_OscConfig+0x93c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ef      	beq.n	80040c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10d      	bne.n	8004110 <HAL_RCC_OscConfig+0x940>
 80040f4:	4b03      	ldr	r3, [pc, #12]	@ (8004104 <HAL_RCC_OscConfig+0x934>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4a02      	ldr	r2, [pc, #8]	@ (8004104 <HAL_RCC_OscConfig+0x934>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6213      	str	r3, [r2, #32]
 8004100:	e03c      	b.n	800417c <HAL_RCC_OscConfig+0x9ac>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	10908120 	.word	0x10908120
 800410c:	40007000 	.word	0x40007000
 8004110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10c      	bne.n	800413a <HAL_RCC_OscConfig+0x96a>
 8004120:	4bc1      	ldr	r3, [pc, #772]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	4ac0      	ldr	r2, [pc, #768]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	6213      	str	r3, [r2, #32]
 800412c:	4bbe      	ldr	r3, [pc, #760]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4abd      	ldr	r2, [pc, #756]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004132:	f023 0304 	bic.w	r3, r3, #4
 8004136:	6213      	str	r3, [r2, #32]
 8004138:	e020      	b.n	800417c <HAL_RCC_OscConfig+0x9ac>
 800413a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b05      	cmp	r3, #5
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x994>
 800414a:	4bb7      	ldr	r3, [pc, #732]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4ab6      	ldr	r2, [pc, #728]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004150:	f043 0304 	orr.w	r3, r3, #4
 8004154:	6213      	str	r3, [r2, #32]
 8004156:	4bb4      	ldr	r3, [pc, #720]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4ab3      	ldr	r2, [pc, #716]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	6213      	str	r3, [r2, #32]
 8004162:	e00b      	b.n	800417c <HAL_RCC_OscConfig+0x9ac>
 8004164:	4bb0      	ldr	r3, [pc, #704]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4aaf      	ldr	r2, [pc, #700]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6213      	str	r3, [r2, #32]
 8004170:	4bad      	ldr	r3, [pc, #692]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4aac      	ldr	r2, [pc, #688]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004176:	f023 0304 	bic.w	r3, r3, #4
 800417a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800417c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004180:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8081 	beq.w	8004290 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7fd f8e3 	bl	8001358 <HAL_GetTick>
 8004192:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fd f8de 	bl	8001358 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e345      	b.n	800483c <HAL_RCC_OscConfig+0x106c>
 80041b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80041b8:	2202      	movs	r2, #2
 80041ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	fa93 f2a3 	rbit	r2, r3
 80041ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041dc:	2202      	movs	r2, #2
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	fa93 f2a3 	rbit	r2, r3
 80041ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041f6:	601a      	str	r2, [r3, #0]
  return result;
 80041f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004200:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f043 0302 	orr.w	r3, r3, #2
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d102      	bne.n	800421c <HAL_RCC_OscConfig+0xa4c>
 8004216:	4b84      	ldr	r3, [pc, #528]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	e013      	b.n	8004244 <HAL_RCC_OscConfig+0xa74>
 800421c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004220:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004224:	2202      	movs	r2, #2
 8004226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	fa93 f2a3 	rbit	r2, r3
 8004236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	4b79      	ldr	r3, [pc, #484]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004248:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800424c:	2102      	movs	r1, #2
 800424e:	6011      	str	r1, [r2, #0]
 8004250:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004254:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	fa92 f1a2 	rbit	r1, r2
 800425e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004262:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004266:	6011      	str	r1, [r2, #0]
  return result;
 8004268:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800426c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	fab2 f282 	clz	r2, r2
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	f002 021f 	and.w	r2, r2, #31
 8004282:	2101      	movs	r1, #1
 8004284:	fa01 f202 	lsl.w	r2, r1, r2
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d084      	beq.n	8004198 <HAL_RCC_OscConfig+0x9c8>
 800428e:	e07f      	b.n	8004390 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004290:	f7fd f862 	bl	8001358 <HAL_GetTick>
 8004294:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004298:	e00b      	b.n	80042b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fd f85d 	bl	8001358 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e2c4      	b.n	800483c <HAL_RCC_OscConfig+0x106c>
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80042ba:	2202      	movs	r2, #2
 80042bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	fa93 f2a3 	rbit	r2, r3
 80042cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80042de:	2202      	movs	r2, #2
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	fa93 f2a3 	rbit	r2, r3
 80042f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042f8:	601a      	str	r2, [r3, #0]
  return result;
 80042fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004302:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d102      	bne.n	800431e <HAL_RCC_OscConfig+0xb4e>
 8004318:	4b43      	ldr	r3, [pc, #268]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	e013      	b.n	8004346 <HAL_RCC_OscConfig+0xb76>
 800431e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004322:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004326:	2202      	movs	r2, #2
 8004328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	fa93 f2a3 	rbit	r2, r3
 8004338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	4b39      	ldr	r3, [pc, #228]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800434a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800434e:	2102      	movs	r1, #2
 8004350:	6011      	str	r1, [r2, #0]
 8004352:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004356:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	fa92 f1a2 	rbit	r1, r2
 8004360:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004364:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004368:	6011      	str	r1, [r2, #0]
  return result;
 800436a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800436e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	fab2 f282 	clz	r2, r2
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	f002 021f 	and.w	r2, r2, #31
 8004384:	2101      	movs	r1, #1
 8004386:	fa01 f202 	lsl.w	r2, r1, r2
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d184      	bne.n	800429a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004390:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004394:	2b01      	cmp	r3, #1
 8004396:	d105      	bne.n	80043a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004398:	4b23      	ldr	r3, [pc, #140]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	4a22      	ldr	r2, [pc, #136]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 800439e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8242 	beq.w	800483a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004428 <HAL_RCC_OscConfig+0xc58>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b08      	cmp	r3, #8
 80043c0:	f000 8213 	beq.w	80047ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	f040 8162 	bne.w	800469a <HAL_RCC_OscConfig+0xeca>
 80043d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043da:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80043de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	fa93 f2a3 	rbit	r2, r3
 80043f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043fa:	601a      	str	r2, [r3, #0]
  return result;
 80043fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004400:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004404:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004410:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	461a      	mov	r2, r3
 8004418:	2300      	movs	r3, #0
 800441a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fc ff9c 	bl	8001358 <HAL_GetTick>
 8004420:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004424:	e00c      	b.n	8004440 <HAL_RCC_OscConfig+0xc70>
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442c:	f7fc ff94 	bl	8001358 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e1fd      	b.n	800483c <HAL_RCC_OscConfig+0x106c>
 8004440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004444:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004448:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800444c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004452:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	fa93 f2a3 	rbit	r2, r3
 800445c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004460:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004464:	601a      	str	r2, [r3, #0]
  return result;
 8004466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800446e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	b2db      	uxtb	r3, r3
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d102      	bne.n	800448a <HAL_RCC_OscConfig+0xcba>
 8004484:	4bb0      	ldr	r3, [pc, #704]	@ (8004748 <HAL_RCC_OscConfig+0xf78>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	e027      	b.n	80044da <HAL_RCC_OscConfig+0xd0a>
 800448a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800448e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004492:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800449c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fa93 f2a3 	rbit	r2, r3
 80044a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80044b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	fa93 f2a3 	rbit	r2, r3
 80044cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004748 <HAL_RCC_OscConfig+0xf78>)
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044de:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80044e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80044e6:	6011      	str	r1, [r2, #0]
 80044e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044ec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	fa92 f1a2 	rbit	r1, r2
 80044f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044fe:	6011      	str	r1, [r2, #0]
  return result;
 8004500:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004504:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	fab2 f282 	clz	r2, r2
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	f042 0220 	orr.w	r2, r2, #32
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	f002 021f 	and.w	r2, r2, #31
 800451a:	2101      	movs	r1, #1
 800451c:	fa01 f202 	lsl.w	r2, r1, r2
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d182      	bne.n	800442c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004526:	4b88      	ldr	r3, [pc, #544]	@ (8004748 <HAL_RCC_OscConfig+0xf78>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800452e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004532:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800453a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800453e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	430b      	orrs	r3, r1
 8004548:	497f      	ldr	r1, [pc, #508]	@ (8004748 <HAL_RCC_OscConfig+0xf78>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
 800454e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004552:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004556:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800455a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004560:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	fa93 f2a3 	rbit	r2, r3
 800456a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004572:	601a      	str	r2, [r3, #0]
  return result;
 8004574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004578:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800457c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004588:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	461a      	mov	r2, r3
 8004590:	2301      	movs	r3, #1
 8004592:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fc fee0 	bl	8001358 <HAL_GetTick>
 8004598:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800459c:	e009      	b.n	80045b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459e:	f7fc fedb 	bl	8001358 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e144      	b.n	800483c <HAL_RCC_OscConfig+0x106c>
 80045b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80045ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	fa93 f2a3 	rbit	r2, r3
 80045ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80045d6:	601a      	str	r2, [r3, #0]
  return result;
 80045d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045dc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80045e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045e2:	fab3 f383 	clz	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d102      	bne.n	80045fc <HAL_RCC_OscConfig+0xe2c>
 80045f6:	4b54      	ldr	r3, [pc, #336]	@ (8004748 <HAL_RCC_OscConfig+0xf78>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	e027      	b.n	800464c <HAL_RCC_OscConfig+0xe7c>
 80045fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004600:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004604:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	fa93 f2a3 	rbit	r2, r3
 8004618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004626:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800462a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004634:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004642:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	4b3f      	ldr	r3, [pc, #252]	@ (8004748 <HAL_RCC_OscConfig+0xf78>)
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004650:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004654:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004658:	6011      	str	r1, [r2, #0]
 800465a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800465e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	fa92 f1a2 	rbit	r1, r2
 8004668:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800466c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004670:	6011      	str	r1, [r2, #0]
  return result;
 8004672:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004676:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	fab2 f282 	clz	r2, r2
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	f042 0220 	orr.w	r2, r2, #32
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	f002 021f 	and.w	r2, r2, #31
 800468c:	2101      	movs	r1, #1
 800468e:	fa01 f202 	lsl.w	r2, r1, r2
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d082      	beq.n	800459e <HAL_RCC_OscConfig+0xdce>
 8004698:	e0cf      	b.n	800483a <HAL_RCC_OscConfig+0x106a>
 800469a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80046a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	fa93 f2a3 	rbit	r2, r3
 80046b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80046be:	601a      	str	r2, [r3, #0]
  return result;
 80046c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80046c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ca:	fab3 f383 	clz	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	461a      	mov	r2, r3
 80046dc:	2300      	movs	r3, #0
 80046de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fc fe3a 	bl	8001358 <HAL_GetTick>
 80046e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e8:	e009      	b.n	80046fe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fc fe35 	bl	8001358 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e09e      	b.n	800483c <HAL_RCC_OscConfig+0x106c>
 80046fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004702:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004706:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800470a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004710:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	fa93 f2a3 	rbit	r2, r3
 800471a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004722:	601a      	str	r2, [r3, #0]
  return result;
 8004724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004728:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800472c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	d104      	bne.n	800474c <HAL_RCC_OscConfig+0xf7c>
 8004742:	4b01      	ldr	r3, [pc, #4]	@ (8004748 <HAL_RCC_OscConfig+0xf78>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	e029      	b.n	800479c <HAL_RCC_OscConfig+0xfcc>
 8004748:	40021000 	.word	0x40021000
 800474c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004750:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004754:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	fa93 f2a3 	rbit	r2, r3
 8004768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800476c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004776:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800477a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004784:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	fa93 f2a3 	rbit	r2, r3
 800478e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004792:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	4b2b      	ldr	r3, [pc, #172]	@ (8004848 <HAL_RCC_OscConfig+0x1078>)
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047a0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80047a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80047a8:	6011      	str	r1, [r2, #0]
 80047aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047ae:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	fa92 f1a2 	rbit	r1, r2
 80047b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047bc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80047c0:	6011      	str	r1, [r2, #0]
  return result;
 80047c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047c6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	fab2 f282 	clz	r2, r2
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	f042 0220 	orr.w	r2, r2, #32
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	f002 021f 	and.w	r2, r2, #31
 80047dc:	2101      	movs	r1, #1
 80047de:	fa01 f202 	lsl.w	r2, r1, r2
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d180      	bne.n	80046ea <HAL_RCC_OscConfig+0xf1a>
 80047e8:	e027      	b.n	800483a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e01e      	b.n	800483c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047fe:	4b12      	ldr	r3, [pc, #72]	@ (8004848 <HAL_RCC_OscConfig+0x1078>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004806:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800480a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800480e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	429a      	cmp	r2, r3
 800481c:	d10b      	bne.n	8004836 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800481e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004822:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004832:	429a      	cmp	r2, r3
 8004834:	d001      	beq.n	800483a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000

0800484c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b09e      	sub	sp, #120	@ 0x78
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e162      	b.n	8004b2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b90      	ldr	r3, [pc, #576]	@ (8004aa8 <HAL_RCC_ClockConfig+0x25c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d910      	bls.n	8004894 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b8d      	ldr	r3, [pc, #564]	@ (8004aa8 <HAL_RCC_ClockConfig+0x25c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 0207 	bic.w	r2, r3, #7
 800487a:	498b      	ldr	r1, [pc, #556]	@ (8004aa8 <HAL_RCC_ClockConfig+0x25c>)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b89      	ldr	r3, [pc, #548]	@ (8004aa8 <HAL_RCC_ClockConfig+0x25c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e14a      	b.n	8004b2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a0:	4b82      	ldr	r3, [pc, #520]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	497f      	ldr	r1, [pc, #508]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80dc 	beq.w	8004a78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d13c      	bne.n	8004942 <HAL_RCC_ClockConfig+0xf6>
 80048c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048cc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80048d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d8:	fab3 f383 	clz	r3, r3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d102      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xa6>
 80048ec:	4b6f      	ldr	r3, [pc, #444]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	e00f      	b.n	8004912 <HAL_RCC_ClockConfig+0xc6>
 80048f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004900:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004904:	663b      	str	r3, [r7, #96]	@ 0x60
 8004906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800490e:	4b67      	ldr	r3, [pc, #412]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 8004910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004912:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004916:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004918:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800491a:	fa92 f2a2 	rbit	r2, r2
 800491e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004920:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004922:	fab2 f282 	clz	r2, r2
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	f042 0220 	orr.w	r2, r2, #32
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	f002 021f 	and.w	r2, r2, #31
 8004932:	2101      	movs	r1, #1
 8004934:	fa01 f202 	lsl.w	r2, r1, r2
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d17b      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0f3      	b.n	8004b2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d13c      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x178>
 800494a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800494e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d102      	bne.n	8004974 <HAL_RCC_ClockConfig+0x128>
 800496e:	4b4f      	ldr	r3, [pc, #316]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	e00f      	b.n	8004994 <HAL_RCC_ClockConfig+0x148>
 8004974:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004978:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	647b      	str	r3, [r7, #68]	@ 0x44
 8004982:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004986:	643b      	str	r3, [r7, #64]	@ 0x40
 8004988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800498a:	fa93 f3a3 	rbit	r3, r3
 800498e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004990:	4b46      	ldr	r3, [pc, #280]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004998:	63ba      	str	r2, [r7, #56]	@ 0x38
 800499a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800499c:	fa92 f2a2 	rbit	r2, r2
 80049a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80049a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049a4:	fab2 f282 	clz	r2, r2
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	f042 0220 	orr.w	r2, r2, #32
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	f002 021f 	and.w	r2, r2, #31
 80049b4:	2101      	movs	r1, #1
 80049b6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d13a      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0b2      	b.n	8004b2a <HAL_RCC_ClockConfig+0x2de>
 80049c4:	2302      	movs	r3, #2
 80049c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	fa93 f3a3 	rbit	r3, r3
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80049d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d2:	fab3 f383 	clz	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d102      	bne.n	80049ec <HAL_RCC_ClockConfig+0x1a0>
 80049e6:	4b31      	ldr	r3, [pc, #196]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	e00d      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1bc>
 80049ec:	2302      	movs	r3, #2
 80049ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	fa93 f3a3 	rbit	r3, r3
 80049f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f8:	2302      	movs	r3, #2
 80049fa:	623b      	str	r3, [r7, #32]
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	fa93 f3a3 	rbit	r3, r3
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	4b29      	ldr	r3, [pc, #164]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	2202      	movs	r2, #2
 8004a0a:	61ba      	str	r2, [r7, #24]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	fa92 f2a2 	rbit	r2, r2
 8004a12:	617a      	str	r2, [r7, #20]
  return result;
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	fab2 f282 	clz	r2, r2
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	f042 0220 	orr.w	r2, r2, #32
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	f002 021f 	and.w	r2, r2, #31
 8004a26:	2101      	movs	r1, #1
 8004a28:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e079      	b.n	8004b2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	4b1d      	ldr	r3, [pc, #116]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f023 0203 	bic.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	491a      	ldr	r1, [pc, #104]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a48:	f7fc fc86 	bl	8001358 <HAL_GetTick>
 8004a4c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7fc fc82 	bl	8001358 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e061      	b.n	8004b2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	4b11      	ldr	r3, [pc, #68]	@ (8004aac <HAL_RCC_ClockConfig+0x260>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f003 020c 	and.w	r2, r3, #12
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d1eb      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a78:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa8 <HAL_RCC_ClockConfig+0x25c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d214      	bcs.n	8004ab0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b08      	ldr	r3, [pc, #32]	@ (8004aa8 <HAL_RCC_ClockConfig+0x25c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 0207 	bic.w	r2, r3, #7
 8004a8e:	4906      	ldr	r1, [pc, #24]	@ (8004aa8 <HAL_RCC_ClockConfig+0x25c>)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	4b04      	ldr	r3, [pc, #16]	@ (8004aa8 <HAL_RCC_ClockConfig+0x25c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e040      	b.n	8004b2a <HAL_RCC_ClockConfig+0x2de>
 8004aa8:	40022000 	.word	0x40022000
 8004aac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004abc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <HAL_RCC_ClockConfig+0x2e8>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	491a      	ldr	r1, [pc, #104]	@ (8004b34 <HAL_RCC_ClockConfig+0x2e8>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ada:	4b16      	ldr	r3, [pc, #88]	@ (8004b34 <HAL_RCC_ClockConfig+0x2e8>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4912      	ldr	r1, [pc, #72]	@ (8004b34 <HAL_RCC_ClockConfig+0x2e8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004aee:	f000 f829 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8004af2:	4601      	mov	r1, r0
 8004af4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b34 <HAL_RCC_ClockConfig+0x2e8>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004afc:	22f0      	movs	r2, #240	@ 0xf0
 8004afe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	fa92 f2a2 	rbit	r2, r2
 8004b06:	60fa      	str	r2, [r7, #12]
  return result;
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	fab2 f282 	clz	r2, r2
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	40d3      	lsrs	r3, r2
 8004b12:	4a09      	ldr	r2, [pc, #36]	@ (8004b38 <HAL_RCC_ClockConfig+0x2ec>)
 8004b14:	5cd3      	ldrb	r3, [r2, r3]
 8004b16:	fa21 f303 	lsr.w	r3, r1, r3
 8004b1a:	4a08      	ldr	r2, [pc, #32]	@ (8004b3c <HAL_RCC_ClockConfig+0x2f0>)
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b1e:	4b08      	ldr	r3, [pc, #32]	@ (8004b40 <HAL_RCC_ClockConfig+0x2f4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fc fbd4 	bl	80012d0 <HAL_InitTick>
  
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3778      	adds	r7, #120	@ 0x78
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	0800a418 	.word	0x0800a418
 8004b3c:	20000c78 	.word	0x20000c78
 8004b40:	20000c7c 	.word	0x20000c7c

08004b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d002      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x30>
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d003      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0x36>
 8004b72:	e026      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b74:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b76:	613b      	str	r3, [r7, #16]
      break;
 8004b78:	e026      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	0c9b      	lsrs	r3, r3, #18
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	4a17      	ldr	r2, [pc, #92]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
 8004b86:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b88:	4b13      	ldr	r3, [pc, #76]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	4a14      	ldr	r2, [pc, #80]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b92:	5cd3      	ldrb	r3, [r2, r3]
 8004b94:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ba0:	4a0e      	ldr	r2, [pc, #56]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e004      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]
      break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bc2:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8004bc4:	613b      	str	r3, [r7, #16]
      break;
 8004bc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc8:	693b      	ldr	r3, [r7, #16]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	007a1200 	.word	0x007a1200
 8004be0:	0800a428 	.word	0x0800a428
 8004be4:	0800a438 	.word	0x0800a438
 8004be8:	003d0900 	.word	0x003d0900

08004bec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b092      	sub	sp, #72	@ 0x48
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80d4 	beq.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c10:	4b4e      	ldr	r3, [pc, #312]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10e      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4a4a      	ldr	r2, [pc, #296]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c26:	61d3      	str	r3, [r2, #28]
 8004c28:	4b48      	ldr	r3, [pc, #288]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3a:	4b45      	ldr	r3, [pc, #276]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d118      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c46:	4b42      	ldr	r3, [pc, #264]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a41      	ldr	r2, [pc, #260]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c52:	f7fc fb81 	bl	8001358 <HAL_GetTick>
 8004c56:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	e008      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5a:	f7fc fb7d 	bl	8001358 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b64      	cmp	r3, #100	@ 0x64
 8004c66:	d901      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e169      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	4b38      	ldr	r3, [pc, #224]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c78:	4b34      	ldr	r3, [pc, #208]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8084 	beq.w	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d07c      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c98:	4b2c      	ldr	r3, [pc, #176]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ca2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b26      	ldr	r3, [pc, #152]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004cca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cce:	fa93 f3a3 	rbit	r3, r3
 8004cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4b1d      	ldr	r3, [pc, #116]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cea:	4a18      	ldr	r2, [pc, #96]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d04b      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fc fb2d 	bl	8001358 <HAL_GetTick>
 8004cfe:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d00:	e00a      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fc fb29 	bl	8001358 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e113      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d24:	2302      	movs	r3, #2
 8004d26:	623b      	str	r3, [r7, #32]
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	fa93 f3a3 	rbit	r3, r3
 8004d2e:	61fb      	str	r3, [r7, #28]
  return result;
 8004d30:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	fab3 f383 	clz	r3, r3
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f043 0302 	orr.w	r3, r3, #2
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d108      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d46:	4b01      	ldr	r3, [pc, #4]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	e00d      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
 8004d54:	10908100 	.word	0x10908100
 8004d58:	2302      	movs	r3, #2
 8004d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	fa93 f3a3 	rbit	r3, r3
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	4b78      	ldr	r3, [pc, #480]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	2202      	movs	r2, #2
 8004d6a:	613a      	str	r2, [r7, #16]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	fa92 f2a2 	rbit	r2, r2
 8004d72:	60fa      	str	r2, [r7, #12]
  return result;
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	fab2 f282 	clz	r2, r2
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	f002 021f 	and.w	r2, r2, #31
 8004d86:	2101      	movs	r1, #1
 8004d88:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0b7      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d92:	4b6d      	ldr	r3, [pc, #436]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	496a      	ldr	r1, [pc, #424]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004da4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d105      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dac:	4b66      	ldr	r3, [pc, #408]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	4a65      	ldr	r2, [pc, #404]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dc4:	4b60      	ldr	r3, [pc, #384]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc8:	f023 0203 	bic.w	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	495d      	ldr	r1, [pc, #372]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004de2:	4b59      	ldr	r3, [pc, #356]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	4956      	ldr	r1, [pc, #344]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e00:	4b51      	ldr	r3, [pc, #324]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	494e      	ldr	r1, [pc, #312]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	f023 0210 	bic.w	r2, r3, #16
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	4947      	ldr	r1, [pc, #284]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e3c:	4b42      	ldr	r3, [pc, #264]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	493f      	ldr	r1, [pc, #252]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d008      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	f023 0220 	bic.w	r2, r3, #32
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	4938      	ldr	r1, [pc, #224]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e78:	4b33      	ldr	r3, [pc, #204]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	4930      	ldr	r1, [pc, #192]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e96:	4b2c      	ldr	r3, [pc, #176]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	4929      	ldr	r1, [pc, #164]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eb4:	4b24      	ldr	r3, [pc, #144]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	4921      	ldr	r1, [pc, #132]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	491a      	ldr	r1, [pc, #104]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ef0:	4b15      	ldr	r3, [pc, #84]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	4912      	ldr	r1, [pc, #72]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	490b      	ldr	r1, [pc, #44]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004f2c:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f38:	4903      	ldr	r1, [pc, #12]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3748      	adds	r7, #72	@ 0x48
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000

08004f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e09d      	b.n	800509a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f6e:	d009      	beq.n	8004f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	61da      	str	r2, [r3, #28]
 8004f76:	e005      	b.n	8004f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fb ff96 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fc4:	d902      	bls.n	8004fcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e002      	b.n	8004fd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004fda:	d007      	beq.n	8004fec <HAL_SPI_Init+0xa0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fe4:	d002      	beq.n	8004fec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502e:	ea42 0103 	orr.w	r1, r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	f003 0204 	and.w	r2, r3, #4
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005068:	ea42 0103 	orr.w	r1, r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005088:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050b2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80050b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050d8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80050dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	4013      	ands	r3, r2
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005144:	b480      	push	{r7}
 8005146:	b09d      	sub	sp, #116	@ 0x74
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	78db      	ldrb	r3, [r3, #3]
 8005172:	2b03      	cmp	r3, #3
 8005174:	d81f      	bhi.n	80051b6 <USB_ActivateEndpoint+0x72>
 8005176:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <USB_ActivateEndpoint+0x38>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	0800518d 	.word	0x0800518d
 8005180:	080051a9 	.word	0x080051a9
 8005184:	080051bf 	.word	0x080051bf
 8005188:	0800519b 	.word	0x0800519b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800518c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005190:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005194:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005198:	e012      	b.n	80051c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800519a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800519e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80051a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80051a6:	e00b      	b.n	80051c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80051ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80051b4:	e004      	b.n	80051c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80051bc:	e000      	b.n	80051c0 <USB_ActivateEndpoint+0x7c>
      break;
 80051be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	441a      	add	r2, r3
 80051ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80051ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051de:	b29b      	uxth	r3, r3
 80051e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	b21b      	sxth	r3, r3
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	b21a      	sxth	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b21b      	sxth	r3, r3
 8005202:	4313      	orrs	r3, r2
 8005204:	b21b      	sxth	r3, r3
 8005206:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	441a      	add	r2, r3
 8005214:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800521c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	7b1b      	ldrb	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f040 8178 	bne.w	8005526 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8084 	beq.w	8005348 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	4413      	add	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	011a      	lsls	r2, r3, #4
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	88db      	ldrh	r3, [r3, #6]
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	827b      	strh	r3, [r7, #18]
 8005282:	8a7b      	ldrh	r3, [r7, #18]
 8005284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <USB_ActivateEndpoint+0x180>
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800529e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a2:	823b      	strh	r3, [r7, #16]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	8a3b      	ldrh	r3, [r7, #16]
 80052b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	78db      	ldrb	r3, [r3, #3]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d020      	beq.n	800530e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e2:	81bb      	strh	r3, [r7, #12]
 80052e4:	89bb      	ldrh	r3, [r7, #12]
 80052e6:	f083 0320 	eor.w	r3, r3, #32
 80052ea:	81bb      	strh	r3, [r7, #12]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	89bb      	ldrh	r3, [r7, #12]
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]
 800530c:	e2d5      	b.n	80058ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005324:	81fb      	strh	r3, [r7, #14]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	89fb      	ldrh	r3, [r7, #14]
 8005332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800533a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800533e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005342:	b29b      	uxth	r3, r3
 8005344:	8013      	strh	r3, [r2, #0]
 8005346:	e2b8      	b.n	80058ba <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	633b      	str	r3, [r7, #48]	@ 0x30
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005352:	b29b      	uxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	4413      	add	r3, r2
 800535a:	633b      	str	r3, [r7, #48]	@ 0x30
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	011a      	lsls	r2, r3, #4
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	4413      	add	r3, r2
 8005366:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800536a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	88db      	ldrh	r3, [r3, #6]
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	b29b      	uxth	r3, r3
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005386:	b29b      	uxth	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	4413      	add	r3, r2
 800538e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	011a      	lsls	r2, r3, #4
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	4413      	add	r3, r2
 800539a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10a      	bne.n	80053ce <USB_ActivateEndpoint+0x28a>
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	801a      	strh	r2, [r3, #0]
 80053cc:	e039      	b.n	8005442 <USB_ActivateEndpoint+0x2fe>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80053d4:	d818      	bhi.n	8005408 <USB_ActivateEndpoint+0x2c4>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <USB_ActivateEndpoint+0x2ac>
 80053ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053ec:	3301      	adds	r3, #1
 80053ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	029b      	lsls	r3, r3, #10
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	4313      	orrs	r3, r2
 8005400:	b29a      	uxth	r2, r3
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	e01c      	b.n	8005442 <USB_ActivateEndpoint+0x2fe>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <USB_ActivateEndpoint+0x2de>
 800541c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800541e:	3b01      	subs	r3, #1
 8005420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29a      	uxth	r2, r3
 8005428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800542a:	b29b      	uxth	r3, r3
 800542c:	029b      	lsls	r3, r3, #10
 800542e:	b29b      	uxth	r3, r3
 8005430:	4313      	orrs	r3, r2
 8005432:	b29b      	uxth	r3, r3
 8005434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543c:	b29a      	uxth	r2, r3
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005450:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01b      	beq.n	8005492 <USB_ActivateEndpoint+0x34e>
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800546c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005470:	843b      	strh	r3, [r7, #32]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	441a      	add	r2, r3
 800547c:	8c3b      	ldrh	r3, [r7, #32]
 800547e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005486:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800548a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d124      	bne.n	80054e4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b0:	83bb      	strh	r3, [r7, #28]
 80054b2:	8bbb      	ldrh	r3, [r7, #28]
 80054b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80054b8:	83bb      	strh	r3, [r7, #28]
 80054ba:	8bbb      	ldrh	r3, [r7, #28]
 80054bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80054c0:	83bb      	strh	r3, [r7, #28]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	441a      	add	r2, r3
 80054cc:	8bbb      	ldrh	r3, [r7, #28]
 80054ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054de:	b29b      	uxth	r3, r3
 80054e0:	8013      	strh	r3, [r2, #0]
 80054e2:	e1ea      	b.n	80058ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fa:	83fb      	strh	r3, [r7, #30]
 80054fc:	8bfb      	ldrh	r3, [r7, #30]
 80054fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005502:	83fb      	strh	r3, [r7, #30]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	8bfb      	ldrh	r3, [r7, #30]
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800551c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]
 8005524:	e1c9      	b.n	80058ba <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	78db      	ldrb	r3, [r3, #3]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d11e      	bne.n	800556c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005544:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800555a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800555e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005566:	b29b      	uxth	r3, r3
 8005568:	8013      	strh	r3, [r2, #0]
 800556a:	e01d      	b.n	80055a8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800557e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005582:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	441a      	add	r2, r3
 8005590:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005594:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005598:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800559c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055b8:	4413      	add	r3, r2
 80055ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	011a      	lsls	r2, r3, #4
 80055c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	891b      	ldrh	r3, [r3, #8]
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055da:	801a      	strh	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	657b      	str	r3, [r7, #84]	@ 0x54
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ec:	4413      	add	r3, r2
 80055ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	011a      	lsls	r2, r3, #4
 80055f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80055fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	895b      	ldrh	r3, [r3, #10]
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	b29b      	uxth	r3, r3
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800560e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	2b00      	cmp	r3, #0
 8005616:	f040 8093 	bne.w	8005740 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800562a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800562e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01b      	beq.n	800566e <USB_ActivateEndpoint+0x52a>
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	441a      	add	r2, r3
 8005658:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800565a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800565e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005662:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800566a:	b29b      	uxth	r3, r3
 800566c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800567c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800567e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01b      	beq.n	80056be <USB_ActivateEndpoint+0x57a>
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80056aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d4:	873b      	strh	r3, [r7, #56]	@ 0x38
 80056d6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80056d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80056dc:	873b      	strh	r3, [r7, #56]	@ 0x38
 80056de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80056e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056e4:	873b      	strh	r3, [r7, #56]	@ 0x38
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800571c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
 800573e:	e0bc      	b.n	80058ba <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005750:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01d      	beq.n	8005798 <USB_ActivateEndpoint+0x654>
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800576e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005772:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	441a      	add	r2, r3
 8005780:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800578c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80057a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01d      	beq.n	80057f0 <USB_ActivateEndpoint+0x6ac>
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	441a      	add	r2, r3
 80057d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	78db      	ldrb	r3, [r3, #3]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d024      	beq.n	8005842 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800580a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800580e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005812:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005816:	f083 0320 	eor.w	r3, r3, #32
 800581a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	441a      	add	r2, r3
 8005828:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800582c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583c:	b29b      	uxth	r3, r3
 800583e:	8013      	strh	r3, [r2, #0]
 8005840:	e01d      	b.n	800587e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005858:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	441a      	add	r2, r3
 8005866:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800586a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800586e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587a:	b29b      	uxth	r3, r3
 800587c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005894:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	441a      	add	r2, r3
 80058a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80058a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80058ba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3774      	adds	r7, #116	@ 0x74
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop

080058cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b0c2      	sub	sp, #264	@ 0x108
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058da:	6018      	str	r0, [r3, #0]
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	f040 86b7 	bne.w	8006666 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d908      	bls.n	8005926 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005924:	e007      	b.n	8005936 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	7b1b      	ldrb	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d13a      	bne.n	80059bc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6959      	ldr	r1, [r3, #20]
 8005952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	88da      	ldrh	r2, [r3, #6]
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005962:	b29b      	uxth	r3, r3
 8005964:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005968:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800596c:	6800      	ldr	r0, [r0, #0]
 800596e:	f001 fc8d 	bl	800728c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4413      	add	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	011a      	lsls	r2, r3, #4
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	f000 be1f 	b.w	80065fa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	78db      	ldrb	r3, [r3, #3]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	f040 8462 	bne.w	8006292 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6a1a      	ldr	r2, [r3, #32]
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	f240 83df 	bls.w	80061aa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a3c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a1a      	ldr	r2, [r3, #32]
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a58:	1ad2      	subs	r2, r2, r3
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 81c7 	beq.w	8005e1c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d177      	bne.n	8005b9a <USB_EPStartXfer+0x2ce>
 8005aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aca:	4413      	add	r3, r2
 8005acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	011a      	lsls	r2, r3, #4
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	4413      	add	r3, r2
 8005ae0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <USB_EPStartXfer+0x248>
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	e067      	b.n	8005be4 <USB_EPStartXfer+0x318>
 8005b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b18:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b1a:	d81c      	bhi.n	8005b56 <USB_EPStartXfer+0x28a>
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <USB_EPStartXfer+0x270>
 8005b32:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b36:	3301      	adds	r3, #1
 8005b38:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	e046      	b.n	8005be4 <USB_EPStartXfer+0x318>
 8005b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <USB_EPStartXfer+0x2aa>
 8005b6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b70:	3b01      	subs	r3, #1
 8005b72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	029b      	lsls	r3, r3, #10
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4313      	orrs	r3, r2
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e024      	b.n	8005be4 <USB_EPStartXfer+0x318>
 8005b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d11c      	bne.n	8005be4 <USB_EPStartXfer+0x318>
 8005baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	4413      	add	r3, r2
 8005bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	011a      	lsls	r2, r3, #4
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	895b      	ldrh	r3, [r3, #10]
 8005bf0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6959      	ldr	r1, [r3, #20]
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c12:	6800      	ldr	r0, [r0, #0]
 8005c14:	f001 fb3a 	bl	800728c <USB_WritePMA>
            ep->xfer_buff += len;
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	441a      	add	r2, r3
 8005c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d90f      	bls.n	8005c72 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c62:	1ad2      	subs	r2, r2, r3
 8005c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	621a      	str	r2, [r3, #32]
 8005c70:	e00e      	b.n	8005c90 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d177      	bne.n	8005d90 <USB_EPStartXfer+0x4c4>
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	61bb      	str	r3, [r7, #24]
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <USB_EPStartXfer+0x43e>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	e06d      	b.n	8005de6 <USB_EPStartXfer+0x51a>
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d10:	d81c      	bhi.n	8005d4c <USB_EPStartXfer+0x480>
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <USB_EPStartXfer+0x466>
 8005d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	029b      	lsls	r3, r3, #10
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	4313      	orrs	r3, r2
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	e04c      	b.n	8005de6 <USB_EPStartXfer+0x51a>
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <USB_EPStartXfer+0x4a0>
 8005d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d66:	3b01      	subs	r3, #1
 8005d68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	029b      	lsls	r3, r3, #10
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e02a      	b.n	8005de6 <USB_EPStartXfer+0x51a>
 8005d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d122      	bne.n	8005de6 <USB_EPStartXfer+0x51a>
 8005da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	623b      	str	r3, [r7, #32]
 8005dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	011a      	lsls	r2, r3, #4
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	891b      	ldrh	r3, [r3, #8]
 8005df2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6959      	ldr	r1, [r3, #20]
 8005e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e14:	6800      	ldr	r0, [r0, #0]
 8005e16:	f001 fa39 	bl	800728c <USB_WritePMA>
 8005e1a:	e3ee      	b.n	80065fa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d177      	bne.n	8005f1c <USB_EPStartXfer+0x650>
 8005e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e4c:	4413      	add	r3, r2
 8005e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	011a      	lsls	r2, r3, #4
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <USB_EPStartXfer+0x5ca>
 8005e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e06d      	b.n	8005f72 <USB_EPStartXfer+0x6a6>
 8005e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e9c:	d81c      	bhi.n	8005ed8 <USB_EPStartXfer+0x60c>
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <USB_EPStartXfer+0x5f2>
 8005eb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eb8:	3301      	adds	r3, #1
 8005eba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	e04c      	b.n	8005f72 <USB_EPStartXfer+0x6a6>
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d104      	bne.n	8005ef8 <USB_EPStartXfer+0x62c>
 8005eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	029b      	lsls	r3, r3, #10
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f18:	801a      	strh	r2, [r3, #0]
 8005f1a:	e02a      	b.n	8005f72 <USB_EPStartXfer+0x6a6>
 8005f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d122      	bne.n	8005f72 <USB_EPStartXfer+0x6a6>
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f4c:	4413      	add	r3, r2
 8005f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	011a      	lsls	r2, r3, #4
 8005f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	891b      	ldrh	r3, [r3, #8]
 8005f7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6959      	ldr	r1, [r3, #20]
 8005f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fa0:	6800      	ldr	r0, [r0, #0]
 8005fa2:	f001 f973 	bl	800728c <USB_WritePMA>
            ep->xfer_buff += len;
 8005fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb6:	441a      	add	r2, r3
 8005fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6a1a      	ldr	r2, [r3, #32]
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d90f      	bls.n	8006000 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	621a      	str	r2, [r3, #32]
 8005ffe:	e00e      	b.n	800601e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	643b      	str	r3, [r7, #64]	@ 0x40
 800602a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d177      	bne.n	800612a <USB_EPStartXfer+0x85e>
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605a:	4413      	add	r3, r2
 800605c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800605e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	011a      	lsls	r2, r3, #4
 800606c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606e:	4413      	add	r3, r2
 8006070:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006074:	637b      	str	r3, [r7, #52]	@ 0x34
 8006076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006080:	b29a      	uxth	r2, r3
 8006082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <USB_EPStartXfer+0x7d8>
 800608e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609c:	b29a      	uxth	r2, r3
 800609e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e067      	b.n	8006174 <USB_EPStartXfer+0x8a8>
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80060aa:	d81c      	bhi.n	80060e6 <USB_EPStartXfer+0x81a>
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b0:	085b      	lsrs	r3, r3, #1
 80060b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d004      	beq.n	80060cc <USB_EPStartXfer+0x800>
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c6:	3301      	adds	r3, #1
 80060c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	029b      	lsls	r3, r3, #10
 80060da:	b29b      	uxth	r3, r3
 80060dc:	4313      	orrs	r3, r2
 80060de:	b29a      	uxth	r2, r3
 80060e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e2:	801a      	strh	r2, [r3, #0]
 80060e4:	e046      	b.n	8006174 <USB_EPStartXfer+0x8a8>
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d104      	bne.n	8006106 <USB_EPStartXfer+0x83a>
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006100:	3b01      	subs	r3, #1
 8006102:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29a      	uxth	r2, r3
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	b29b      	uxth	r3, r3
 8006112:	029b      	lsls	r3, r3, #10
 8006114:	b29b      	uxth	r3, r3
 8006116:	4313      	orrs	r3, r2
 8006118:	b29b      	uxth	r3, r3
 800611a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006122:	b29a      	uxth	r2, r3
 8006124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	e024      	b.n	8006174 <USB_EPStartXfer+0x8a8>
 800612a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	785b      	ldrb	r3, [r3, #1]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d11c      	bne.n	8006174 <USB_EPStartXfer+0x8a8>
 800613a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800614e:	4413      	add	r3, r2
 8006150:	643b      	str	r3, [r7, #64]	@ 0x40
 8006152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	011a      	lsls	r2, r3, #4
 8006160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006162:	4413      	add	r3, r2
 8006164:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	b29a      	uxth	r2, r3
 8006170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006172:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	895b      	ldrh	r3, [r3, #10]
 8006180:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6959      	ldr	r1, [r3, #20]
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006194:	b29b      	uxth	r3, r3
 8006196:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800619a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800619e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061a2:	6800      	ldr	r0, [r0, #0]
 80061a4:	f001 f872 	bl	800728c <USB_WritePMA>
 80061a8:	e227      	b.n	80065fa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80061ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80061dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800620a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006212:	b29b      	uxth	r3, r3
 8006214:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006230:	b29b      	uxth	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006236:	4413      	add	r3, r2
 8006238:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	011a      	lsls	r2, r3, #4
 8006248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800624a:	4413      	add	r3, r2
 800624c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006250:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006256:	b29a      	uxth	r2, r3
 8006258:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800625a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800625c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	891b      	ldrh	r3, [r3, #8]
 8006268:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800626c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6959      	ldr	r1, [r3, #20]
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627c:	b29b      	uxth	r3, r3
 800627e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006282:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006286:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800628a:	6800      	ldr	r0, [r0, #0]
 800628c:	f000 fffe 	bl	800728c <USB_WritePMA>
 8006290:	e1b3      	b.n	80065fa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6a1a      	ldr	r2, [r3, #32]
 800629e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a2:	1ad2      	subs	r2, r2, r3
 80062a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80c6 	beq.w	8006464 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d177      	bne.n	80063e4 <USB_EPStartXfer+0xb18>
 80062f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800630e:	b29b      	uxth	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006314:	4413      	add	r3, r2
 8006316:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	011a      	lsls	r2, r3, #4
 8006326:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006328:	4413      	add	r3, r2
 800632a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800632e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800633a:	b29a      	uxth	r2, r3
 800633c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <USB_EPStartXfer+0xa92>
 8006348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006356:	b29a      	uxth	r2, r3
 8006358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	e067      	b.n	800642e <USB_EPStartXfer+0xb62>
 800635e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006362:	2b3e      	cmp	r3, #62	@ 0x3e
 8006364:	d81c      	bhi.n	80063a0 <USB_EPStartXfer+0xad4>
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <USB_EPStartXfer+0xaba>
 800637c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006380:	3301      	adds	r3, #1
 8006382:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29a      	uxth	r2, r3
 800638c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006390:	b29b      	uxth	r3, r3
 8006392:	029b      	lsls	r3, r3, #10
 8006394:	b29b      	uxth	r3, r3
 8006396:	4313      	orrs	r3, r2
 8006398:	b29a      	uxth	r2, r3
 800639a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800639c:	801a      	strh	r2, [r3, #0]
 800639e:	e046      	b.n	800642e <USB_EPStartXfer+0xb62>
 80063a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <USB_EPStartXfer+0xaf4>
 80063b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063ba:	3b01      	subs	r3, #1
 80063bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	029b      	lsls	r3, r3, #10
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	4313      	orrs	r3, r2
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063dc:	b29a      	uxth	r2, r3
 80063de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e024      	b.n	800642e <USB_EPStartXfer+0xb62>
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d11c      	bne.n	800642e <USB_EPStartXfer+0xb62>
 80063f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006402:	b29b      	uxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006408:	4413      	add	r3, r2
 800640a:	673b      	str	r3, [r7, #112]	@ 0x70
 800640c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	011a      	lsls	r2, r3, #4
 800641a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800641c:	4413      	add	r3, r2
 800641e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006428:	b29a      	uxth	r2, r3
 800642a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800642c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800642e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	895b      	ldrh	r3, [r3, #10]
 800643a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6959      	ldr	r1, [r3, #20]
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644e:	b29b      	uxth	r3, r3
 8006450:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006454:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006458:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800645c:	6800      	ldr	r0, [r0, #0]
 800645e:	f000 ff15 	bl	800728c <USB_WritePMA>
 8006462:	e0ca      	b.n	80065fa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d177      	bne.n	8006564 <USB_EPStartXfer+0xc98>
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006494:	4413      	add	r3, r2
 8006496:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	011a      	lsls	r2, r3, #4
 80064a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064a8:	4413      	add	r3, r2
 80064aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <USB_EPStartXfer+0xc12>
 80064c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	e073      	b.n	80065c6 <USB_EPStartXfer+0xcfa>
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80064e4:	d81c      	bhi.n	8006520 <USB_EPStartXfer+0xc54>
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ea:	085b      	lsrs	r3, r3, #1
 80064ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <USB_EPStartXfer+0xc3a>
 80064fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006500:	3301      	adds	r3, #1
 8006502:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006506:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29a      	uxth	r2, r3
 800650c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006510:	b29b      	uxth	r3, r3
 8006512:	029b      	lsls	r3, r3, #10
 8006514:	b29b      	uxth	r3, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	b29a      	uxth	r2, r3
 800651a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	e052      	b.n	80065c6 <USB_EPStartXfer+0xcfa>
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <USB_EPStartXfer+0xc74>
 8006536:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800653a:	3b01      	subs	r3, #1
 800653c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29a      	uxth	r2, r3
 8006546:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800654a:	b29b      	uxth	r3, r3
 800654c:	029b      	lsls	r3, r3, #10
 800654e:	b29b      	uxth	r3, r3
 8006550:	4313      	orrs	r3, r2
 8006552:	b29b      	uxth	r3, r3
 8006554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655c:	b29a      	uxth	r2, r3
 800655e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	e030      	b.n	80065c6 <USB_EPStartXfer+0xcfa>
 8006564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d128      	bne.n	80065c6 <USB_EPStartXfer+0xcfa>
 8006574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006586:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006590:	b29b      	uxth	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006598:	4413      	add	r3, r2
 800659a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	011a      	lsls	r2, r3, #4
 80065ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	b29a      	uxth	r2, r3
 80065c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	891b      	ldrh	r3, [r3, #8]
 80065d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6959      	ldr	r1, [r3, #20]
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065f4:	6800      	ldr	r0, [r0, #0]
 80065f6:	f000 fe49 	bl	800728c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800661c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006620:	817b      	strh	r3, [r7, #10]
 8006622:	897b      	ldrh	r3, [r7, #10]
 8006624:	f083 0310 	eor.w	r3, r3, #16
 8006628:	817b      	strh	r3, [r7, #10]
 800662a:	897b      	ldrh	r3, [r7, #10]
 800662c:	f083 0320 	eor.w	r3, r3, #32
 8006630:	817b      	strh	r3, [r7, #10]
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	897b      	ldrh	r3, [r7, #10]
 800664e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800665e:	b29b      	uxth	r3, r3
 8006660:	8013      	strh	r3, [r2, #0]
 8006662:	f000 bcdf 	b.w	8007024 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	7b1b      	ldrb	r3, [r3, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f040 80bc 	bne.w	80067f0 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	429a      	cmp	r2, r3
 8006692:	d917      	bls.n	80066c4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80066a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b4:	1ad2      	subs	r2, r2, r3
 80066b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	619a      	str	r2, [r3, #24]
 80066c2:	e00e      	b.n	80066e2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80066c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80066d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066fe:	b29b      	uxth	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006706:	4413      	add	r3, r2
 8006708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800670c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	011a      	lsls	r2, r3, #4
 800671a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800671e:	4413      	add	r3, r2
 8006720:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006724:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006734:	b29a      	uxth	r2, r3
 8006736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10d      	bne.n	8006760 <USB_EPStartXfer+0xe94>
 8006744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006754:	b29a      	uxth	r2, r3
 8006756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	f000 bc28 	b.w	8006fb0 <USB_EPStartXfer+0x16e4>
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006764:	2b3e      	cmp	r3, #62	@ 0x3e
 8006766:	d81f      	bhi.n	80067a8 <USB_EPStartXfer+0xedc>
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676c:	085b      	lsrs	r3, r3, #1
 800676e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <USB_EPStartXfer+0xebc>
 800677e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006782:	3301      	adds	r3, #1
 8006784:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29a      	uxth	r2, r3
 8006790:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006794:	b29b      	uxth	r3, r3
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	b29b      	uxth	r3, r3
 800679a:	4313      	orrs	r3, r2
 800679c:	b29a      	uxth	r2, r3
 800679e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	f000 bc04 	b.w	8006fb0 <USB_EPStartXfer+0x16e4>
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <USB_EPStartXfer+0xefc>
 80067be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067c2:	3b01      	subs	r3, #1
 80067c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	029b      	lsls	r3, r3, #10
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e3df      	b.n	8006fb0 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80067f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	78db      	ldrb	r3, [r3, #3]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	f040 8218 	bne.w	8006c32 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f040 809d 	bne.w	800694e <USB_EPStartXfer+0x1082>
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006830:	b29b      	uxth	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006838:	4413      	add	r3, r2
 800683a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	011a      	lsls	r2, r3, #4
 800684c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006850:	4413      	add	r3, r2
 8006852:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006856:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800685a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006866:	b29a      	uxth	r2, r3
 8006868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10c      	bne.n	8006898 <USB_EPStartXfer+0xfcc>
 800687e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800688a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688e:	b29a      	uxth	r2, r3
 8006890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	e08f      	b.n	80069b8 <USB_EPStartXfer+0x10ec>
 8006898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80068a6:	d826      	bhi.n	80068f6 <USB_EPStartXfer+0x102a>
 80068a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	085b      	lsrs	r3, r3, #1
 80068b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d004      	beq.n	80068d8 <USB_EPStartXfer+0x100c>
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d2:	3301      	adds	r3, #1
 80068d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	029b      	lsls	r3, r3, #10
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e060      	b.n	80069b8 <USB_EPStartXfer+0x10ec>
 80068f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <USB_EPStartXfer+0x105a>
 800691c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006920:	3b01      	subs	r3, #1
 8006922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29a      	uxth	r2, r3
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006932:	b29b      	uxth	r3, r3
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	b29b      	uxth	r3, r3
 8006938:	4313      	orrs	r3, r2
 800693a:	b29b      	uxth	r3, r3
 800693c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006944:	b29a      	uxth	r2, r3
 8006946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e034      	b.n	80069b8 <USB_EPStartXfer+0x10ec>
 800694e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d12c      	bne.n	80069b8 <USB_EPStartXfer+0x10ec>
 800695e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800696c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800697a:	b29b      	uxth	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006982:	4413      	add	r3, r2
 8006984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	011a      	lsls	r2, r3, #4
 8006996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800699a:	4413      	add	r3, r2
 800699c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80069c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 809d 	bne.w	8006b12 <USB_EPStartXfer+0x1246>
 80069d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069fc:	4413      	add	r3, r2
 80069fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	011a      	lsls	r2, r3, #4
 8006a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10c      	bne.n	8006a5c <USB_EPStartXfer+0x1190>
 8006a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	e088      	b.n	8006b6e <USB_EPStartXfer+0x12a2>
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a6a:	d826      	bhi.n	8006aba <USB_EPStartXfer+0x11ee>
 8006a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	085b      	lsrs	r3, r3, #1
 8006a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <USB_EPStartXfer+0x11d0>
 8006a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a96:	3301      	adds	r3, #1
 8006a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	029b      	lsls	r3, r3, #10
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	e059      	b.n	8006b6e <USB_EPStartXfer+0x12a2>
 8006aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <USB_EPStartXfer+0x121e>
 8006ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	029b      	lsls	r3, r3, #10
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	4313      	orrs	r3, r2
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e02d      	b.n	8006b6e <USB_EPStartXfer+0x12a2>
 8006b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d125      	bne.n	8006b6e <USB_EPStartXfer+0x12a2>
 8006b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b38:	4413      	add	r3, r2
 8006b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	011a      	lsls	r2, r3, #4
 8006b4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b50:	4413      	add	r3, r2
 8006b52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b6c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8218 	beq.w	8006fb0 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ba0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <USB_EPStartXfer+0x12ec>
 8006bac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10d      	bne.n	8006bd4 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f040 81f5 	bne.w	8006fb0 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f040 81ee 	bne.w	8006fb0 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8013      	strh	r3, [r2, #0]
 8006c30:	e1be      	b.n	8006fb0 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	78db      	ldrb	r3, [r3, #3]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	f040 81b4 	bne.w	8006fac <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699a      	ldr	r2, [r3, #24]
 8006c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d917      	bls.n	8006c90 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8006c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c80:	1ad2      	subs	r2, r2, r3
 8006c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	619a      	str	r2, [r3, #24]
 8006c8e:	e00e      	b.n	8006cae <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8006c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2200      	movs	r2, #0
 8006cac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f040 8085 	bne.w	8006dca <USB_EPStartXfer+0x14fe>
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	011a      	lsls	r2, r3, #4
 8006cf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d18:	801a      	strh	r2, [r3, #0]
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10c      	bne.n	8006d3c <USB_EPStartXfer+0x1470>
 8006d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d38:	801a      	strh	r2, [r3, #0]
 8006d3a:	e077      	b.n	8006e2c <USB_EPStartXfer+0x1560>
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d42:	d81e      	bhi.n	8006d82 <USB_EPStartXfer+0x14b6>
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <USB_EPStartXfer+0x1498>
 8006d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	029b      	lsls	r3, r3, #10
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	4313      	orrs	r3, r2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	e054      	b.n	8006e2c <USB_EPStartXfer+0x1560>
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d90:	f003 031f 	and.w	r3, r3, #31
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d104      	bne.n	8006da2 <USB_EPStartXfer+0x14d6>
 8006d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006da2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	029b      	lsls	r3, r3, #10
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	4313      	orrs	r3, r2
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	e030      	b.n	8006e2c <USB_EPStartXfer+0x1560>
 8006dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d128      	bne.n	8006e2c <USB_EPStartXfer+0x1560>
 8006dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dfe:	4413      	add	r3, r2
 8006e00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	011a      	lsls	r2, r3, #4
 8006e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e16:	4413      	add	r3, r2
 8006e18:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e2a:	801a      	strh	r2, [r3, #0]
 8006e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 8085 	bne.w	8006f56 <USB_EPStartXfer+0x168a>
 8006e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e70:	4413      	add	r3, r2
 8006e72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	011a      	lsls	r2, r3, #4
 8006e84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e88:	4413      	add	r3, r2
 8006e8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10c      	bne.n	8006ec8 <USB_EPStartXfer+0x15fc>
 8006eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	e073      	b.n	8006fb0 <USB_EPStartXfer+0x16e4>
 8006ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ecc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ece:	d81e      	bhi.n	8006f0e <USB_EPStartXfer+0x1642>
 8006ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed4:	085b      	lsrs	r3, r3, #1
 8006ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <USB_EPStartXfer+0x1624>
 8006ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eea:	3301      	adds	r3, #1
 8006eec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ef0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	029b      	lsls	r3, r3, #10
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	4313      	orrs	r3, r2
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e050      	b.n	8006fb0 <USB_EPStartXfer+0x16e4>
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <USB_EPStartXfer+0x1662>
 8006f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	029b      	lsls	r3, r3, #10
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4313      	orrs	r3, r2
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f52:	801a      	strh	r2, [r3, #0]
 8006f54:	e02c      	b.n	8006fb0 <USB_EPStartXfer+0x16e4>
 8006f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d124      	bne.n	8006fb0 <USB_EPStartXfer+0x16e4>
 8006f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	011a      	lsls	r2, r3, #4
 8006f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f94:	4413      	add	r3, r2
 8006f96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	e001      	b.n	8006fb0 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e03a      	b.n	8007026 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006fda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006fde:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fe2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006fe6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006fea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006fee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	441a      	add	r2, r3
 800700c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800701c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007020:	b29b      	uxth	r3, r3
 8007022:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d020      	beq.n	8007084 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007058:	81bb      	strh	r3, [r7, #12]
 800705a:	89bb      	ldrh	r3, [r7, #12]
 800705c:	f083 0310 	eor.w	r3, r3, #16
 8007060:	81bb      	strh	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	441a      	add	r2, r3
 800706c:	89bb      	ldrh	r3, [r7, #12]
 800706e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800707a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707e:	b29b      	uxth	r3, r3
 8007080:	8013      	strh	r3, [r2, #0]
 8007082:	e01f      	b.n	80070c4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800709a:	81fb      	strh	r3, [r7, #14]
 800709c:	89fb      	ldrh	r3, [r7, #14]
 800709e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070a2:	81fb      	strh	r3, [r7, #14]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	441a      	add	r2, r3
 80070ae:	89fb      	ldrh	r3, [r7, #14]
 80070b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b087      	sub	sp, #28
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	7b1b      	ldrb	r3, [r3, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f040 809d 	bne.w	8007220 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	785b      	ldrb	r3, [r3, #1]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d04c      	beq.n	8007188 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	823b      	strh	r3, [r7, #16]
 80070fc:	8a3b      	ldrh	r3, [r7, #16]
 80070fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01b      	beq.n	800713e <USB_EPClearStall+0x6c>
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711c:	81fb      	strh	r3, [r7, #14]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	441a      	add	r2, r3
 8007128:	89fb      	ldrh	r3, [r7, #14]
 800712a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800712e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007136:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800713a:	b29b      	uxth	r3, r3
 800713c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	78db      	ldrb	r3, [r3, #3]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d06c      	beq.n	8007220 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800715c:	81bb      	strh	r3, [r7, #12]
 800715e:	89bb      	ldrh	r3, [r7, #12]
 8007160:	f083 0320 	eor.w	r3, r3, #32
 8007164:	81bb      	strh	r3, [r7, #12]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	441a      	add	r2, r3
 8007170:	89bb      	ldrh	r3, [r7, #12]
 8007172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800717a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800717e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007182:	b29b      	uxth	r3, r3
 8007184:	8013      	strh	r3, [r2, #0]
 8007186:	e04b      	b.n	8007220 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	82fb      	strh	r3, [r7, #22]
 8007196:	8afb      	ldrh	r3, [r7, #22]
 8007198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01b      	beq.n	80071d8 <USB_EPClearStall+0x106>
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b6:	82bb      	strh	r3, [r7, #20]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	8abb      	ldrh	r3, [r7, #20]
 80071c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ee:	827b      	strh	r3, [r7, #18]
 80071f0:	8a7b      	ldrh	r3, [r7, #18]
 80071f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80071f6:	827b      	strh	r3, [r7, #18]
 80071f8:	8a7b      	ldrh	r3, [r7, #18]
 80071fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80071fe:	827b      	strh	r3, [r7, #18]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	441a      	add	r2, r3
 800720a:	8a7b      	ldrh	r3, [r7, #18]
 800720c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d103      	bne.n	8007248 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2280      	movs	r2, #128	@ 0x80
 8007244:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800727a:	b29b      	uxth	r3, r3
 800727c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800727e:	68fb      	ldr	r3, [r7, #12]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800728c:	b480      	push	{r7}
 800728e:	b08b      	sub	sp, #44	@ 0x2c
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4611      	mov	r1, r2
 8007298:	461a      	mov	r2, r3
 800729a:	460b      	mov	r3, r1
 800729c:	80fb      	strh	r3, [r7, #6]
 800729e:	4613      	mov	r3, r2
 80072a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072a2:	88bb      	ldrh	r3, [r7, #4]
 80072a4:	3301      	adds	r3, #1
 80072a6:	085b      	lsrs	r3, r3, #1
 80072a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	005a      	lsls	r2, r3, #1
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c4:	e01e      	b.n	8007304 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	3301      	adds	r3, #1
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	b21a      	sxth	r2, r3
 80072d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072da:	4313      	orrs	r3, r2
 80072dc:	b21b      	sxth	r3, r3
 80072de:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	8a7a      	ldrh	r2, [r7, #18]
 80072e4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	3302      	adds	r3, #2
 80072ea:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	3302      	adds	r3, #2
 80072f0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	3301      	adds	r3, #1
 80072f6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	3301      	adds	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	3b01      	subs	r3, #1
 8007302:	627b      	str	r3, [r7, #36]	@ 0x24
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1dd      	bne.n	80072c6 <USB_WritePMA+0x3a>
  }
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	372c      	adds	r7, #44	@ 0x2c
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007318:	b480      	push	{r7}
 800731a:	b08b      	sub	sp, #44	@ 0x2c
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4611      	mov	r1, r2
 8007324:	461a      	mov	r2, r3
 8007326:	460b      	mov	r3, r1
 8007328:	80fb      	strh	r3, [r7, #6]
 800732a:	4613      	mov	r3, r2
 800732c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800732e:	88bb      	ldrh	r3, [r7, #4]
 8007330:	085b      	lsrs	r3, r3, #1
 8007332:	b29b      	uxth	r3, r3
 8007334:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	005a      	lsls	r2, r3, #1
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800734a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007350:	e01b      	b.n	800738a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	b29b      	uxth	r3, r3
 8007358:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	3302      	adds	r3, #2
 800735e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	b2da      	uxtb	r2, r3
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	3301      	adds	r3, #1
 800736c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	0a1b      	lsrs	r3, r3, #8
 8007372:	b2da      	uxtb	r2, r3
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	3301      	adds	r3, #1
 800737c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	3302      	adds	r3, #2
 8007382:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	3b01      	subs	r3, #1
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
 800738a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e0      	bne.n	8007352 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007390:	88bb      	ldrh	r3, [r7, #4]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d007      	beq.n	80073ac <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	701a      	strb	r2, [r3, #0]
  }
}
 80073ac:	bf00      	nop
 80073ae:	372c      	adds	r7, #44	@ 0x2c
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80073c2:	2302      	movs	r3, #2
 80073c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b087      	sub	sp, #28
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	4613      	mov	r3, r2
 80073f2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073fa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007404:	88fa      	ldrh	r2, [r7, #6]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800742a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007450:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d017      	beq.n	800748c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7c1b      	ldrb	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d109      	bne.n	8007478 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800746a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800746e:	2101      	movs	r1, #1
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fc94 	bl	8008d9e <USBD_LL_PrepareReceive>
 8007476:	e007      	b.n	8007488 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800747e:	2340      	movs	r3, #64	@ 0x40
 8007480:	2101      	movs	r1, #1
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 fc8b 	bl	8008d9e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	e000      	b.n	800748e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800748c:	2302      	movs	r3, #2
  }
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	60f8      	str	r0, [r7, #12]
 800749e:	60b9      	str	r1, [r7, #8]
 80074a0:	4613      	mov	r3, r2
 80074a2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80074aa:	2302      	movs	r3, #2
 80074ac:	e01a      	b.n	80074e4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	79fa      	ldrb	r2, [r7, #7]
 80074da:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f001 fb17 	bl	8008b10 <USBD_LL_Init>

  return USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d006      	beq.n	800750e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
 800750c:	e001      	b.n	8007512 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800750e:	2302      	movs	r3, #2
 8007510:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 fb4b 	bl	8008bc4 <USBD_LL_Start>

  return USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800755a:	2302      	movs	r3, #2
 800755c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00c      	beq.n	8007582 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	4611      	mov	r1, r2
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	78fa      	ldrb	r2, [r7, #3]
 80075a2:	4611      	mov	r1, r2
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3

  return USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 feda 	bl	800837e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075d8:	461a      	mov	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d016      	beq.n	800761c <USBD_LL_SetupStage+0x6a>
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d81c      	bhi.n	800762c <USBD_LL_SetupStage+0x7a>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <USBD_LL_SetupStage+0x4a>
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d008      	beq.n	800760c <USBD_LL_SetupStage+0x5a>
 80075fa:	e017      	b.n	800762c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f9cd 	bl	80079a4 <USBD_StdDevReq>
      break;
 800760a:	e01a      	b.n	8007642 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa2f 	bl	8007a78 <USBD_StdItfReq>
      break;
 800761a:	e012      	b.n	8007642 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fa6f 	bl	8007b08 <USBD_StdEPReq>
      break;
 800762a:	e00a      	b.n	8007642 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007632:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007636:	b2db      	uxtb	r3, r3
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 fb03 	bl	8008c46 <USBD_LL_StallEP>
      break;
 8007640:	bf00      	nop
  }

  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	460b      	mov	r3, r1
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d14b      	bne.n	80076f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007666:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800766e:	2b03      	cmp	r3, #3
 8007670:	d134      	bne.n	80076dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	429a      	cmp	r2, r3
 800767c:	d919      	bls.n	80076b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007694:	429a      	cmp	r2, r3
 8007696:	d203      	bcs.n	80076a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800769c:	b29b      	uxth	r3, r3
 800769e:	e002      	b.n	80076a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	461a      	mov	r2, r3
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 ff3a 	bl	8008524 <USBD_CtlContinueRx>
 80076b0:	e038      	b.n	8007724 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d105      	bne.n	80076d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 ff37 	bl	8008548 <USBD_CtlSendStatus>
 80076da:	e023      	b.n	8007724 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	d11e      	bne.n	8007724 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80076ee:	2100      	movs	r1, #0
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f001 faa8 	bl	8008c46 <USBD_LL_StallEP>
 80076f6:	e015      	b.n	8007724 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00d      	beq.n	8007720 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800770a:	2b03      	cmp	r3, #3
 800770c:	d108      	bne.n	8007720 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	7afa      	ldrb	r2, [r7, #11]
 8007718:	4611      	mov	r1, r2
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	4798      	blx	r3
 800771e:	e001      	b.n	8007724 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007720:	2302      	movs	r3, #2
 8007722:	e000      	b.n	8007726 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b086      	sub	sp, #24
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	460b      	mov	r3, r1
 8007738:	607a      	str	r2, [r7, #4]
 800773a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d17f      	bne.n	8007842 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3314      	adds	r3, #20
 8007746:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800774e:	2b02      	cmp	r3, #2
 8007750:	d15c      	bne.n	800780c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	429a      	cmp	r2, r3
 800775c:	d915      	bls.n	800778a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	1ad2      	subs	r2, r2, r3
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	b29b      	uxth	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 fec2 	bl	8008500 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800777c:	2300      	movs	r3, #0
 800777e:	2200      	movs	r2, #0
 8007780:	2100      	movs	r1, #0
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f001 fb0b 	bl	8008d9e <USBD_LL_PrepareReceive>
 8007788:	e04e      	b.n	8007828 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	6912      	ldr	r2, [r2, #16]
 8007792:	fbb3 f1f2 	udiv	r1, r3, r2
 8007796:	fb01 f202 	mul.w	r2, r1, r2
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d11c      	bne.n	80077da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d316      	bcc.n	80077da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d20f      	bcs.n	80077da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077ba:	2200      	movs	r2, #0
 80077bc:	2100      	movs	r1, #0
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 fe9e 	bl	8008500 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077cc:	2300      	movs	r3, #0
 80077ce:	2200      	movs	r2, #0
 80077d0:	2100      	movs	r1, #0
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f001 fae3 	bl	8008d9e <USBD_LL_PrepareReceive>
 80077d8:	e026      	b.n	8007828 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d105      	bne.n	80077fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80077fc:	2180      	movs	r1, #128	@ 0x80
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f001 fa21 	bl	8008c46 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 feb2 	bl	800856e <USBD_CtlReceiveStatus>
 800780a:	e00d      	b.n	8007828 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007812:	2b04      	cmp	r3, #4
 8007814:	d004      	beq.n	8007820 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007820:	2180      	movs	r1, #128	@ 0x80
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f001 fa0f 	bl	8008c46 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800782e:	2b01      	cmp	r3, #1
 8007830:	d11d      	bne.n	800786e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff fe80 	bl	8007538 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007840:	e015      	b.n	800786e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00d      	beq.n	800786a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007854:	2b03      	cmp	r3, #3
 8007856:	d108      	bne.n	800786a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	7afa      	ldrb	r2, [r7, #11]
 8007862:	4611      	mov	r1, r2
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	4798      	blx	r3
 8007868:	e001      	b.n	800786e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800786a:	2302      	movs	r3, #2
 800786c:	e000      	b.n	8007870 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007880:	2340      	movs	r3, #64	@ 0x40
 8007882:	2200      	movs	r2, #0
 8007884:	2100      	movs	r1, #0
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 f9b7 	bl	8008bfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2240      	movs	r2, #64	@ 0x40
 8007898:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800789c:	2340      	movs	r3, #64	@ 0x40
 800789e:	2200      	movs	r2, #0
 80078a0:	2180      	movs	r1, #128	@ 0x80
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 f9a9 	bl	8008bfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2240      	movs	r2, #64	@ 0x40
 80078b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d009      	beq.n	80078f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6852      	ldr	r2, [r2, #4]
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	4611      	mov	r1, r2
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
  }

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2204      	movs	r2, #4
 8007932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007952:	2b04      	cmp	r3, #4
 8007954:	d105      	bne.n	8007962 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800797e:	2b03      	cmp	r3, #3
 8007980:	d10b      	bne.n	800799a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079ba:	2b40      	cmp	r3, #64	@ 0x40
 80079bc:	d005      	beq.n	80079ca <USBD_StdDevReq+0x26>
 80079be:	2b40      	cmp	r3, #64	@ 0x40
 80079c0:	d84f      	bhi.n	8007a62 <USBD_StdDevReq+0xbe>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <USBD_StdDevReq+0x36>
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d14b      	bne.n	8007a62 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	4798      	blx	r3
      break;
 80079d8:	e048      	b.n	8007a6c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b09      	cmp	r3, #9
 80079e0:	d839      	bhi.n	8007a56 <USBD_StdDevReq+0xb2>
 80079e2:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <USBD_StdDevReq+0x44>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a39 	.word	0x08007a39
 80079ec:	08007a4d 	.word	0x08007a4d
 80079f0:	08007a57 	.word	0x08007a57
 80079f4:	08007a43 	.word	0x08007a43
 80079f8:	08007a57 	.word	0x08007a57
 80079fc:	08007a1b 	.word	0x08007a1b
 8007a00:	08007a11 	.word	0x08007a11
 8007a04:	08007a57 	.word	0x08007a57
 8007a08:	08007a2f 	.word	0x08007a2f
 8007a0c:	08007a25 	.word	0x08007a25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9dc 	bl	8007dd0 <USBD_GetDescriptor>
          break;
 8007a18:	e022      	b.n	8007a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fb3f 	bl	80080a0 <USBD_SetAddress>
          break;
 8007a22:	e01d      	b.n	8007a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fb7e 	bl	8008128 <USBD_SetConfig>
          break;
 8007a2c:	e018      	b.n	8007a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc07 	bl	8008244 <USBD_GetConfig>
          break;
 8007a36:	e013      	b.n	8007a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fc37 	bl	80082ae <USBD_GetStatus>
          break;
 8007a40:	e00e      	b.n	8007a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc65 	bl	8008314 <USBD_SetFeature>
          break;
 8007a4a:	e009      	b.n	8007a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fc74 	bl	800833c <USBD_ClrFeature>
          break;
 8007a54:	e004      	b.n	8007a60 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fcca 	bl	80083f2 <USBD_CtlError>
          break;
 8007a5e:	bf00      	nop
      }
      break;
 8007a60:	e004      	b.n	8007a6c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fcc4 	bl	80083f2 <USBD_CtlError>
      break;
 8007a6a:	bf00      	nop
  }

  return ret;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop

08007a78 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a8e:	2b40      	cmp	r3, #64	@ 0x40
 8007a90:	d005      	beq.n	8007a9e <USBD_StdItfReq+0x26>
 8007a92:	2b40      	cmp	r3, #64	@ 0x40
 8007a94:	d82e      	bhi.n	8007af4 <USBD_StdItfReq+0x7c>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <USBD_StdItfReq+0x26>
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	d12a      	bne.n	8007af4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d81d      	bhi.n	8007ae6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	889b      	ldrh	r3, [r3, #4]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d813      	bhi.n	8007adc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	4798      	blx	r3
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	88db      	ldrh	r3, [r3, #6]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d110      	bne.n	8007af0 <USBD_StdItfReq+0x78>
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10d      	bne.n	8007af0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fd37 	bl	8008548 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ada:	e009      	b.n	8007af0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fc87 	bl	80083f2 <USBD_CtlError>
          break;
 8007ae4:	e004      	b.n	8007af0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fc82 	bl	80083f2 <USBD_CtlError>
          break;
 8007aee:	e000      	b.n	8007af2 <USBD_StdItfReq+0x7a>
          break;
 8007af0:	bf00      	nop
      }
      break;
 8007af2:	e004      	b.n	8007afe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fc7b 	bl	80083f2 <USBD_CtlError>
      break;
 8007afc:	bf00      	nop
  }

  return USBD_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	889b      	ldrh	r3, [r3, #4]
 8007b1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b24:	2b40      	cmp	r3, #64	@ 0x40
 8007b26:	d007      	beq.n	8007b38 <USBD_StdEPReq+0x30>
 8007b28:	2b40      	cmp	r3, #64	@ 0x40
 8007b2a:	f200 8146 	bhi.w	8007dba <USBD_StdEPReq+0x2b2>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <USBD_StdEPReq+0x40>
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	f040 8141 	bne.w	8007dba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
      break;
 8007b46:	e13d      	b.n	8007dc4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d10a      	bne.n	8007b6a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	e12d      	b.n	8007dc6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d007      	beq.n	8007b82 <USBD_StdEPReq+0x7a>
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	f300 811b 	bgt.w	8007dae <USBD_StdEPReq+0x2a6>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d072      	beq.n	8007c62 <USBD_StdEPReq+0x15a>
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d03a      	beq.n	8007bf6 <USBD_StdEPReq+0xee>
 8007b80:	e115      	b.n	8007dae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d002      	beq.n	8007b92 <USBD_StdEPReq+0x8a>
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d015      	beq.n	8007bbc <USBD_StdEPReq+0xb4>
 8007b90:	e02b      	b.n	8007bea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00c      	beq.n	8007bb2 <USBD_StdEPReq+0xaa>
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	2b80      	cmp	r3, #128	@ 0x80
 8007b9c:	d009      	beq.n	8007bb2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f001 f84f 	bl	8008c46 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ba8:	2180      	movs	r1, #128	@ 0x80
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 f84b 	bl	8008c46 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bb0:	e020      	b.n	8007bf4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fc1c 	bl	80083f2 <USBD_CtlError>
              break;
 8007bba:	e01b      	b.n	8007bf4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	885b      	ldrh	r3, [r3, #2]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10e      	bne.n	8007be2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00b      	beq.n	8007be2 <USBD_StdEPReq+0xda>
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b80      	cmp	r3, #128	@ 0x80
 8007bce:	d008      	beq.n	8007be2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	88db      	ldrh	r3, [r3, #6]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f832 	bl	8008c46 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fcb0 	bl	8008548 <USBD_CtlSendStatus>

              break;
 8007be8:	e004      	b.n	8007bf4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc00 	bl	80083f2 <USBD_CtlError>
              break;
 8007bf2:	bf00      	nop
          }
          break;
 8007bf4:	e0e0      	b.n	8007db8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d002      	beq.n	8007c06 <USBD_StdEPReq+0xfe>
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d015      	beq.n	8007c30 <USBD_StdEPReq+0x128>
 8007c04:	e026      	b.n	8007c54 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00c      	beq.n	8007c26 <USBD_StdEPReq+0x11e>
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	2b80      	cmp	r3, #128	@ 0x80
 8007c10:	d009      	beq.n	8007c26 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 f815 	bl	8008c46 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007c1c:	2180      	movs	r1, #128	@ 0x80
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 f811 	bl	8008c46 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c24:	e01c      	b.n	8007c60 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fbe2 	bl	80083f2 <USBD_CtlError>
              break;
 8007c2e:	e017      	b.n	8007c60 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	885b      	ldrh	r3, [r3, #2]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d112      	bne.n	8007c5e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f001 f81c 	bl	8008c84 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fc7b 	bl	8008548 <USBD_CtlSendStatus>
              }
              break;
 8007c52:	e004      	b.n	8007c5e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fbcb 	bl	80083f2 <USBD_CtlError>
              break;
 8007c5c:	e000      	b.n	8007c60 <USBD_StdEPReq+0x158>
              break;
 8007c5e:	bf00      	nop
          }
          break;
 8007c60:	e0aa      	b.n	8007db8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d002      	beq.n	8007c72 <USBD_StdEPReq+0x16a>
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d032      	beq.n	8007cd6 <USBD_StdEPReq+0x1ce>
 8007c70:	e097      	b.n	8007da2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d007      	beq.n	8007c88 <USBD_StdEPReq+0x180>
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b80      	cmp	r3, #128	@ 0x80
 8007c7c:	d004      	beq.n	8007c88 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fbb6 	bl	80083f2 <USBD_CtlError>
                break;
 8007c86:	e091      	b.n	8007dac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	da0b      	bge.n	8007ca8 <USBD_StdEPReq+0x1a0>
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	3310      	adds	r3, #16
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	e00b      	b.n	8007cc0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cae:	4613      	mov	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fbfa 	bl	80084c8 <USBD_CtlSendData>
              break;
 8007cd4:	e06a      	b.n	8007dac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	da11      	bge.n	8007d02 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	f003 020f 	and.w	r2, r3, #15
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	440b      	add	r3, r1
 8007cf0:	3318      	adds	r3, #24
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d117      	bne.n	8007d28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fb79 	bl	80083f2 <USBD_CtlError>
                  break;
 8007d00:	e054      	b.n	8007dac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	f003 020f 	and.w	r2, r3, #15
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fb66 	bl	80083f2 <USBD_CtlError>
                  break;
 8007d26:	e041      	b.n	8007dac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da0b      	bge.n	8007d48 <USBD_StdEPReq+0x240>
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d36:	4613      	mov	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	3310      	adds	r3, #16
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	4413      	add	r3, r2
 8007d44:	3304      	adds	r3, #4
 8007d46:	e00b      	b.n	8007d60 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	3304      	adds	r3, #4
 8007d60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d62:	7bbb      	ldrb	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <USBD_StdEPReq+0x266>
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	2b80      	cmp	r3, #128	@ 0x80
 8007d6c:	d103      	bne.n	8007d76 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	e00e      	b.n	8007d94 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 ffa1 	bl	8008cc2 <USBD_LL_IsStallEP>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	e002      	b.n	8007d94 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2202      	movs	r2, #2
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fb94 	bl	80084c8 <USBD_CtlSendData>
              break;
 8007da0:	e004      	b.n	8007dac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fb24 	bl	80083f2 <USBD_CtlError>
              break;
 8007daa:	bf00      	nop
          }
          break;
 8007dac:	e004      	b.n	8007db8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fb1e 	bl	80083f2 <USBD_CtlError>
          break;
 8007db6:	bf00      	nop
      }
      break;
 8007db8:	e004      	b.n	8007dc4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fb18 	bl	80083f2 <USBD_CtlError>
      break;
 8007dc2:	bf00      	nop
  }

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	885b      	ldrh	r3, [r3, #2]
 8007dea:	0a1b      	lsrs	r3, r3, #8
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	2b06      	cmp	r3, #6
 8007df2:	f200 8128 	bhi.w	8008046 <USBD_GetDescriptor+0x276>
 8007df6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dfc <USBD_GetDescriptor+0x2c>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e19 	.word	0x08007e19
 8007e00:	08007e31 	.word	0x08007e31
 8007e04:	08007e71 	.word	0x08007e71
 8007e08:	08008047 	.word	0x08008047
 8007e0c:	08008047 	.word	0x08008047
 8007e10:	08007fe7 	.word	0x08007fe7
 8007e14:	08008013 	.word	0x08008013
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	7c12      	ldrb	r2, [r2, #16]
 8007e24:	f107 0108 	add.w	r1, r7, #8
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
 8007e2c:	60f8      	str	r0, [r7, #12]
      break;
 8007e2e:	e112      	b.n	8008056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7c1b      	ldrb	r3, [r3, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10d      	bne.n	8007e54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e40:	f107 0208 	add.w	r2, r7, #8
 8007e44:	4610      	mov	r0, r2
 8007e46:	4798      	blx	r3
 8007e48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	2202      	movs	r2, #2
 8007e50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e52:	e100      	b.n	8008056 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5c:	f107 0208 	add.w	r2, r7, #8
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	701a      	strb	r2, [r3, #0]
      break;
 8007e6e:	e0f2      	b.n	8008056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	885b      	ldrh	r3, [r3, #2]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	f200 80ac 	bhi.w	8007fd4 <USBD_GetDescriptor+0x204>
 8007e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e84 <USBD_GetDescriptor+0xb4>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007e9d 	.word	0x08007e9d
 8007e88:	08007ed1 	.word	0x08007ed1
 8007e8c:	08007f05 	.word	0x08007f05
 8007e90:	08007f39 	.word	0x08007f39
 8007e94:	08007f6d 	.word	0x08007f6d
 8007e98:	08007fa1 	.word	0x08007fa1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7c12      	ldrb	r2, [r2, #16]
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ebe:	e091      	b.n	8007fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa95 	bl	80083f2 <USBD_CtlError>
            err++;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ece:	e089      	b.n	8007fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	7c12      	ldrb	r2, [r2, #16]
 8007ee8:	f107 0108 	add.w	r1, r7, #8
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ef2:	e077      	b.n	8007fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa7b 	bl	80083f2 <USBD_CtlError>
            err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
          break;
 8007f02:	e06f      	b.n	8007fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	7c12      	ldrb	r2, [r2, #16]
 8007f1c:	f107 0108 	add.w	r1, r7, #8
 8007f20:	4610      	mov	r0, r2
 8007f22:	4798      	blx	r3
 8007f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f26:	e05d      	b.n	8007fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa61 	bl	80083f2 <USBD_CtlError>
            err++;
 8007f30:	7afb      	ldrb	r3, [r7, #11]
 8007f32:	3301      	adds	r3, #1
 8007f34:	72fb      	strb	r3, [r7, #11]
          break;
 8007f36:	e055      	b.n	8007fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	7c12      	ldrb	r2, [r2, #16]
 8007f50:	f107 0108 	add.w	r1, r7, #8
 8007f54:	4610      	mov	r0, r2
 8007f56:	4798      	blx	r3
 8007f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f5a:	e043      	b.n	8007fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa47 	bl	80083f2 <USBD_CtlError>
            err++;
 8007f64:	7afb      	ldrb	r3, [r7, #11]
 8007f66:	3301      	adds	r3, #1
 8007f68:	72fb      	strb	r3, [r7, #11]
          break;
 8007f6a:	e03b      	b.n	8007fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00b      	beq.n	8007f90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	7c12      	ldrb	r2, [r2, #16]
 8007f84:	f107 0108 	add.w	r1, r7, #8
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4798      	blx	r3
 8007f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f8e:	e029      	b.n	8007fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa2d 	bl	80083f2 <USBD_CtlError>
            err++;
 8007f98:	7afb      	ldrb	r3, [r7, #11]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f9e:	e021      	b.n	8007fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00b      	beq.n	8007fc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	7c12      	ldrb	r2, [r2, #16]
 8007fb8:	f107 0108 	add.w	r1, r7, #8
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	4798      	blx	r3
 8007fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fc2:	e00f      	b.n	8007fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa13 	bl	80083f2 <USBD_CtlError>
            err++;
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fd2:	e007      	b.n	8007fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa0b 	bl	80083f2 <USBD_CtlError>
          err++;
 8007fdc:	7afb      	ldrb	r3, [r7, #11]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007fe2:	e038      	b.n	8008056 <USBD_GetDescriptor+0x286>
 8007fe4:	e037      	b.n	8008056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	7c1b      	ldrb	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff6:	f107 0208 	add.w	r2, r7, #8
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	4798      	blx	r3
 8007ffe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008000:	e029      	b.n	8008056 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f9f4 	bl	80083f2 <USBD_CtlError>
        err++;
 800800a:	7afb      	ldrb	r3, [r7, #11]
 800800c:	3301      	adds	r3, #1
 800800e:	72fb      	strb	r3, [r7, #11]
      break;
 8008010:	e021      	b.n	8008056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7c1b      	ldrb	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10d      	bne.n	8008036 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008022:	f107 0208 	add.w	r2, r7, #8
 8008026:	4610      	mov	r0, r2
 8008028:	4798      	blx	r3
 800802a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3301      	adds	r3, #1
 8008030:	2207      	movs	r2, #7
 8008032:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008034:	e00f      	b.n	8008056 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f9da 	bl	80083f2 <USBD_CtlError>
        err++;
 800803e:	7afb      	ldrb	r3, [r7, #11]
 8008040:	3301      	adds	r3, #1
 8008042:	72fb      	strb	r3, [r7, #11]
      break;
 8008044:	e007      	b.n	8008056 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f9d2 	bl	80083f2 <USBD_CtlError>
      err++;
 800804e:	7afb      	ldrb	r3, [r7, #11]
 8008050:	3301      	adds	r3, #1
 8008052:	72fb      	strb	r3, [r7, #11]
      break;
 8008054:	bf00      	nop
  }

  if (err != 0U)
 8008056:	7afb      	ldrb	r3, [r7, #11]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d11c      	bne.n	8008096 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800805c:	893b      	ldrh	r3, [r7, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d011      	beq.n	8008086 <USBD_GetDescriptor+0x2b6>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	88db      	ldrh	r3, [r3, #6]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00d      	beq.n	8008086 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	88da      	ldrh	r2, [r3, #6]
 800806e:	893b      	ldrh	r3, [r7, #8]
 8008070:	4293      	cmp	r3, r2
 8008072:	bf28      	it	cs
 8008074:	4613      	movcs	r3, r2
 8008076:	b29b      	uxth	r3, r3
 8008078:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800807a:	893b      	ldrh	r3, [r7, #8]
 800807c:	461a      	mov	r2, r3
 800807e:	68f9      	ldr	r1, [r7, #12]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fa21 	bl	80084c8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	88db      	ldrh	r3, [r3, #6]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa5a 	bl	8008548 <USBD_CtlSendStatus>
 8008094:	e000      	b.n	8008098 <USBD_GetDescriptor+0x2c8>
    return;
 8008096:	bf00      	nop
    }
  }
}
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop

080080a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	889b      	ldrh	r3, [r3, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d130      	bne.n	8008114 <USBD_SetAddress+0x74>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	88db      	ldrh	r3, [r3, #6]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d12c      	bne.n	8008114 <USBD_SetAddress+0x74>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	885b      	ldrh	r3, [r3, #2]
 80080be:	2b7f      	cmp	r3, #127	@ 0x7f
 80080c0:	d828      	bhi.n	8008114 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	885b      	ldrh	r3, [r3, #2]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d104      	bne.n	80080e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f989 	bl	80083f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e0:	e01d      	b.n	800811e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7bfa      	ldrb	r2, [r7, #15]
 80080e6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fe13 	bl	8008d1a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fa27 	bl	8008548 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008108:	e009      	b.n	800811e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008112:	e004      	b.n	800811e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f96b 	bl	80083f2 <USBD_CtlError>
  }
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	885b      	ldrh	r3, [r3, #2]
 8008136:	b2da      	uxtb	r2, r3
 8008138:	4b41      	ldr	r3, [pc, #260]	@ (8008240 <USBD_SetConfig+0x118>)
 800813a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800813c:	4b40      	ldr	r3, [pc, #256]	@ (8008240 <USBD_SetConfig+0x118>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d904      	bls.n	800814e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f953 	bl	80083f2 <USBD_CtlError>
 800814c:	e075      	b.n	800823a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008154:	2b02      	cmp	r3, #2
 8008156:	d002      	beq.n	800815e <USBD_SetConfig+0x36>
 8008158:	2b03      	cmp	r3, #3
 800815a:	d023      	beq.n	80081a4 <USBD_SetConfig+0x7c>
 800815c:	e062      	b.n	8008224 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800815e:	4b38      	ldr	r3, [pc, #224]	@ (8008240 <USBD_SetConfig+0x118>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01a      	beq.n	800819c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008166:	4b36      	ldr	r3, [pc, #216]	@ (8008240 <USBD_SetConfig+0x118>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2203      	movs	r2, #3
 8008174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008178:	4b31      	ldr	r3, [pc, #196]	@ (8008240 <USBD_SetConfig+0x118>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff f9e5 	bl	800754e <USBD_SetClassConfig>
 8008184:	4603      	mov	r3, r0
 8008186:	2b02      	cmp	r3, #2
 8008188:	d104      	bne.n	8008194 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f930 	bl	80083f2 <USBD_CtlError>
            return;
 8008192:	e052      	b.n	800823a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f9d7 	bl	8008548 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800819a:	e04e      	b.n	800823a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f9d3 	bl	8008548 <USBD_CtlSendStatus>
        break;
 80081a2:	e04a      	b.n	800823a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80081a4:	4b26      	ldr	r3, [pc, #152]	@ (8008240 <USBD_SetConfig+0x118>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d112      	bne.n	80081d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80081b4:	4b22      	ldr	r3, [pc, #136]	@ (8008240 <USBD_SetConfig+0x118>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	461a      	mov	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80081be:	4b20      	ldr	r3, [pc, #128]	@ (8008240 <USBD_SetConfig+0x118>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff f9e1 	bl	800758c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f9bc 	bl	8008548 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80081d0:	e033      	b.n	800823a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80081d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008240 <USBD_SetConfig+0x118>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d01d      	beq.n	800821c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff f9cf 	bl	800758c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80081ee:	4b14      	ldr	r3, [pc, #80]	@ (8008240 <USBD_SetConfig+0x118>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80081f8:	4b11      	ldr	r3, [pc, #68]	@ (8008240 <USBD_SetConfig+0x118>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff f9a5 	bl	800754e <USBD_SetClassConfig>
 8008204:	4603      	mov	r3, r0
 8008206:	2b02      	cmp	r3, #2
 8008208:	d104      	bne.n	8008214 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f8f0 	bl	80083f2 <USBD_CtlError>
            return;
 8008212:	e012      	b.n	800823a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f997 	bl	8008548 <USBD_CtlSendStatus>
        break;
 800821a:	e00e      	b.n	800823a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f993 	bl	8008548 <USBD_CtlSendStatus>
        break;
 8008222:	e00a      	b.n	800823a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f8e3 	bl	80083f2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800822c:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <USBD_SetConfig+0x118>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7ff f9aa 	bl	800758c <USBD_ClrClassConfig>
        break;
 8008238:	bf00      	nop
    }
  }
}
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20000f38 	.word	0x20000f38

08008244 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	88db      	ldrh	r3, [r3, #6]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d004      	beq.n	8008260 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f8ca 	bl	80083f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800825e:	e022      	b.n	80082a6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008266:	2b02      	cmp	r3, #2
 8008268:	dc02      	bgt.n	8008270 <USBD_GetConfig+0x2c>
 800826a:	2b00      	cmp	r3, #0
 800826c:	dc03      	bgt.n	8008276 <USBD_GetConfig+0x32>
 800826e:	e015      	b.n	800829c <USBD_GetConfig+0x58>
 8008270:	2b03      	cmp	r3, #3
 8008272:	d00b      	beq.n	800828c <USBD_GetConfig+0x48>
 8008274:	e012      	b.n	800829c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3308      	adds	r3, #8
 8008280:	2201      	movs	r2, #1
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f91f 	bl	80084c8 <USBD_CtlSendData>
        break;
 800828a:	e00c      	b.n	80082a6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	2201      	movs	r2, #1
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f917 	bl	80084c8 <USBD_CtlSendData>
        break;
 800829a:	e004      	b.n	80082a6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f8a7 	bl	80083f2 <USBD_CtlError>
        break;
 80082a4:	bf00      	nop
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082be:	3b01      	subs	r3, #1
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d81e      	bhi.n	8008302 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	88db      	ldrh	r3, [r3, #6]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d004      	beq.n	80082d6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f88f 	bl	80083f2 <USBD_CtlError>
        break;
 80082d4:	e01a      	b.n	800830c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f043 0202 	orr.w	r2, r3, #2
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	330c      	adds	r3, #12
 80082f6:	2202      	movs	r2, #2
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f8e4 	bl	80084c8 <USBD_CtlSendData>
      break;
 8008300:	e004      	b.n	800830c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f874 	bl	80083f2 <USBD_CtlError>
      break;
 800830a:	bf00      	nop
  }
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	885b      	ldrh	r3, [r3, #2]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d106      	bne.n	8008334 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f90a 	bl	8008548 <USBD_CtlSendStatus>
  }
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834c:	3b01      	subs	r3, #1
 800834e:	2b02      	cmp	r3, #2
 8008350:	d80b      	bhi.n	800836a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	885b      	ldrh	r3, [r3, #2]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d10c      	bne.n	8008374 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f8f0 	bl	8008548 <USBD_CtlSendStatus>
      }
      break;
 8008368:	e004      	b.n	8008374 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f840 	bl	80083f2 <USBD_CtlError>
      break;
 8008372:	e000      	b.n	8008376 <USBD_ClrFeature+0x3a>
      break;
 8008374:	bf00      	nop
  }
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800837e:	b480      	push	{r7}
 8008380:	b083      	sub	sp, #12
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	785a      	ldrb	r2, [r3, #1]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	3302      	adds	r3, #2
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	3303      	adds	r3, #3
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	4413      	add	r3, r2
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	3304      	adds	r3, #4
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	3305      	adds	r3, #5
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	4413      	add	r3, r2
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	3306      	adds	r3, #6
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	3307      	adds	r3, #7
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4413      	add	r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	80da      	strh	r2, [r3, #6]

}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80083fc:	2180      	movs	r1, #128	@ 0x80
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fc21 	bl	8008c46 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008404:	2100      	movs	r1, #0
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fc1d 	bl	8008c46 <USBD_LL_StallEP>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d032      	beq.n	8008490 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 f834 	bl	8008498 <USBD_GetLen>
 8008430:	4603      	mov	r3, r0
 8008432:	3301      	adds	r3, #1
 8008434:	b29b      	uxth	r3, r3
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	75fa      	strb	r2, [r7, #23]
 8008444:	461a      	mov	r2, r3
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	4413      	add	r3, r2
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	7812      	ldrb	r2, [r2, #0]
 800844e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	75fa      	strb	r2, [r7, #23]
 8008456:	461a      	mov	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4413      	add	r3, r2
 800845c:	2203      	movs	r2, #3
 800845e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008460:	e012      	b.n	8008488 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	60fa      	str	r2, [r7, #12]
 8008468:	7dfa      	ldrb	r2, [r7, #23]
 800846a:	1c51      	adds	r1, r2, #1
 800846c:	75f9      	strb	r1, [r7, #23]
 800846e:	4611      	mov	r1, r2
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	440a      	add	r2, r1
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	75fa      	strb	r2, [r7, #23]
 800847e:	461a      	mov	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4413      	add	r3, r2
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e8      	bne.n	8008462 <USBD_GetString+0x4e>
    }
  }
}
 8008490:	bf00      	nop
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80084a4:	e005      	b.n	80084b2 <USBD_GetLen+0x1a>
  {
    len++;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	3301      	adds	r3, #1
 80084aa:	73fb      	strb	r3, [r7, #15]
    buf++;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3301      	adds	r3, #1
 80084b0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1f5      	bne.n	80084a6 <USBD_GetLen+0xe>
  }

  return len;
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4613      	mov	r3, r2
 80084d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2202      	movs	r2, #2
 80084da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80084de:	88fa      	ldrh	r2, [r7, #6]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80084e4:	88fa      	ldrh	r2, [r7, #6]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084ea:	88fb      	ldrh	r3, [r7, #6]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	2100      	movs	r1, #0
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 fc31 	bl	8008d58 <USBD_LL_Transmit>

  return USBD_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800850e:	88fb      	ldrh	r3, [r7, #6]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	2100      	movs	r1, #0
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 fc1f 	bl	8008d58 <USBD_LL_Transmit>

  return USBD_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	2100      	movs	r1, #0
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fc30 	bl	8008d9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2204      	movs	r2, #4
 8008554:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008558:	2300      	movs	r3, #0
 800855a:	2200      	movs	r2, #0
 800855c:	2100      	movs	r1, #0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fbfa 	bl	8008d58 <USBD_LL_Transmit>

  return USBD_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2205      	movs	r2, #5
 800857a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800857e:	2300      	movs	r3, #0
 8008580:	2200      	movs	r2, #0
 8008582:	2100      	movs	r1, #0
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fc0a 	bl	8008d9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008598:	2200      	movs	r2, #0
 800859a:	4912      	ldr	r1, [pc, #72]	@ (80085e4 <MX_USB_DEVICE_Init+0x50>)
 800859c:	4812      	ldr	r0, [pc, #72]	@ (80085e8 <MX_USB_DEVICE_Init+0x54>)
 800859e:	f7fe ff7a 	bl	8007496 <USBD_Init>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085a8:	f7f7 ffe4 	bl	8000574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &passwordManagerClass) != USBD_OK)
 80085ac:	490f      	ldr	r1, [pc, #60]	@ (80085ec <MX_USB_DEVICE_Init+0x58>)
 80085ae:	480e      	ldr	r0, [pc, #56]	@ (80085e8 <MX_USB_DEVICE_Init+0x54>)
 80085b0:	f7fe ff9c 	bl	80074ec <USBD_RegisterClass>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <MX_USB_DEVICE_Init+0x2a>
  // if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
  {
    Error_Handler();
 80085ba:	f7f7 ffdb 	bl	8000574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085be:	490c      	ldr	r1, [pc, #48]	@ (80085f0 <MX_USB_DEVICE_Init+0x5c>)
 80085c0:	4809      	ldr	r0, [pc, #36]	@ (80085e8 <MX_USB_DEVICE_Init+0x54>)
 80085c2:	f7fe fef9 	bl	80073b8 <USBD_CDC_RegisterInterface>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085cc:	f7f7 ffd2 	bl	8000574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085d0:	4805      	ldr	r0, [pc, #20]	@ (80085e8 <MX_USB_DEVICE_Init+0x54>)
 80085d2:	f7fe ffa5 	bl	8007520 <USBD_Start>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085dc:	f7f7 ffca 	bl	8000574 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085e0:	bf00      	nop
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20000c94 	.word	0x20000c94
 80085e8:	20000f3c 	.word	0x20000f3c
 80085ec:	20000040 	.word	0x20000040
 80085f0:	20000c84 	.word	0x20000c84

080085f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085f8:	2200      	movs	r2, #0
 80085fa:	4905      	ldr	r1, [pc, #20]	@ (8008610 <CDC_Init_FS+0x1c>)
 80085fc:	4805      	ldr	r0, [pc, #20]	@ (8008614 <CDC_Init_FS+0x20>)
 80085fe:	f7fe fef2 	bl	80073e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008602:	4905      	ldr	r1, [pc, #20]	@ (8008618 <CDC_Init_FS+0x24>)
 8008604:	4803      	ldr	r0, [pc, #12]	@ (8008614 <CDC_Init_FS+0x20>)
 8008606:	f7fe ff08 	bl	800741a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800860a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800860c:	4618      	mov	r0, r3
 800860e:	bd80      	pop	{r7, pc}
 8008610:	20001600 	.word	0x20001600
 8008614:	20000f3c 	.word	0x20000f3c
 8008618:	20001200 	.word	0x20001200

0800861c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008620:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008622:	4618      	mov	r0, r3
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
 8008638:	4613      	mov	r3, r2
 800863a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	2b23      	cmp	r3, #35	@ 0x23
 8008640:	d84a      	bhi.n	80086d8 <CDC_Control_FS+0xac>
 8008642:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <CDC_Control_FS+0x1c>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	080086d9 	.word	0x080086d9
 800864c:	080086d9 	.word	0x080086d9
 8008650:	080086d9 	.word	0x080086d9
 8008654:	080086d9 	.word	0x080086d9
 8008658:	080086d9 	.word	0x080086d9
 800865c:	080086d9 	.word	0x080086d9
 8008660:	080086d9 	.word	0x080086d9
 8008664:	080086d9 	.word	0x080086d9
 8008668:	080086d9 	.word	0x080086d9
 800866c:	080086d9 	.word	0x080086d9
 8008670:	080086d9 	.word	0x080086d9
 8008674:	080086d9 	.word	0x080086d9
 8008678:	080086d9 	.word	0x080086d9
 800867c:	080086d9 	.word	0x080086d9
 8008680:	080086d9 	.word	0x080086d9
 8008684:	080086d9 	.word	0x080086d9
 8008688:	080086d9 	.word	0x080086d9
 800868c:	080086d9 	.word	0x080086d9
 8008690:	080086d9 	.word	0x080086d9
 8008694:	080086d9 	.word	0x080086d9
 8008698:	080086d9 	.word	0x080086d9
 800869c:	080086d9 	.word	0x080086d9
 80086a0:	080086d9 	.word	0x080086d9
 80086a4:	080086d9 	.word	0x080086d9
 80086a8:	080086d9 	.word	0x080086d9
 80086ac:	080086d9 	.word	0x080086d9
 80086b0:	080086d9 	.word	0x080086d9
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086d9 	.word	0x080086d9
 80086bc:	080086d9 	.word	0x080086d9
 80086c0:	080086d9 	.word	0x080086d9
 80086c4:	080086d9 	.word	0x080086d9
 80086c8:	080086d9 	.word	0x080086d9
 80086cc:	080086d9 	.word	0x080086d9
 80086d0:	080086d9 	.word	0x080086d9
 80086d4:	080086d9 	.word	0x080086d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086d8:	bf00      	nop
  }

  return (USBD_OK);
 80086da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4805      	ldr	r0, [pc, #20]	@ (800870c <CDC_Receive_FS+0x24>)
 80086f6:	f7fe fe90 	bl	800741a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086fa:	4804      	ldr	r0, [pc, #16]	@ (800870c <CDC_Receive_FS+0x24>)
 80086fc:	f7fe fea1 	bl	8007442 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008700:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20000f3c 	.word	0x20000f3c

08008710 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2212      	movs	r2, #18
 8008720:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008722:	4b03      	ldr	r3, [pc, #12]	@ (8008730 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	20000cb0 	.word	0x20000cb0

08008734 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	2204      	movs	r2, #4
 8008744:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008746:	4b03      	ldr	r3, [pc, #12]	@ (8008754 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	20000cc4 	.word	0x20000cc4

08008758 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d105      	bne.n	8008776 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	4907      	ldr	r1, [pc, #28]	@ (800878c <USBD_FS_ProductStrDescriptor+0x34>)
 800876e:	4808      	ldr	r0, [pc, #32]	@ (8008790 <USBD_FS_ProductStrDescriptor+0x38>)
 8008770:	f7ff fe50 	bl	8008414 <USBD_GetString>
 8008774:	e004      	b.n	8008780 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	4904      	ldr	r1, [pc, #16]	@ (800878c <USBD_FS_ProductStrDescriptor+0x34>)
 800877a:	4805      	ldr	r0, [pc, #20]	@ (8008790 <USBD_FS_ProductStrDescriptor+0x38>)
 800877c:	f7ff fe4a 	bl	8008414 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008780:	4b02      	ldr	r3, [pc, #8]	@ (800878c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20001a00 	.word	0x20001a00
 8008790:	0800a3a4 	.word	0x0800a3a4

08008794 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	6039      	str	r1, [r7, #0]
 800879e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	4904      	ldr	r1, [pc, #16]	@ (80087b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087a4:	4804      	ldr	r0, [pc, #16]	@ (80087b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087a6:	f7ff fe35 	bl	8008414 <USBD_GetString>
  return USBD_StrDesc;
 80087aa:	4b02      	ldr	r3, [pc, #8]	@ (80087b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	20001a00 	.word	0x20001a00
 80087b8:	0800a3bc 	.word	0x0800a3bc

080087bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	221a      	movs	r2, #26
 80087cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087ce:	f000 f843 	bl	8008858 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087d2:	4b02      	ldr	r3, [pc, #8]	@ (80087dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20000cc8 	.word	0x20000cc8

080087e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	6039      	str	r1, [r7, #0]
 80087ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d105      	bne.n	80087fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	4907      	ldr	r1, [pc, #28]	@ (8008814 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087f6:	4808      	ldr	r0, [pc, #32]	@ (8008818 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087f8:	f7ff fe0c 	bl	8008414 <USBD_GetString>
 80087fc:	e004      	b.n	8008808 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4904      	ldr	r1, [pc, #16]	@ (8008814 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008802:	4805      	ldr	r0, [pc, #20]	@ (8008818 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008804:	f7ff fe06 	bl	8008414 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008808:	4b02      	ldr	r3, [pc, #8]	@ (8008814 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20001a00 	.word	0x20001a00
 8008818:	0800a3d0 	.word	0x0800a3d0

0800881c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d105      	bne.n	800883a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	4907      	ldr	r1, [pc, #28]	@ (8008850 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008832:	4808      	ldr	r0, [pc, #32]	@ (8008854 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008834:	f7ff fdee 	bl	8008414 <USBD_GetString>
 8008838:	e004      	b.n	8008844 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4904      	ldr	r1, [pc, #16]	@ (8008850 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800883e:	4805      	ldr	r0, [pc, #20]	@ (8008854 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008840:	f7ff fde8 	bl	8008414 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008844:	4b02      	ldr	r3, [pc, #8]	@ (8008850 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20001a00 	.word	0x20001a00
 8008854:	0800a3f0 	.word	0x0800a3f0

08008858 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800885e:	4b0f      	ldr	r3, [pc, #60]	@ (800889c <Get_SerialNum+0x44>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008864:	4b0e      	ldr	r3, [pc, #56]	@ (80088a0 <Get_SerialNum+0x48>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800886a:	4b0e      	ldr	r3, [pc, #56]	@ (80088a4 <Get_SerialNum+0x4c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d009      	beq.n	8008892 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800887e:	2208      	movs	r2, #8
 8008880:	4909      	ldr	r1, [pc, #36]	@ (80088a8 <Get_SerialNum+0x50>)
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 f814 	bl	80088b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008888:	2204      	movs	r2, #4
 800888a:	4908      	ldr	r1, [pc, #32]	@ (80088ac <Get_SerialNum+0x54>)
 800888c:	68b8      	ldr	r0, [r7, #8]
 800888e:	f000 f80f 	bl	80088b0 <IntToUnicode>
  }
}
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	1ffff7ac 	.word	0x1ffff7ac
 80088a0:	1ffff7b0 	.word	0x1ffff7b0
 80088a4:	1ffff7b4 	.word	0x1ffff7b4
 80088a8:	20000cca 	.word	0x20000cca
 80088ac:	20000cda 	.word	0x20000cda

080088b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4613      	mov	r3, r2
 80088bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088c2:	2300      	movs	r3, #0
 80088c4:	75fb      	strb	r3, [r7, #23]
 80088c6:	e027      	b.n	8008918 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	0f1b      	lsrs	r3, r3, #28
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d80b      	bhi.n	80088e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	0f1b      	lsrs	r3, r3, #28
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	4619      	mov	r1, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	440b      	add	r3, r1
 80088e0:	3230      	adds	r2, #48	@ 0x30
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	e00a      	b.n	80088fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	0f1b      	lsrs	r3, r3, #28
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4619      	mov	r1, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	440b      	add	r3, r1
 80088f8:	3237      	adds	r2, #55	@ 0x37
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	3301      	adds	r3, #1
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4413      	add	r3, r2
 800890e:	2200      	movs	r2, #0
 8008910:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	3301      	adds	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]
 8008918:	7dfa      	ldrb	r2, [r7, #23]
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	429a      	cmp	r2, r3
 800891e:	d3d3      	bcc.n	80088c8 <IntToUnicode+0x18>
  }
}
 8008920:	bf00      	nop
 8008922:	bf00      	nop
 8008924:	371c      	adds	r7, #28
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
	...

08008930 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b08a      	sub	sp, #40	@ 0x28
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008938:	f107 0314 	add.w	r3, r7, #20
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	605a      	str	r2, [r3, #4]
 8008942:	609a      	str	r2, [r3, #8]
 8008944:	60da      	str	r2, [r3, #12]
 8008946:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a20      	ldr	r2, [pc, #128]	@ (80089d0 <HAL_PCD_MspInit+0xa0>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d139      	bne.n	80089c6 <HAL_PCD_MspInit+0x96>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008952:	4b20      	ldr	r3, [pc, #128]	@ (80089d4 <HAL_PCD_MspInit+0xa4>)
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	4a1f      	ldr	r2, [pc, #124]	@ (80089d4 <HAL_PCD_MspInit+0xa4>)
 8008958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800895c:	6153      	str	r3, [r2, #20]
 800895e:	4b1d      	ldr	r3, [pc, #116]	@ (80089d4 <HAL_PCD_MspInit+0xa4>)
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008966:	613b      	str	r3, [r7, #16]
 8008968:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800896a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800896e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008970:	2302      	movs	r3, #2
 8008972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008974:	2300      	movs	r3, #0
 8008976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008978:	2303      	movs	r3, #3
 800897a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800897c:	230e      	movs	r3, #14
 800897e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	4619      	mov	r1, r3
 8008986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800898a:	f7f8 ffdb 	bl	8001944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800898e:	4b11      	ldr	r3, [pc, #68]	@ (80089d4 <HAL_PCD_MspInit+0xa4>)
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	4a10      	ldr	r2, [pc, #64]	@ (80089d4 <HAL_PCD_MspInit+0xa4>)
 8008994:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008998:	61d3      	str	r3, [r2, #28]
 800899a:	4b0e      	ldr	r3, [pc, #56]	@ (80089d4 <HAL_PCD_MspInit+0xa4>)
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 80089a6:	2200      	movs	r2, #0
 80089a8:	2100      	movs	r1, #0
 80089aa:	2013      	movs	r0, #19
 80089ac:	f7f8 fdbb 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 80089b0:	2013      	movs	r0, #19
 80089b2:	f7f8 fdd4 	bl	800155e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80089b6:	2200      	movs	r2, #0
 80089b8:	2100      	movs	r1, #0
 80089ba:	2014      	movs	r0, #20
 80089bc:	f7f8 fdb3 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80089c0:	2014      	movs	r0, #20
 80089c2:	f7f8 fdcc 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80089c6:	bf00      	nop
 80089c8:	3728      	adds	r7, #40	@ 0x28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	40005c00 	.word	0x40005c00
 80089d4:	40021000 	.word	0x40021000

080089d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80089ec:	4619      	mov	r1, r3
 80089ee:	4610      	mov	r0, r2
 80089f0:	f7fe fddf 	bl	80075b2 <USBD_LL_SetupStage>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	440b      	add	r3, r1
 8008a1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	4619      	mov	r1, r3
 8008a26:	f7fe fe11 	bl	800764c <USBD_LL_DataOutStage>
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8008a44:	78fa      	ldrb	r2, [r7, #3]
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	440b      	add	r3, r1
 8008a52:	3324      	adds	r3, #36	@ 0x24
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	f7fe fe68 	bl	800772e <USBD_LL_DataInStage>
}
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe ff7b 	bl	8007970 <USBD_LL_SOF>
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	795b      	ldrb	r3, [r3, #5]
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d001      	beq.n	8008a9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a96:	f7f7 fd6d 	bl	8000574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008aa0:	7bfa      	ldrb	r2, [r7, #15]
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe ff28 	bl	80078fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe fee1 	bl	8007878 <USBD_LL_Reset>
}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fe ff23 	bl	800791a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	7a5b      	ldrb	r3, [r3, #9]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008adc:	4b04      	ldr	r3, [pc, #16]	@ (8008af0 <HAL_PCD_SuspendCallback+0x30>)
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	4a03      	ldr	r2, [pc, #12]	@ (8008af0 <HAL_PCD_SuspendCallback+0x30>)
 8008ae2:	f043 0306 	orr.w	r3, r3, #6
 8008ae6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	e000ed00 	.word	0xe000ed00

08008af4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe ff1e 	bl	8007944 <USBD_LL_Resume>
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b18:	4a28      	ldr	r2, [pc, #160]	@ (8008bbc <USBD_LL_Init+0xac>)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a26      	ldr	r2, [pc, #152]	@ (8008bbc <USBD_LL_Init+0xac>)
 8008b24:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008b28:	4b24      	ldr	r3, [pc, #144]	@ (8008bbc <USBD_LL_Init+0xac>)
 8008b2a:	4a25      	ldr	r2, [pc, #148]	@ (8008bc0 <USBD_LL_Init+0xb0>)
 8008b2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b2e:	4b23      	ldr	r3, [pc, #140]	@ (8008bbc <USBD_LL_Init+0xac>)
 8008b30:	2208      	movs	r2, #8
 8008b32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b34:	4b21      	ldr	r3, [pc, #132]	@ (8008bbc <USBD_LL_Init+0xac>)
 8008b36:	2202      	movs	r2, #2
 8008b38:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b3a:	4b20      	ldr	r3, [pc, #128]	@ (8008bbc <USBD_LL_Init+0xac>)
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b40:	4b1e      	ldr	r3, [pc, #120]	@ (8008bbc <USBD_LL_Init+0xac>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b46:	4b1d      	ldr	r3, [pc, #116]	@ (8008bbc <USBD_LL_Init+0xac>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b4c:	481b      	ldr	r0, [pc, #108]	@ (8008bbc <USBD_LL_Init+0xac>)
 8008b4e:	f7f9 f9bd 	bl	8001ecc <HAL_PCD_Init>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008b58:	f7f7 fd0c 	bl	8000574 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b62:	2318      	movs	r3, #24
 8008b64:	2200      	movs	r2, #0
 8008b66:	2100      	movs	r1, #0
 8008b68:	f7fa fdee 	bl	8003748 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b72:	2358      	movs	r3, #88	@ 0x58
 8008b74:	2200      	movs	r2, #0
 8008b76:	2180      	movs	r1, #128	@ 0x80
 8008b78:	f7fa fde6 	bl	8003748 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b82:	23c0      	movs	r3, #192	@ 0xc0
 8008b84:	2200      	movs	r2, #0
 8008b86:	2181      	movs	r1, #129	@ 0x81
 8008b88:	f7fa fdde 	bl	8003748 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b92:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008b96:	2200      	movs	r2, #0
 8008b98:	2101      	movs	r1, #1
 8008b9a:	f7fa fdd5 	bl	8003748 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2182      	movs	r1, #130	@ 0x82
 8008bac:	f7fa fdcc 	bl	8003748 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20001c00 	.word	0x20001c00
 8008bc0:	40005c00 	.word	0x40005c00

08008bc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f9 fa3d 	bl	800205a <HAL_PCD_Start>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f91c 	bl	8008e24 <USBD_Get_USB_Status>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	461a      	mov	r2, r3
 8008c08:	4603      	mov	r3, r0
 8008c0a:	70fb      	strb	r3, [r7, #3]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70bb      	strb	r3, [r7, #2]
 8008c10:	4613      	mov	r3, r2
 8008c12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c22:	78bb      	ldrb	r3, [r7, #2]
 8008c24:	883a      	ldrh	r2, [r7, #0]
 8008c26:	78f9      	ldrb	r1, [r7, #3]
 8008c28:	f7f9 fb35 	bl	8002296 <HAL_PCD_EP_Open>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f8f6 	bl	8008e24 <USBD_Get_USB_Status>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c60:	78fa      	ldrb	r2, [r7, #3]
 8008c62:	4611      	mov	r1, r2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7f9 fbf3 	bl	8002450 <HAL_PCD_EP_SetStall>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f8d7 	bl	8008e24 <USBD_Get_USB_Status>
 8008c76:	4603      	mov	r3, r0
 8008c78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c9e:	78fa      	ldrb	r2, [r7, #3]
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7f9 fc26 	bl	80024f4 <HAL_PCD_EP_ClrStall>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 f8b8 	bl	8008e24 <USBD_Get_USB_Status>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cd4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	da0b      	bge.n	8008cf6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ce4:	68f9      	ldr	r1, [r7, #12]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	440b      	add	r3, r1
 8008cf0:	3312      	adds	r3, #18
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	e00b      	b.n	8008d0e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cfc:	68f9      	ldr	r1, [r7, #12]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	440b      	add	r3, r1
 8008d08:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008d0c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	4611      	mov	r1, r2
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7f9 fa88 	bl	800224e <HAL_PCD_SetAddress>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f86d 	bl	8008e24 <USBD_Get_USB_Status>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	607a      	str	r2, [r7, #4]
 8008d62:	461a      	mov	r2, r3
 8008d64:	460b      	mov	r3, r1
 8008d66:	72fb      	strb	r3, [r7, #11]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008d7a:	893b      	ldrh	r3, [r7, #8]
 8008d7c:	7af9      	ldrb	r1, [r7, #11]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	f7f9 fb2f 	bl	80023e2 <HAL_PCD_EP_Transmit>
 8008d84:	4603      	mov	r3, r0
 8008d86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 f84a 	bl	8008e24 <USBD_Get_USB_Status>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d94:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b086      	sub	sp, #24
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	461a      	mov	r2, r3
 8008daa:	460b      	mov	r3, r1
 8008dac:	72fb      	strb	r3, [r7, #11]
 8008dae:	4613      	mov	r3, r2
 8008db0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008dc0:	893b      	ldrh	r3, [r7, #8]
 8008dc2:	7af9      	ldrb	r1, [r7, #11]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	f7f9 fac3 	bl	8002350 <HAL_PCD_EP_Receive>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f827 	bl	8008e24 <USBD_Get_USB_Status>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dda:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008df6:	78fa      	ldrb	r2, [r7, #3]
 8008df8:	4611      	mov	r1, r2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7f9 fad9 	bl	80023b2 <HAL_PCD_EP_GetRxCount>
 8008e00:	4603      	mov	r3, r0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d817      	bhi.n	8008e68 <USBD_Get_USB_Status+0x44>
 8008e38:	a201      	add	r2, pc, #4	@ (adr r2, 8008e40 <USBD_Get_USB_Status+0x1c>)
 8008e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3e:	bf00      	nop
 8008e40:	08008e51 	.word	0x08008e51
 8008e44:	08008e57 	.word	0x08008e57
 8008e48:	08008e5d 	.word	0x08008e5d
 8008e4c:	08008e63 	.word	0x08008e63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
    break;
 8008e54:	e00b      	b.n	8008e6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e56:	2302      	movs	r3, #2
 8008e58:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5a:	e008      	b.n	8008e6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e60:	e005      	b.n	8008e6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e62:	2302      	movs	r3, #2
 8008e64:	73fb      	strb	r3, [r7, #15]
    break;
 8008e66:	e002      	b.n	8008e6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6c:	bf00      	nop
  }
  return usb_status;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <siprintf>:
 8008e7c:	b40e      	push	{r1, r2, r3}
 8008e7e:	b500      	push	{lr}
 8008e80:	b09c      	sub	sp, #112	@ 0x70
 8008e82:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e84:	9002      	str	r0, [sp, #8]
 8008e86:	9006      	str	r0, [sp, #24]
 8008e88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e8c:	4809      	ldr	r0, [pc, #36]	@ (8008eb4 <siprintf+0x38>)
 8008e8e:	9107      	str	r1, [sp, #28]
 8008e90:	9104      	str	r1, [sp, #16]
 8008e92:	4909      	ldr	r1, [pc, #36]	@ (8008eb8 <siprintf+0x3c>)
 8008e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e98:	9105      	str	r1, [sp, #20]
 8008e9a:	6800      	ldr	r0, [r0, #0]
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	a902      	add	r1, sp, #8
 8008ea0:	f000 f9d6 	bl	8009250 <_svfiprintf_r>
 8008ea4:	9b02      	ldr	r3, [sp, #8]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	b01c      	add	sp, #112	@ 0x70
 8008eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb0:	b003      	add	sp, #12
 8008eb2:	4770      	bx	lr
 8008eb4:	20000ce4 	.word	0x20000ce4
 8008eb8:	ffff0208 	.word	0xffff0208

08008ebc <siscanf>:
 8008ebc:	b40e      	push	{r1, r2, r3}
 8008ebe:	b530      	push	{r4, r5, lr}
 8008ec0:	b09c      	sub	sp, #112	@ 0x70
 8008ec2:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008ec4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008ec8:	f854 5b04 	ldr.w	r5, [r4], #4
 8008ecc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008ed0:	9002      	str	r0, [sp, #8]
 8008ed2:	9006      	str	r0, [sp, #24]
 8008ed4:	f7f7 f97c 	bl	80001d0 <strlen>
 8008ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f08 <siscanf+0x4c>)
 8008eda:	9003      	str	r0, [sp, #12]
 8008edc:	9007      	str	r0, [sp, #28]
 8008ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ee0:	480a      	ldr	r0, [pc, #40]	@ (8008f0c <siscanf+0x50>)
 8008ee2:	9401      	str	r4, [sp, #4]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ee8:	9314      	str	r3, [sp, #80]	@ 0x50
 8008eea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008eee:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	a902      	add	r1, sp, #8
 8008ef8:	6800      	ldr	r0, [r0, #0]
 8008efa:	f000 fafd 	bl	80094f8 <__ssvfiscanf_r>
 8008efe:	b01c      	add	sp, #112	@ 0x70
 8008f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f04:	b003      	add	sp, #12
 8008f06:	4770      	bx	lr
 8008f08:	08008f11 	.word	0x08008f11
 8008f0c:	20000ce4 	.word	0x20000ce4

08008f10 <__seofread>:
 8008f10:	2000      	movs	r0, #0
 8008f12:	4770      	bx	lr

08008f14 <memset>:
 8008f14:	4402      	add	r2, r0
 8008f16:	4603      	mov	r3, r0
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d100      	bne.n	8008f1e <memset+0xa>
 8008f1c:	4770      	bx	lr
 8008f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f22:	e7f9      	b.n	8008f18 <memset+0x4>

08008f24 <__errno>:
 8008f24:	4b01      	ldr	r3, [pc, #4]	@ (8008f2c <__errno+0x8>)
 8008f26:	6818      	ldr	r0, [r3, #0]
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	20000ce4 	.word	0x20000ce4

08008f30 <__libc_init_array>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	4d0d      	ldr	r5, [pc, #52]	@ (8008f68 <__libc_init_array+0x38>)
 8008f34:	4c0d      	ldr	r4, [pc, #52]	@ (8008f6c <__libc_init_array+0x3c>)
 8008f36:	1b64      	subs	r4, r4, r5
 8008f38:	10a4      	asrs	r4, r4, #2
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	42a6      	cmp	r6, r4
 8008f3e:	d109      	bne.n	8008f54 <__libc_init_array+0x24>
 8008f40:	4d0b      	ldr	r5, [pc, #44]	@ (8008f70 <__libc_init_array+0x40>)
 8008f42:	4c0c      	ldr	r4, [pc, #48]	@ (8008f74 <__libc_init_array+0x44>)
 8008f44:	f001 f8e8 	bl	800a118 <_init>
 8008f48:	1b64      	subs	r4, r4, r5
 8008f4a:	10a4      	asrs	r4, r4, #2
 8008f4c:	2600      	movs	r6, #0
 8008f4e:	42a6      	cmp	r6, r4
 8008f50:	d105      	bne.n	8008f5e <__libc_init_array+0x2e>
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f58:	4798      	blx	r3
 8008f5a:	3601      	adds	r6, #1
 8008f5c:	e7ee      	b.n	8008f3c <__libc_init_array+0xc>
 8008f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f62:	4798      	blx	r3
 8008f64:	3601      	adds	r6, #1
 8008f66:	e7f2      	b.n	8008f4e <__libc_init_array+0x1e>
 8008f68:	0800a5a0 	.word	0x0800a5a0
 8008f6c:	0800a5a0 	.word	0x0800a5a0
 8008f70:	0800a5a0 	.word	0x0800a5a0
 8008f74:	0800a5a4 	.word	0x0800a5a4

08008f78 <__retarget_lock_acquire_recursive>:
 8008f78:	4770      	bx	lr

08008f7a <__retarget_lock_release_recursive>:
 8008f7a:	4770      	bx	lr

08008f7c <strcpy>:
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f82:	f803 2b01 	strb.w	r2, [r3], #1
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	d1f9      	bne.n	8008f7e <strcpy+0x2>
 8008f8a:	4770      	bx	lr

08008f8c <memcpy>:
 8008f8c:	440a      	add	r2, r1
 8008f8e:	4291      	cmp	r1, r2
 8008f90:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008f94:	d100      	bne.n	8008f98 <memcpy+0xc>
 8008f96:	4770      	bx	lr
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fa2:	4291      	cmp	r1, r2
 8008fa4:	d1f9      	bne.n	8008f9a <memcpy+0xe>
 8008fa6:	bd10      	pop	{r4, pc}

08008fa8 <_free_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4605      	mov	r5, r0
 8008fac:	2900      	cmp	r1, #0
 8008fae:	d041      	beq.n	8009034 <_free_r+0x8c>
 8008fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fb4:	1f0c      	subs	r4, r1, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	bfb8      	it	lt
 8008fba:	18e4      	addlt	r4, r4, r3
 8008fbc:	f000 f8e0 	bl	8009180 <__malloc_lock>
 8008fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8009038 <_free_r+0x90>)
 8008fc2:	6813      	ldr	r3, [r2, #0]
 8008fc4:	b933      	cbnz	r3, 8008fd4 <_free_r+0x2c>
 8008fc6:	6063      	str	r3, [r4, #4]
 8008fc8:	6014      	str	r4, [r2, #0]
 8008fca:	4628      	mov	r0, r5
 8008fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd0:	f000 b8dc 	b.w	800918c <__malloc_unlock>
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	d908      	bls.n	8008fea <_free_r+0x42>
 8008fd8:	6820      	ldr	r0, [r4, #0]
 8008fda:	1821      	adds	r1, r4, r0
 8008fdc:	428b      	cmp	r3, r1
 8008fde:	bf01      	itttt	eq
 8008fe0:	6819      	ldreq	r1, [r3, #0]
 8008fe2:	685b      	ldreq	r3, [r3, #4]
 8008fe4:	1809      	addeq	r1, r1, r0
 8008fe6:	6021      	streq	r1, [r4, #0]
 8008fe8:	e7ed      	b.n	8008fc6 <_free_r+0x1e>
 8008fea:	461a      	mov	r2, r3
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	b10b      	cbz	r3, 8008ff4 <_free_r+0x4c>
 8008ff0:	42a3      	cmp	r3, r4
 8008ff2:	d9fa      	bls.n	8008fea <_free_r+0x42>
 8008ff4:	6811      	ldr	r1, [r2, #0]
 8008ff6:	1850      	adds	r0, r2, r1
 8008ff8:	42a0      	cmp	r0, r4
 8008ffa:	d10b      	bne.n	8009014 <_free_r+0x6c>
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	4401      	add	r1, r0
 8009000:	1850      	adds	r0, r2, r1
 8009002:	4283      	cmp	r3, r0
 8009004:	6011      	str	r1, [r2, #0]
 8009006:	d1e0      	bne.n	8008fca <_free_r+0x22>
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	6053      	str	r3, [r2, #4]
 800900e:	4408      	add	r0, r1
 8009010:	6010      	str	r0, [r2, #0]
 8009012:	e7da      	b.n	8008fca <_free_r+0x22>
 8009014:	d902      	bls.n	800901c <_free_r+0x74>
 8009016:	230c      	movs	r3, #12
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	e7d6      	b.n	8008fca <_free_r+0x22>
 800901c:	6820      	ldr	r0, [r4, #0]
 800901e:	1821      	adds	r1, r4, r0
 8009020:	428b      	cmp	r3, r1
 8009022:	bf04      	itt	eq
 8009024:	6819      	ldreq	r1, [r3, #0]
 8009026:	685b      	ldreq	r3, [r3, #4]
 8009028:	6063      	str	r3, [r4, #4]
 800902a:	bf04      	itt	eq
 800902c:	1809      	addeq	r1, r1, r0
 800902e:	6021      	streq	r1, [r4, #0]
 8009030:	6054      	str	r4, [r2, #4]
 8009032:	e7ca      	b.n	8008fca <_free_r+0x22>
 8009034:	bd38      	pop	{r3, r4, r5, pc}
 8009036:	bf00      	nop
 8009038:	20002018 	.word	0x20002018

0800903c <sbrk_aligned>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4e0f      	ldr	r6, [pc, #60]	@ (800907c <sbrk_aligned+0x40>)
 8009040:	460c      	mov	r4, r1
 8009042:	6831      	ldr	r1, [r6, #0]
 8009044:	4605      	mov	r5, r0
 8009046:	b911      	cbnz	r1, 800904e <sbrk_aligned+0x12>
 8009048:	f000 ff34 	bl	8009eb4 <_sbrk_r>
 800904c:	6030      	str	r0, [r6, #0]
 800904e:	4621      	mov	r1, r4
 8009050:	4628      	mov	r0, r5
 8009052:	f000 ff2f 	bl	8009eb4 <_sbrk_r>
 8009056:	1c43      	adds	r3, r0, #1
 8009058:	d103      	bne.n	8009062 <sbrk_aligned+0x26>
 800905a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800905e:	4620      	mov	r0, r4
 8009060:	bd70      	pop	{r4, r5, r6, pc}
 8009062:	1cc4      	adds	r4, r0, #3
 8009064:	f024 0403 	bic.w	r4, r4, #3
 8009068:	42a0      	cmp	r0, r4
 800906a:	d0f8      	beq.n	800905e <sbrk_aligned+0x22>
 800906c:	1a21      	subs	r1, r4, r0
 800906e:	4628      	mov	r0, r5
 8009070:	f000 ff20 	bl	8009eb4 <_sbrk_r>
 8009074:	3001      	adds	r0, #1
 8009076:	d1f2      	bne.n	800905e <sbrk_aligned+0x22>
 8009078:	e7ef      	b.n	800905a <sbrk_aligned+0x1e>
 800907a:	bf00      	nop
 800907c:	20002014 	.word	0x20002014

08009080 <_malloc_r>:
 8009080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009084:	1ccd      	adds	r5, r1, #3
 8009086:	f025 0503 	bic.w	r5, r5, #3
 800908a:	3508      	adds	r5, #8
 800908c:	2d0c      	cmp	r5, #12
 800908e:	bf38      	it	cc
 8009090:	250c      	movcc	r5, #12
 8009092:	2d00      	cmp	r5, #0
 8009094:	4606      	mov	r6, r0
 8009096:	db01      	blt.n	800909c <_malloc_r+0x1c>
 8009098:	42a9      	cmp	r1, r5
 800909a:	d904      	bls.n	80090a6 <_malloc_r+0x26>
 800909c:	230c      	movs	r3, #12
 800909e:	6033      	str	r3, [r6, #0]
 80090a0:	2000      	movs	r0, #0
 80090a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800917c <_malloc_r+0xfc>
 80090aa:	f000 f869 	bl	8009180 <__malloc_lock>
 80090ae:	f8d8 3000 	ldr.w	r3, [r8]
 80090b2:	461c      	mov	r4, r3
 80090b4:	bb44      	cbnz	r4, 8009108 <_malloc_r+0x88>
 80090b6:	4629      	mov	r1, r5
 80090b8:	4630      	mov	r0, r6
 80090ba:	f7ff ffbf 	bl	800903c <sbrk_aligned>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	4604      	mov	r4, r0
 80090c2:	d158      	bne.n	8009176 <_malloc_r+0xf6>
 80090c4:	f8d8 4000 	ldr.w	r4, [r8]
 80090c8:	4627      	mov	r7, r4
 80090ca:	2f00      	cmp	r7, #0
 80090cc:	d143      	bne.n	8009156 <_malloc_r+0xd6>
 80090ce:	2c00      	cmp	r4, #0
 80090d0:	d04b      	beq.n	800916a <_malloc_r+0xea>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	4639      	mov	r1, r7
 80090d6:	4630      	mov	r0, r6
 80090d8:	eb04 0903 	add.w	r9, r4, r3
 80090dc:	f000 feea 	bl	8009eb4 <_sbrk_r>
 80090e0:	4581      	cmp	r9, r0
 80090e2:	d142      	bne.n	800916a <_malloc_r+0xea>
 80090e4:	6821      	ldr	r1, [r4, #0]
 80090e6:	1a6d      	subs	r5, r5, r1
 80090e8:	4629      	mov	r1, r5
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7ff ffa6 	bl	800903c <sbrk_aligned>
 80090f0:	3001      	adds	r0, #1
 80090f2:	d03a      	beq.n	800916a <_malloc_r+0xea>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	442b      	add	r3, r5
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	f8d8 3000 	ldr.w	r3, [r8]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	bb62      	cbnz	r2, 800915c <_malloc_r+0xdc>
 8009102:	f8c8 7000 	str.w	r7, [r8]
 8009106:	e00f      	b.n	8009128 <_malloc_r+0xa8>
 8009108:	6822      	ldr	r2, [r4, #0]
 800910a:	1b52      	subs	r2, r2, r5
 800910c:	d420      	bmi.n	8009150 <_malloc_r+0xd0>
 800910e:	2a0b      	cmp	r2, #11
 8009110:	d917      	bls.n	8009142 <_malloc_r+0xc2>
 8009112:	1961      	adds	r1, r4, r5
 8009114:	42a3      	cmp	r3, r4
 8009116:	6025      	str	r5, [r4, #0]
 8009118:	bf18      	it	ne
 800911a:	6059      	strne	r1, [r3, #4]
 800911c:	6863      	ldr	r3, [r4, #4]
 800911e:	bf08      	it	eq
 8009120:	f8c8 1000 	streq.w	r1, [r8]
 8009124:	5162      	str	r2, [r4, r5]
 8009126:	604b      	str	r3, [r1, #4]
 8009128:	4630      	mov	r0, r6
 800912a:	f000 f82f 	bl	800918c <__malloc_unlock>
 800912e:	f104 000b 	add.w	r0, r4, #11
 8009132:	1d23      	adds	r3, r4, #4
 8009134:	f020 0007 	bic.w	r0, r0, #7
 8009138:	1ac2      	subs	r2, r0, r3
 800913a:	bf1c      	itt	ne
 800913c:	1a1b      	subne	r3, r3, r0
 800913e:	50a3      	strne	r3, [r4, r2]
 8009140:	e7af      	b.n	80090a2 <_malloc_r+0x22>
 8009142:	6862      	ldr	r2, [r4, #4]
 8009144:	42a3      	cmp	r3, r4
 8009146:	bf0c      	ite	eq
 8009148:	f8c8 2000 	streq.w	r2, [r8]
 800914c:	605a      	strne	r2, [r3, #4]
 800914e:	e7eb      	b.n	8009128 <_malloc_r+0xa8>
 8009150:	4623      	mov	r3, r4
 8009152:	6864      	ldr	r4, [r4, #4]
 8009154:	e7ae      	b.n	80090b4 <_malloc_r+0x34>
 8009156:	463c      	mov	r4, r7
 8009158:	687f      	ldr	r7, [r7, #4]
 800915a:	e7b6      	b.n	80090ca <_malloc_r+0x4a>
 800915c:	461a      	mov	r2, r3
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	42a3      	cmp	r3, r4
 8009162:	d1fb      	bne.n	800915c <_malloc_r+0xdc>
 8009164:	2300      	movs	r3, #0
 8009166:	6053      	str	r3, [r2, #4]
 8009168:	e7de      	b.n	8009128 <_malloc_r+0xa8>
 800916a:	230c      	movs	r3, #12
 800916c:	6033      	str	r3, [r6, #0]
 800916e:	4630      	mov	r0, r6
 8009170:	f000 f80c 	bl	800918c <__malloc_unlock>
 8009174:	e794      	b.n	80090a0 <_malloc_r+0x20>
 8009176:	6005      	str	r5, [r0, #0]
 8009178:	e7d6      	b.n	8009128 <_malloc_r+0xa8>
 800917a:	bf00      	nop
 800917c:	20002018 	.word	0x20002018

08009180 <__malloc_lock>:
 8009180:	4801      	ldr	r0, [pc, #4]	@ (8009188 <__malloc_lock+0x8>)
 8009182:	f7ff bef9 	b.w	8008f78 <__retarget_lock_acquire_recursive>
 8009186:	bf00      	nop
 8009188:	20002010 	.word	0x20002010

0800918c <__malloc_unlock>:
 800918c:	4801      	ldr	r0, [pc, #4]	@ (8009194 <__malloc_unlock+0x8>)
 800918e:	f7ff bef4 	b.w	8008f7a <__retarget_lock_release_recursive>
 8009192:	bf00      	nop
 8009194:	20002010 	.word	0x20002010

08009198 <__ssputs_r>:
 8009198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	688e      	ldr	r6, [r1, #8]
 800919e:	461f      	mov	r7, r3
 80091a0:	42be      	cmp	r6, r7
 80091a2:	680b      	ldr	r3, [r1, #0]
 80091a4:	4682      	mov	sl, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	4690      	mov	r8, r2
 80091aa:	d82d      	bhi.n	8009208 <__ssputs_r+0x70>
 80091ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091b4:	d026      	beq.n	8009204 <__ssputs_r+0x6c>
 80091b6:	6965      	ldr	r5, [r4, #20]
 80091b8:	6909      	ldr	r1, [r1, #16]
 80091ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091be:	eba3 0901 	sub.w	r9, r3, r1
 80091c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091c6:	1c7b      	adds	r3, r7, #1
 80091c8:	444b      	add	r3, r9
 80091ca:	106d      	asrs	r5, r5, #1
 80091cc:	429d      	cmp	r5, r3
 80091ce:	bf38      	it	cc
 80091d0:	461d      	movcc	r5, r3
 80091d2:	0553      	lsls	r3, r2, #21
 80091d4:	d527      	bpl.n	8009226 <__ssputs_r+0x8e>
 80091d6:	4629      	mov	r1, r5
 80091d8:	f7ff ff52 	bl	8009080 <_malloc_r>
 80091dc:	4606      	mov	r6, r0
 80091de:	b360      	cbz	r0, 800923a <__ssputs_r+0xa2>
 80091e0:	6921      	ldr	r1, [r4, #16]
 80091e2:	464a      	mov	r2, r9
 80091e4:	f7ff fed2 	bl	8008f8c <memcpy>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	6126      	str	r6, [r4, #16]
 80091f6:	6165      	str	r5, [r4, #20]
 80091f8:	444e      	add	r6, r9
 80091fa:	eba5 0509 	sub.w	r5, r5, r9
 80091fe:	6026      	str	r6, [r4, #0]
 8009200:	60a5      	str	r5, [r4, #8]
 8009202:	463e      	mov	r6, r7
 8009204:	42be      	cmp	r6, r7
 8009206:	d900      	bls.n	800920a <__ssputs_r+0x72>
 8009208:	463e      	mov	r6, r7
 800920a:	6820      	ldr	r0, [r4, #0]
 800920c:	4632      	mov	r2, r6
 800920e:	4641      	mov	r1, r8
 8009210:	f000 fe35 	bl	8009e7e <memmove>
 8009214:	68a3      	ldr	r3, [r4, #8]
 8009216:	1b9b      	subs	r3, r3, r6
 8009218:	60a3      	str	r3, [r4, #8]
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	4433      	add	r3, r6
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	2000      	movs	r0, #0
 8009222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009226:	462a      	mov	r2, r5
 8009228:	f000 fe54 	bl	8009ed4 <_realloc_r>
 800922c:	4606      	mov	r6, r0
 800922e:	2800      	cmp	r0, #0
 8009230:	d1e0      	bne.n	80091f4 <__ssputs_r+0x5c>
 8009232:	6921      	ldr	r1, [r4, #16]
 8009234:	4650      	mov	r0, sl
 8009236:	f7ff feb7 	bl	8008fa8 <_free_r>
 800923a:	230c      	movs	r3, #12
 800923c:	f8ca 3000 	str.w	r3, [sl]
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009246:	81a3      	strh	r3, [r4, #12]
 8009248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800924c:	e7e9      	b.n	8009222 <__ssputs_r+0x8a>
	...

08009250 <_svfiprintf_r>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	4698      	mov	r8, r3
 8009256:	898b      	ldrh	r3, [r1, #12]
 8009258:	061b      	lsls	r3, r3, #24
 800925a:	b09d      	sub	sp, #116	@ 0x74
 800925c:	4607      	mov	r7, r0
 800925e:	460d      	mov	r5, r1
 8009260:	4614      	mov	r4, r2
 8009262:	d510      	bpl.n	8009286 <_svfiprintf_r+0x36>
 8009264:	690b      	ldr	r3, [r1, #16]
 8009266:	b973      	cbnz	r3, 8009286 <_svfiprintf_r+0x36>
 8009268:	2140      	movs	r1, #64	@ 0x40
 800926a:	f7ff ff09 	bl	8009080 <_malloc_r>
 800926e:	6028      	str	r0, [r5, #0]
 8009270:	6128      	str	r0, [r5, #16]
 8009272:	b930      	cbnz	r0, 8009282 <_svfiprintf_r+0x32>
 8009274:	230c      	movs	r3, #12
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800927c:	b01d      	add	sp, #116	@ 0x74
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009282:	2340      	movs	r3, #64	@ 0x40
 8009284:	616b      	str	r3, [r5, #20]
 8009286:	2300      	movs	r3, #0
 8009288:	9309      	str	r3, [sp, #36]	@ 0x24
 800928a:	2320      	movs	r3, #32
 800928c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009290:	f8cd 800c 	str.w	r8, [sp, #12]
 8009294:	2330      	movs	r3, #48	@ 0x30
 8009296:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009434 <_svfiprintf_r+0x1e4>
 800929a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800929e:	f04f 0901 	mov.w	r9, #1
 80092a2:	4623      	mov	r3, r4
 80092a4:	469a      	mov	sl, r3
 80092a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092aa:	b10a      	cbz	r2, 80092b0 <_svfiprintf_r+0x60>
 80092ac:	2a25      	cmp	r2, #37	@ 0x25
 80092ae:	d1f9      	bne.n	80092a4 <_svfiprintf_r+0x54>
 80092b0:	ebba 0b04 	subs.w	fp, sl, r4
 80092b4:	d00b      	beq.n	80092ce <_svfiprintf_r+0x7e>
 80092b6:	465b      	mov	r3, fp
 80092b8:	4622      	mov	r2, r4
 80092ba:	4629      	mov	r1, r5
 80092bc:	4638      	mov	r0, r7
 80092be:	f7ff ff6b 	bl	8009198 <__ssputs_r>
 80092c2:	3001      	adds	r0, #1
 80092c4:	f000 80a7 	beq.w	8009416 <_svfiprintf_r+0x1c6>
 80092c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092ca:	445a      	add	r2, fp
 80092cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80092ce:	f89a 3000 	ldrb.w	r3, [sl]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 809f 	beq.w	8009416 <_svfiprintf_r+0x1c6>
 80092d8:	2300      	movs	r3, #0
 80092da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e2:	f10a 0a01 	add.w	sl, sl, #1
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	9307      	str	r3, [sp, #28]
 80092ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80092f0:	4654      	mov	r4, sl
 80092f2:	2205      	movs	r2, #5
 80092f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f8:	484e      	ldr	r0, [pc, #312]	@ (8009434 <_svfiprintf_r+0x1e4>)
 80092fa:	f7f6 ff71 	bl	80001e0 <memchr>
 80092fe:	9a04      	ldr	r2, [sp, #16]
 8009300:	b9d8      	cbnz	r0, 800933a <_svfiprintf_r+0xea>
 8009302:	06d0      	lsls	r0, r2, #27
 8009304:	bf44      	itt	mi
 8009306:	2320      	movmi	r3, #32
 8009308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800930c:	0711      	lsls	r1, r2, #28
 800930e:	bf44      	itt	mi
 8009310:	232b      	movmi	r3, #43	@ 0x2b
 8009312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009316:	f89a 3000 	ldrb.w	r3, [sl]
 800931a:	2b2a      	cmp	r3, #42	@ 0x2a
 800931c:	d015      	beq.n	800934a <_svfiprintf_r+0xfa>
 800931e:	9a07      	ldr	r2, [sp, #28]
 8009320:	4654      	mov	r4, sl
 8009322:	2000      	movs	r0, #0
 8009324:	f04f 0c0a 	mov.w	ip, #10
 8009328:	4621      	mov	r1, r4
 800932a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800932e:	3b30      	subs	r3, #48	@ 0x30
 8009330:	2b09      	cmp	r3, #9
 8009332:	d94b      	bls.n	80093cc <_svfiprintf_r+0x17c>
 8009334:	b1b0      	cbz	r0, 8009364 <_svfiprintf_r+0x114>
 8009336:	9207      	str	r2, [sp, #28]
 8009338:	e014      	b.n	8009364 <_svfiprintf_r+0x114>
 800933a:	eba0 0308 	sub.w	r3, r0, r8
 800933e:	fa09 f303 	lsl.w	r3, r9, r3
 8009342:	4313      	orrs	r3, r2
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	46a2      	mov	sl, r4
 8009348:	e7d2      	b.n	80092f0 <_svfiprintf_r+0xa0>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	1d19      	adds	r1, r3, #4
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	9103      	str	r1, [sp, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfbb      	ittet	lt
 8009356:	425b      	neglt	r3, r3
 8009358:	f042 0202 	orrlt.w	r2, r2, #2
 800935c:	9307      	strge	r3, [sp, #28]
 800935e:	9307      	strlt	r3, [sp, #28]
 8009360:	bfb8      	it	lt
 8009362:	9204      	strlt	r2, [sp, #16]
 8009364:	7823      	ldrb	r3, [r4, #0]
 8009366:	2b2e      	cmp	r3, #46	@ 0x2e
 8009368:	d10a      	bne.n	8009380 <_svfiprintf_r+0x130>
 800936a:	7863      	ldrb	r3, [r4, #1]
 800936c:	2b2a      	cmp	r3, #42	@ 0x2a
 800936e:	d132      	bne.n	80093d6 <_svfiprintf_r+0x186>
 8009370:	9b03      	ldr	r3, [sp, #12]
 8009372:	1d1a      	adds	r2, r3, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	9203      	str	r2, [sp, #12]
 8009378:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800937c:	3402      	adds	r4, #2
 800937e:	9305      	str	r3, [sp, #20]
 8009380:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009444 <_svfiprintf_r+0x1f4>
 8009384:	7821      	ldrb	r1, [r4, #0]
 8009386:	2203      	movs	r2, #3
 8009388:	4650      	mov	r0, sl
 800938a:	f7f6 ff29 	bl	80001e0 <memchr>
 800938e:	b138      	cbz	r0, 80093a0 <_svfiprintf_r+0x150>
 8009390:	9b04      	ldr	r3, [sp, #16]
 8009392:	eba0 000a 	sub.w	r0, r0, sl
 8009396:	2240      	movs	r2, #64	@ 0x40
 8009398:	4082      	lsls	r2, r0
 800939a:	4313      	orrs	r3, r2
 800939c:	3401      	adds	r4, #1
 800939e:	9304      	str	r3, [sp, #16]
 80093a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a4:	4824      	ldr	r0, [pc, #144]	@ (8009438 <_svfiprintf_r+0x1e8>)
 80093a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093aa:	2206      	movs	r2, #6
 80093ac:	f7f6 ff18 	bl	80001e0 <memchr>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d036      	beq.n	8009422 <_svfiprintf_r+0x1d2>
 80093b4:	4b21      	ldr	r3, [pc, #132]	@ (800943c <_svfiprintf_r+0x1ec>)
 80093b6:	bb1b      	cbnz	r3, 8009400 <_svfiprintf_r+0x1b0>
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	3307      	adds	r3, #7
 80093bc:	f023 0307 	bic.w	r3, r3, #7
 80093c0:	3308      	adds	r3, #8
 80093c2:	9303      	str	r3, [sp, #12]
 80093c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c6:	4433      	add	r3, r6
 80093c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ca:	e76a      	b.n	80092a2 <_svfiprintf_r+0x52>
 80093cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d0:	460c      	mov	r4, r1
 80093d2:	2001      	movs	r0, #1
 80093d4:	e7a8      	b.n	8009328 <_svfiprintf_r+0xd8>
 80093d6:	2300      	movs	r3, #0
 80093d8:	3401      	adds	r4, #1
 80093da:	9305      	str	r3, [sp, #20]
 80093dc:	4619      	mov	r1, r3
 80093de:	f04f 0c0a 	mov.w	ip, #10
 80093e2:	4620      	mov	r0, r4
 80093e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093e8:	3a30      	subs	r2, #48	@ 0x30
 80093ea:	2a09      	cmp	r2, #9
 80093ec:	d903      	bls.n	80093f6 <_svfiprintf_r+0x1a6>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0c6      	beq.n	8009380 <_svfiprintf_r+0x130>
 80093f2:	9105      	str	r1, [sp, #20]
 80093f4:	e7c4      	b.n	8009380 <_svfiprintf_r+0x130>
 80093f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80093fa:	4604      	mov	r4, r0
 80093fc:	2301      	movs	r3, #1
 80093fe:	e7f0      	b.n	80093e2 <_svfiprintf_r+0x192>
 8009400:	ab03      	add	r3, sp, #12
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	462a      	mov	r2, r5
 8009406:	4b0e      	ldr	r3, [pc, #56]	@ (8009440 <_svfiprintf_r+0x1f0>)
 8009408:	a904      	add	r1, sp, #16
 800940a:	4638      	mov	r0, r7
 800940c:	f3af 8000 	nop.w
 8009410:	1c42      	adds	r2, r0, #1
 8009412:	4606      	mov	r6, r0
 8009414:	d1d6      	bne.n	80093c4 <_svfiprintf_r+0x174>
 8009416:	89ab      	ldrh	r3, [r5, #12]
 8009418:	065b      	lsls	r3, r3, #25
 800941a:	f53f af2d 	bmi.w	8009278 <_svfiprintf_r+0x28>
 800941e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009420:	e72c      	b.n	800927c <_svfiprintf_r+0x2c>
 8009422:	ab03      	add	r3, sp, #12
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	462a      	mov	r2, r5
 8009428:	4b05      	ldr	r3, [pc, #20]	@ (8009440 <_svfiprintf_r+0x1f0>)
 800942a:	a904      	add	r1, sp, #16
 800942c:	4638      	mov	r0, r7
 800942e:	f000 fa45 	bl	80098bc <_printf_i>
 8009432:	e7ed      	b.n	8009410 <_svfiprintf_r+0x1c0>
 8009434:	0800a448 	.word	0x0800a448
 8009438:	0800a452 	.word	0x0800a452
 800943c:	00000000 	.word	0x00000000
 8009440:	08009199 	.word	0x08009199
 8009444:	0800a44e 	.word	0x0800a44e

08009448 <_sungetc_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	1c4b      	adds	r3, r1, #1
 800944c:	4614      	mov	r4, r2
 800944e:	d103      	bne.n	8009458 <_sungetc_r+0x10>
 8009450:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009454:	4628      	mov	r0, r5
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	8993      	ldrh	r3, [r2, #12]
 800945a:	f023 0320 	bic.w	r3, r3, #32
 800945e:	8193      	strh	r3, [r2, #12]
 8009460:	6853      	ldr	r3, [r2, #4]
 8009462:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009464:	b2cd      	uxtb	r5, r1
 8009466:	b18a      	cbz	r2, 800948c <_sungetc_r+0x44>
 8009468:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800946a:	429a      	cmp	r2, r3
 800946c:	dd08      	ble.n	8009480 <_sungetc_r+0x38>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	1e5a      	subs	r2, r3, #1
 8009472:	6022      	str	r2, [r4, #0]
 8009474:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009478:	6863      	ldr	r3, [r4, #4]
 800947a:	3301      	adds	r3, #1
 800947c:	6063      	str	r3, [r4, #4]
 800947e:	e7e9      	b.n	8009454 <_sungetc_r+0xc>
 8009480:	4621      	mov	r1, r4
 8009482:	f000 fcc2 	bl	8009e0a <__submore>
 8009486:	2800      	cmp	r0, #0
 8009488:	d0f1      	beq.n	800946e <_sungetc_r+0x26>
 800948a:	e7e1      	b.n	8009450 <_sungetc_r+0x8>
 800948c:	6921      	ldr	r1, [r4, #16]
 800948e:	6822      	ldr	r2, [r4, #0]
 8009490:	b141      	cbz	r1, 80094a4 <_sungetc_r+0x5c>
 8009492:	4291      	cmp	r1, r2
 8009494:	d206      	bcs.n	80094a4 <_sungetc_r+0x5c>
 8009496:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800949a:	42a9      	cmp	r1, r5
 800949c:	d102      	bne.n	80094a4 <_sungetc_r+0x5c>
 800949e:	3a01      	subs	r2, #1
 80094a0:	6022      	str	r2, [r4, #0]
 80094a2:	e7ea      	b.n	800947a <_sungetc_r+0x32>
 80094a4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80094a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80094ae:	2303      	movs	r3, #3
 80094b0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80094b2:	4623      	mov	r3, r4
 80094b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	2301      	movs	r3, #1
 80094bc:	e7de      	b.n	800947c <_sungetc_r+0x34>

080094be <__ssrefill_r>:
 80094be:	b510      	push	{r4, lr}
 80094c0:	460c      	mov	r4, r1
 80094c2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80094c4:	b169      	cbz	r1, 80094e2 <__ssrefill_r+0x24>
 80094c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094ca:	4299      	cmp	r1, r3
 80094cc:	d001      	beq.n	80094d2 <__ssrefill_r+0x14>
 80094ce:	f7ff fd6b 	bl	8008fa8 <_free_r>
 80094d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094d4:	6063      	str	r3, [r4, #4]
 80094d6:	2000      	movs	r0, #0
 80094d8:	6360      	str	r0, [r4, #52]	@ 0x34
 80094da:	b113      	cbz	r3, 80094e2 <__ssrefill_r+0x24>
 80094dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80094de:	6023      	str	r3, [r4, #0]
 80094e0:	bd10      	pop	{r4, pc}
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	2300      	movs	r3, #0
 80094e8:	6063      	str	r3, [r4, #4]
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f043 0320 	orr.w	r3, r3, #32
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094f6:	e7f3      	b.n	80094e0 <__ssrefill_r+0x22>

080094f8 <__ssvfiscanf_r>:
 80094f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	460c      	mov	r4, r1
 80094fe:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009502:	2100      	movs	r1, #0
 8009504:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009508:	49a5      	ldr	r1, [pc, #660]	@ (80097a0 <__ssvfiscanf_r+0x2a8>)
 800950a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800950c:	f10d 0804 	add.w	r8, sp, #4
 8009510:	49a4      	ldr	r1, [pc, #656]	@ (80097a4 <__ssvfiscanf_r+0x2ac>)
 8009512:	4fa5      	ldr	r7, [pc, #660]	@ (80097a8 <__ssvfiscanf_r+0x2b0>)
 8009514:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009518:	4606      	mov	r6, r0
 800951a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	7813      	ldrb	r3, [r2, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8158 	beq.w	80097d6 <__ssvfiscanf_r+0x2de>
 8009526:	5cf9      	ldrb	r1, [r7, r3]
 8009528:	f011 0108 	ands.w	r1, r1, #8
 800952c:	f102 0501 	add.w	r5, r2, #1
 8009530:	d019      	beq.n	8009566 <__ssvfiscanf_r+0x6e>
 8009532:	6863      	ldr	r3, [r4, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dd0f      	ble.n	8009558 <__ssvfiscanf_r+0x60>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	5cba      	ldrb	r2, [r7, r2]
 800953e:	0712      	lsls	r2, r2, #28
 8009540:	d401      	bmi.n	8009546 <__ssvfiscanf_r+0x4e>
 8009542:	462a      	mov	r2, r5
 8009544:	e7eb      	b.n	800951e <__ssvfiscanf_r+0x26>
 8009546:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009548:	3201      	adds	r2, #1
 800954a:	9245      	str	r2, [sp, #276]	@ 0x114
 800954c:	6862      	ldr	r2, [r4, #4]
 800954e:	3301      	adds	r3, #1
 8009550:	3a01      	subs	r2, #1
 8009552:	6062      	str	r2, [r4, #4]
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	e7ec      	b.n	8009532 <__ssvfiscanf_r+0x3a>
 8009558:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800955a:	4621      	mov	r1, r4
 800955c:	4630      	mov	r0, r6
 800955e:	4798      	blx	r3
 8009560:	2800      	cmp	r0, #0
 8009562:	d0e9      	beq.n	8009538 <__ssvfiscanf_r+0x40>
 8009564:	e7ed      	b.n	8009542 <__ssvfiscanf_r+0x4a>
 8009566:	2b25      	cmp	r3, #37	@ 0x25
 8009568:	d012      	beq.n	8009590 <__ssvfiscanf_r+0x98>
 800956a:	4699      	mov	r9, r3
 800956c:	6863      	ldr	r3, [r4, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f340 8093 	ble.w	800969a <__ssvfiscanf_r+0x1a2>
 8009574:	6822      	ldr	r2, [r4, #0]
 8009576:	7813      	ldrb	r3, [r2, #0]
 8009578:	454b      	cmp	r3, r9
 800957a:	f040 812c 	bne.w	80097d6 <__ssvfiscanf_r+0x2de>
 800957e:	6863      	ldr	r3, [r4, #4]
 8009580:	3b01      	subs	r3, #1
 8009582:	6063      	str	r3, [r4, #4]
 8009584:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009586:	3201      	adds	r2, #1
 8009588:	3301      	adds	r3, #1
 800958a:	6022      	str	r2, [r4, #0]
 800958c:	9345      	str	r3, [sp, #276]	@ 0x114
 800958e:	e7d8      	b.n	8009542 <__ssvfiscanf_r+0x4a>
 8009590:	9141      	str	r1, [sp, #260]	@ 0x104
 8009592:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009594:	7853      	ldrb	r3, [r2, #1]
 8009596:	2b2a      	cmp	r3, #42	@ 0x2a
 8009598:	bf02      	ittt	eq
 800959a:	2310      	moveq	r3, #16
 800959c:	1c95      	addeq	r5, r2, #2
 800959e:	9341      	streq	r3, [sp, #260]	@ 0x104
 80095a0:	220a      	movs	r2, #10
 80095a2:	46a9      	mov	r9, r5
 80095a4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80095a8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80095ac:	2b09      	cmp	r3, #9
 80095ae:	d91e      	bls.n	80095ee <__ssvfiscanf_r+0xf6>
 80095b0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80097ac <__ssvfiscanf_r+0x2b4>
 80095b4:	2203      	movs	r2, #3
 80095b6:	4650      	mov	r0, sl
 80095b8:	f7f6 fe12 	bl	80001e0 <memchr>
 80095bc:	b138      	cbz	r0, 80095ce <__ssvfiscanf_r+0xd6>
 80095be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80095c0:	eba0 000a 	sub.w	r0, r0, sl
 80095c4:	2301      	movs	r3, #1
 80095c6:	4083      	lsls	r3, r0
 80095c8:	4313      	orrs	r3, r2
 80095ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80095cc:	464d      	mov	r5, r9
 80095ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095d2:	2b78      	cmp	r3, #120	@ 0x78
 80095d4:	d806      	bhi.n	80095e4 <__ssvfiscanf_r+0xec>
 80095d6:	2b57      	cmp	r3, #87	@ 0x57
 80095d8:	d810      	bhi.n	80095fc <__ssvfiscanf_r+0x104>
 80095da:	2b25      	cmp	r3, #37	@ 0x25
 80095dc:	d0c5      	beq.n	800956a <__ssvfiscanf_r+0x72>
 80095de:	d857      	bhi.n	8009690 <__ssvfiscanf_r+0x198>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d065      	beq.n	80096b0 <__ssvfiscanf_r+0x1b8>
 80095e4:	2303      	movs	r3, #3
 80095e6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80095e8:	230a      	movs	r3, #10
 80095ea:	9342      	str	r3, [sp, #264]	@ 0x108
 80095ec:	e078      	b.n	80096e0 <__ssvfiscanf_r+0x1e8>
 80095ee:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80095f0:	fb02 1103 	mla	r1, r2, r3, r1
 80095f4:	3930      	subs	r1, #48	@ 0x30
 80095f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80095f8:	464d      	mov	r5, r9
 80095fa:	e7d2      	b.n	80095a2 <__ssvfiscanf_r+0xaa>
 80095fc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009600:	2a20      	cmp	r2, #32
 8009602:	d8ef      	bhi.n	80095e4 <__ssvfiscanf_r+0xec>
 8009604:	a101      	add	r1, pc, #4	@ (adr r1, 800960c <__ssvfiscanf_r+0x114>)
 8009606:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800960a:	bf00      	nop
 800960c:	080096bf 	.word	0x080096bf
 8009610:	080095e5 	.word	0x080095e5
 8009614:	080095e5 	.word	0x080095e5
 8009618:	08009719 	.word	0x08009719
 800961c:	080095e5 	.word	0x080095e5
 8009620:	080095e5 	.word	0x080095e5
 8009624:	080095e5 	.word	0x080095e5
 8009628:	080095e5 	.word	0x080095e5
 800962c:	080095e5 	.word	0x080095e5
 8009630:	080095e5 	.word	0x080095e5
 8009634:	080095e5 	.word	0x080095e5
 8009638:	0800972f 	.word	0x0800972f
 800963c:	08009715 	.word	0x08009715
 8009640:	08009697 	.word	0x08009697
 8009644:	08009697 	.word	0x08009697
 8009648:	08009697 	.word	0x08009697
 800964c:	080095e5 	.word	0x080095e5
 8009650:	080096d1 	.word	0x080096d1
 8009654:	080095e5 	.word	0x080095e5
 8009658:	080095e5 	.word	0x080095e5
 800965c:	080095e5 	.word	0x080095e5
 8009660:	080095e5 	.word	0x080095e5
 8009664:	0800973f 	.word	0x0800973f
 8009668:	080096d9 	.word	0x080096d9
 800966c:	080096b7 	.word	0x080096b7
 8009670:	080095e5 	.word	0x080095e5
 8009674:	080095e5 	.word	0x080095e5
 8009678:	0800973b 	.word	0x0800973b
 800967c:	080095e5 	.word	0x080095e5
 8009680:	08009715 	.word	0x08009715
 8009684:	080095e5 	.word	0x080095e5
 8009688:	080095e5 	.word	0x080095e5
 800968c:	080096bf 	.word	0x080096bf
 8009690:	3b45      	subs	r3, #69	@ 0x45
 8009692:	2b02      	cmp	r3, #2
 8009694:	d8a6      	bhi.n	80095e4 <__ssvfiscanf_r+0xec>
 8009696:	2305      	movs	r3, #5
 8009698:	e021      	b.n	80096de <__ssvfiscanf_r+0x1e6>
 800969a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800969c:	4621      	mov	r1, r4
 800969e:	4630      	mov	r0, r6
 80096a0:	4798      	blx	r3
 80096a2:	2800      	cmp	r0, #0
 80096a4:	f43f af66 	beq.w	8009574 <__ssvfiscanf_r+0x7c>
 80096a8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80096aa:	2800      	cmp	r0, #0
 80096ac:	f040 808b 	bne.w	80097c6 <__ssvfiscanf_r+0x2ce>
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096b4:	e08b      	b.n	80097ce <__ssvfiscanf_r+0x2d6>
 80096b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80096b8:	f042 0220 	orr.w	r2, r2, #32
 80096bc:	9241      	str	r2, [sp, #260]	@ 0x104
 80096be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80096c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096c4:	9241      	str	r2, [sp, #260]	@ 0x104
 80096c6:	2210      	movs	r2, #16
 80096c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80096ca:	9242      	str	r2, [sp, #264]	@ 0x108
 80096cc:	d902      	bls.n	80096d4 <__ssvfiscanf_r+0x1dc>
 80096ce:	e005      	b.n	80096dc <__ssvfiscanf_r+0x1e4>
 80096d0:	2300      	movs	r3, #0
 80096d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80096d4:	2303      	movs	r3, #3
 80096d6:	e002      	b.n	80096de <__ssvfiscanf_r+0x1e6>
 80096d8:	2308      	movs	r3, #8
 80096da:	9342      	str	r3, [sp, #264]	@ 0x108
 80096dc:	2304      	movs	r3, #4
 80096de:	9347      	str	r3, [sp, #284]	@ 0x11c
 80096e0:	6863      	ldr	r3, [r4, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	dd39      	ble.n	800975a <__ssvfiscanf_r+0x262>
 80096e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80096e8:	0659      	lsls	r1, r3, #25
 80096ea:	d404      	bmi.n	80096f6 <__ssvfiscanf_r+0x1fe>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	781a      	ldrb	r2, [r3, #0]
 80096f0:	5cba      	ldrb	r2, [r7, r2]
 80096f2:	0712      	lsls	r2, r2, #28
 80096f4:	d438      	bmi.n	8009768 <__ssvfiscanf_r+0x270>
 80096f6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	dc47      	bgt.n	800978c <__ssvfiscanf_r+0x294>
 80096fc:	466b      	mov	r3, sp
 80096fe:	4622      	mov	r2, r4
 8009700:	a941      	add	r1, sp, #260	@ 0x104
 8009702:	4630      	mov	r0, r6
 8009704:	f000 f9fa 	bl	8009afc <_scanf_chars>
 8009708:	2801      	cmp	r0, #1
 800970a:	d064      	beq.n	80097d6 <__ssvfiscanf_r+0x2de>
 800970c:	2802      	cmp	r0, #2
 800970e:	f47f af18 	bne.w	8009542 <__ssvfiscanf_r+0x4a>
 8009712:	e7c9      	b.n	80096a8 <__ssvfiscanf_r+0x1b0>
 8009714:	220a      	movs	r2, #10
 8009716:	e7d7      	b.n	80096c8 <__ssvfiscanf_r+0x1d0>
 8009718:	4629      	mov	r1, r5
 800971a:	4640      	mov	r0, r8
 800971c:	f000 fb3c 	bl	8009d98 <__sccl>
 8009720:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009726:	9341      	str	r3, [sp, #260]	@ 0x104
 8009728:	4605      	mov	r5, r0
 800972a:	2301      	movs	r3, #1
 800972c:	e7d7      	b.n	80096de <__ssvfiscanf_r+0x1e6>
 800972e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009734:	9341      	str	r3, [sp, #260]	@ 0x104
 8009736:	2300      	movs	r3, #0
 8009738:	e7d1      	b.n	80096de <__ssvfiscanf_r+0x1e6>
 800973a:	2302      	movs	r3, #2
 800973c:	e7cf      	b.n	80096de <__ssvfiscanf_r+0x1e6>
 800973e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009740:	06c3      	lsls	r3, r0, #27
 8009742:	f53f aefe 	bmi.w	8009542 <__ssvfiscanf_r+0x4a>
 8009746:	9b00      	ldr	r3, [sp, #0]
 8009748:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800974a:	1d19      	adds	r1, r3, #4
 800974c:	9100      	str	r1, [sp, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	07c0      	lsls	r0, r0, #31
 8009752:	bf4c      	ite	mi
 8009754:	801a      	strhmi	r2, [r3, #0]
 8009756:	601a      	strpl	r2, [r3, #0]
 8009758:	e6f3      	b.n	8009542 <__ssvfiscanf_r+0x4a>
 800975a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800975c:	4621      	mov	r1, r4
 800975e:	4630      	mov	r0, r6
 8009760:	4798      	blx	r3
 8009762:	2800      	cmp	r0, #0
 8009764:	d0bf      	beq.n	80096e6 <__ssvfiscanf_r+0x1ee>
 8009766:	e79f      	b.n	80096a8 <__ssvfiscanf_r+0x1b0>
 8009768:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800976a:	3201      	adds	r2, #1
 800976c:	9245      	str	r2, [sp, #276]	@ 0x114
 800976e:	6862      	ldr	r2, [r4, #4]
 8009770:	3a01      	subs	r2, #1
 8009772:	2a00      	cmp	r2, #0
 8009774:	6062      	str	r2, [r4, #4]
 8009776:	dd02      	ble.n	800977e <__ssvfiscanf_r+0x286>
 8009778:	3301      	adds	r3, #1
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	e7b6      	b.n	80096ec <__ssvfiscanf_r+0x1f4>
 800977e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009780:	4621      	mov	r1, r4
 8009782:	4630      	mov	r0, r6
 8009784:	4798      	blx	r3
 8009786:	2800      	cmp	r0, #0
 8009788:	d0b0      	beq.n	80096ec <__ssvfiscanf_r+0x1f4>
 800978a:	e78d      	b.n	80096a8 <__ssvfiscanf_r+0x1b0>
 800978c:	2b04      	cmp	r3, #4
 800978e:	dc0f      	bgt.n	80097b0 <__ssvfiscanf_r+0x2b8>
 8009790:	466b      	mov	r3, sp
 8009792:	4622      	mov	r2, r4
 8009794:	a941      	add	r1, sp, #260	@ 0x104
 8009796:	4630      	mov	r0, r6
 8009798:	f000 fa0a 	bl	8009bb0 <_scanf_i>
 800979c:	e7b4      	b.n	8009708 <__ssvfiscanf_r+0x210>
 800979e:	bf00      	nop
 80097a0:	08009449 	.word	0x08009449
 80097a4:	080094bf 	.word	0x080094bf
 80097a8:	0800a497 	.word	0x0800a497
 80097ac:	0800a44e 	.word	0x0800a44e
 80097b0:	4b0a      	ldr	r3, [pc, #40]	@ (80097dc <__ssvfiscanf_r+0x2e4>)
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f43f aec5 	beq.w	8009542 <__ssvfiscanf_r+0x4a>
 80097b8:	466b      	mov	r3, sp
 80097ba:	4622      	mov	r2, r4
 80097bc:	a941      	add	r1, sp, #260	@ 0x104
 80097be:	4630      	mov	r0, r6
 80097c0:	f3af 8000 	nop.w
 80097c4:	e7a0      	b.n	8009708 <__ssvfiscanf_r+0x210>
 80097c6:	89a3      	ldrh	r3, [r4, #12]
 80097c8:	065b      	lsls	r3, r3, #25
 80097ca:	f53f af71 	bmi.w	80096b0 <__ssvfiscanf_r+0x1b8>
 80097ce:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80097d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80097d8:	e7f9      	b.n	80097ce <__ssvfiscanf_r+0x2d6>
 80097da:	bf00      	nop
 80097dc:	00000000 	.word	0x00000000

080097e0 <_printf_common>:
 80097e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e4:	4616      	mov	r6, r2
 80097e6:	4698      	mov	r8, r3
 80097e8:	688a      	ldr	r2, [r1, #8]
 80097ea:	690b      	ldr	r3, [r1, #16]
 80097ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097f0:	4293      	cmp	r3, r2
 80097f2:	bfb8      	it	lt
 80097f4:	4613      	movlt	r3, r2
 80097f6:	6033      	str	r3, [r6, #0]
 80097f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097fc:	4607      	mov	r7, r0
 80097fe:	460c      	mov	r4, r1
 8009800:	b10a      	cbz	r2, 8009806 <_printf_common+0x26>
 8009802:	3301      	adds	r3, #1
 8009804:	6033      	str	r3, [r6, #0]
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	0699      	lsls	r1, r3, #26
 800980a:	bf42      	ittt	mi
 800980c:	6833      	ldrmi	r3, [r6, #0]
 800980e:	3302      	addmi	r3, #2
 8009810:	6033      	strmi	r3, [r6, #0]
 8009812:	6825      	ldr	r5, [r4, #0]
 8009814:	f015 0506 	ands.w	r5, r5, #6
 8009818:	d106      	bne.n	8009828 <_printf_common+0x48>
 800981a:	f104 0a19 	add.w	sl, r4, #25
 800981e:	68e3      	ldr	r3, [r4, #12]
 8009820:	6832      	ldr	r2, [r6, #0]
 8009822:	1a9b      	subs	r3, r3, r2
 8009824:	42ab      	cmp	r3, r5
 8009826:	dc26      	bgt.n	8009876 <_printf_common+0x96>
 8009828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800982c:	6822      	ldr	r2, [r4, #0]
 800982e:	3b00      	subs	r3, #0
 8009830:	bf18      	it	ne
 8009832:	2301      	movne	r3, #1
 8009834:	0692      	lsls	r2, r2, #26
 8009836:	d42b      	bmi.n	8009890 <_printf_common+0xb0>
 8009838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800983c:	4641      	mov	r1, r8
 800983e:	4638      	mov	r0, r7
 8009840:	47c8      	blx	r9
 8009842:	3001      	adds	r0, #1
 8009844:	d01e      	beq.n	8009884 <_printf_common+0xa4>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	6922      	ldr	r2, [r4, #16]
 800984a:	f003 0306 	and.w	r3, r3, #6
 800984e:	2b04      	cmp	r3, #4
 8009850:	bf02      	ittt	eq
 8009852:	68e5      	ldreq	r5, [r4, #12]
 8009854:	6833      	ldreq	r3, [r6, #0]
 8009856:	1aed      	subeq	r5, r5, r3
 8009858:	68a3      	ldr	r3, [r4, #8]
 800985a:	bf0c      	ite	eq
 800985c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009860:	2500      	movne	r5, #0
 8009862:	4293      	cmp	r3, r2
 8009864:	bfc4      	itt	gt
 8009866:	1a9b      	subgt	r3, r3, r2
 8009868:	18ed      	addgt	r5, r5, r3
 800986a:	2600      	movs	r6, #0
 800986c:	341a      	adds	r4, #26
 800986e:	42b5      	cmp	r5, r6
 8009870:	d11a      	bne.n	80098a8 <_printf_common+0xc8>
 8009872:	2000      	movs	r0, #0
 8009874:	e008      	b.n	8009888 <_printf_common+0xa8>
 8009876:	2301      	movs	r3, #1
 8009878:	4652      	mov	r2, sl
 800987a:	4641      	mov	r1, r8
 800987c:	4638      	mov	r0, r7
 800987e:	47c8      	blx	r9
 8009880:	3001      	adds	r0, #1
 8009882:	d103      	bne.n	800988c <_printf_common+0xac>
 8009884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988c:	3501      	adds	r5, #1
 800988e:	e7c6      	b.n	800981e <_printf_common+0x3e>
 8009890:	18e1      	adds	r1, r4, r3
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	2030      	movs	r0, #48	@ 0x30
 8009896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800989a:	4422      	add	r2, r4
 800989c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80098a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80098a4:	3302      	adds	r3, #2
 80098a6:	e7c7      	b.n	8009838 <_printf_common+0x58>
 80098a8:	2301      	movs	r3, #1
 80098aa:	4622      	mov	r2, r4
 80098ac:	4641      	mov	r1, r8
 80098ae:	4638      	mov	r0, r7
 80098b0:	47c8      	blx	r9
 80098b2:	3001      	adds	r0, #1
 80098b4:	d0e6      	beq.n	8009884 <_printf_common+0xa4>
 80098b6:	3601      	adds	r6, #1
 80098b8:	e7d9      	b.n	800986e <_printf_common+0x8e>
	...

080098bc <_printf_i>:
 80098bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	7e0f      	ldrb	r7, [r1, #24]
 80098c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098c4:	2f78      	cmp	r7, #120	@ 0x78
 80098c6:	4691      	mov	r9, r2
 80098c8:	4680      	mov	r8, r0
 80098ca:	460c      	mov	r4, r1
 80098cc:	469a      	mov	sl, r3
 80098ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098d2:	d807      	bhi.n	80098e4 <_printf_i+0x28>
 80098d4:	2f62      	cmp	r7, #98	@ 0x62
 80098d6:	d80a      	bhi.n	80098ee <_printf_i+0x32>
 80098d8:	2f00      	cmp	r7, #0
 80098da:	f000 80d2 	beq.w	8009a82 <_printf_i+0x1c6>
 80098de:	2f58      	cmp	r7, #88	@ 0x58
 80098e0:	f000 80b9 	beq.w	8009a56 <_printf_i+0x19a>
 80098e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80098ec:	e03a      	b.n	8009964 <_printf_i+0xa8>
 80098ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098f2:	2b15      	cmp	r3, #21
 80098f4:	d8f6      	bhi.n	80098e4 <_printf_i+0x28>
 80098f6:	a101      	add	r1, pc, #4	@ (adr r1, 80098fc <_printf_i+0x40>)
 80098f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098fc:	08009955 	.word	0x08009955
 8009900:	08009969 	.word	0x08009969
 8009904:	080098e5 	.word	0x080098e5
 8009908:	080098e5 	.word	0x080098e5
 800990c:	080098e5 	.word	0x080098e5
 8009910:	080098e5 	.word	0x080098e5
 8009914:	08009969 	.word	0x08009969
 8009918:	080098e5 	.word	0x080098e5
 800991c:	080098e5 	.word	0x080098e5
 8009920:	080098e5 	.word	0x080098e5
 8009924:	080098e5 	.word	0x080098e5
 8009928:	08009a69 	.word	0x08009a69
 800992c:	08009993 	.word	0x08009993
 8009930:	08009a23 	.word	0x08009a23
 8009934:	080098e5 	.word	0x080098e5
 8009938:	080098e5 	.word	0x080098e5
 800993c:	08009a8b 	.word	0x08009a8b
 8009940:	080098e5 	.word	0x080098e5
 8009944:	08009993 	.word	0x08009993
 8009948:	080098e5 	.word	0x080098e5
 800994c:	080098e5 	.word	0x080098e5
 8009950:	08009a2b 	.word	0x08009a2b
 8009954:	6833      	ldr	r3, [r6, #0]
 8009956:	1d1a      	adds	r2, r3, #4
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6032      	str	r2, [r6, #0]
 800995c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009964:	2301      	movs	r3, #1
 8009966:	e09d      	b.n	8009aa4 <_printf_i+0x1e8>
 8009968:	6833      	ldr	r3, [r6, #0]
 800996a:	6820      	ldr	r0, [r4, #0]
 800996c:	1d19      	adds	r1, r3, #4
 800996e:	6031      	str	r1, [r6, #0]
 8009970:	0606      	lsls	r6, r0, #24
 8009972:	d501      	bpl.n	8009978 <_printf_i+0xbc>
 8009974:	681d      	ldr	r5, [r3, #0]
 8009976:	e003      	b.n	8009980 <_printf_i+0xc4>
 8009978:	0645      	lsls	r5, r0, #25
 800997a:	d5fb      	bpl.n	8009974 <_printf_i+0xb8>
 800997c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009980:	2d00      	cmp	r5, #0
 8009982:	da03      	bge.n	800998c <_printf_i+0xd0>
 8009984:	232d      	movs	r3, #45	@ 0x2d
 8009986:	426d      	negs	r5, r5
 8009988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800998c:	4859      	ldr	r0, [pc, #356]	@ (8009af4 <_printf_i+0x238>)
 800998e:	230a      	movs	r3, #10
 8009990:	e011      	b.n	80099b6 <_printf_i+0xfa>
 8009992:	6821      	ldr	r1, [r4, #0]
 8009994:	6833      	ldr	r3, [r6, #0]
 8009996:	0608      	lsls	r0, r1, #24
 8009998:	f853 5b04 	ldr.w	r5, [r3], #4
 800999c:	d402      	bmi.n	80099a4 <_printf_i+0xe8>
 800999e:	0649      	lsls	r1, r1, #25
 80099a0:	bf48      	it	mi
 80099a2:	b2ad      	uxthmi	r5, r5
 80099a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80099a6:	4853      	ldr	r0, [pc, #332]	@ (8009af4 <_printf_i+0x238>)
 80099a8:	6033      	str	r3, [r6, #0]
 80099aa:	bf14      	ite	ne
 80099ac:	230a      	movne	r3, #10
 80099ae:	2308      	moveq	r3, #8
 80099b0:	2100      	movs	r1, #0
 80099b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099b6:	6866      	ldr	r6, [r4, #4]
 80099b8:	60a6      	str	r6, [r4, #8]
 80099ba:	2e00      	cmp	r6, #0
 80099bc:	bfa2      	ittt	ge
 80099be:	6821      	ldrge	r1, [r4, #0]
 80099c0:	f021 0104 	bicge.w	r1, r1, #4
 80099c4:	6021      	strge	r1, [r4, #0]
 80099c6:	b90d      	cbnz	r5, 80099cc <_printf_i+0x110>
 80099c8:	2e00      	cmp	r6, #0
 80099ca:	d04b      	beq.n	8009a64 <_printf_i+0x1a8>
 80099cc:	4616      	mov	r6, r2
 80099ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80099d2:	fb03 5711 	mls	r7, r3, r1, r5
 80099d6:	5dc7      	ldrb	r7, [r0, r7]
 80099d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099dc:	462f      	mov	r7, r5
 80099de:	42bb      	cmp	r3, r7
 80099e0:	460d      	mov	r5, r1
 80099e2:	d9f4      	bls.n	80099ce <_printf_i+0x112>
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	d10b      	bne.n	8009a00 <_printf_i+0x144>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	07df      	lsls	r7, r3, #31
 80099ec:	d508      	bpl.n	8009a00 <_printf_i+0x144>
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	6861      	ldr	r1, [r4, #4]
 80099f2:	4299      	cmp	r1, r3
 80099f4:	bfde      	ittt	le
 80099f6:	2330      	movle	r3, #48	@ 0x30
 80099f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099fc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009a00:	1b92      	subs	r2, r2, r6
 8009a02:	6122      	str	r2, [r4, #16]
 8009a04:	f8cd a000 	str.w	sl, [sp]
 8009a08:	464b      	mov	r3, r9
 8009a0a:	aa03      	add	r2, sp, #12
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4640      	mov	r0, r8
 8009a10:	f7ff fee6 	bl	80097e0 <_printf_common>
 8009a14:	3001      	adds	r0, #1
 8009a16:	d14a      	bne.n	8009aae <_printf_i+0x1f2>
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a1c:	b004      	add	sp, #16
 8009a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	f043 0320 	orr.w	r3, r3, #32
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	4833      	ldr	r0, [pc, #204]	@ (8009af8 <_printf_i+0x23c>)
 8009a2c:	2778      	movs	r7, #120	@ 0x78
 8009a2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	6831      	ldr	r1, [r6, #0]
 8009a36:	061f      	lsls	r7, r3, #24
 8009a38:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a3c:	d402      	bmi.n	8009a44 <_printf_i+0x188>
 8009a3e:	065f      	lsls	r7, r3, #25
 8009a40:	bf48      	it	mi
 8009a42:	b2ad      	uxthmi	r5, r5
 8009a44:	6031      	str	r1, [r6, #0]
 8009a46:	07d9      	lsls	r1, r3, #31
 8009a48:	bf44      	itt	mi
 8009a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a4e:	6023      	strmi	r3, [r4, #0]
 8009a50:	b11d      	cbz	r5, 8009a5a <_printf_i+0x19e>
 8009a52:	2310      	movs	r3, #16
 8009a54:	e7ac      	b.n	80099b0 <_printf_i+0xf4>
 8009a56:	4827      	ldr	r0, [pc, #156]	@ (8009af4 <_printf_i+0x238>)
 8009a58:	e7e9      	b.n	8009a2e <_printf_i+0x172>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	f023 0320 	bic.w	r3, r3, #32
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	e7f6      	b.n	8009a52 <_printf_i+0x196>
 8009a64:	4616      	mov	r6, r2
 8009a66:	e7bd      	b.n	80099e4 <_printf_i+0x128>
 8009a68:	6833      	ldr	r3, [r6, #0]
 8009a6a:	6825      	ldr	r5, [r4, #0]
 8009a6c:	6961      	ldr	r1, [r4, #20]
 8009a6e:	1d18      	adds	r0, r3, #4
 8009a70:	6030      	str	r0, [r6, #0]
 8009a72:	062e      	lsls	r6, r5, #24
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	d501      	bpl.n	8009a7c <_printf_i+0x1c0>
 8009a78:	6019      	str	r1, [r3, #0]
 8009a7a:	e002      	b.n	8009a82 <_printf_i+0x1c6>
 8009a7c:	0668      	lsls	r0, r5, #25
 8009a7e:	d5fb      	bpl.n	8009a78 <_printf_i+0x1bc>
 8009a80:	8019      	strh	r1, [r3, #0]
 8009a82:	2300      	movs	r3, #0
 8009a84:	6123      	str	r3, [r4, #16]
 8009a86:	4616      	mov	r6, r2
 8009a88:	e7bc      	b.n	8009a04 <_printf_i+0x148>
 8009a8a:	6833      	ldr	r3, [r6, #0]
 8009a8c:	1d1a      	adds	r2, r3, #4
 8009a8e:	6032      	str	r2, [r6, #0]
 8009a90:	681e      	ldr	r6, [r3, #0]
 8009a92:	6862      	ldr	r2, [r4, #4]
 8009a94:	2100      	movs	r1, #0
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7f6 fba2 	bl	80001e0 <memchr>
 8009a9c:	b108      	cbz	r0, 8009aa2 <_printf_i+0x1e6>
 8009a9e:	1b80      	subs	r0, r0, r6
 8009aa0:	6060      	str	r0, [r4, #4]
 8009aa2:	6863      	ldr	r3, [r4, #4]
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aac:	e7aa      	b.n	8009a04 <_printf_i+0x148>
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	4632      	mov	r2, r6
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	47d0      	blx	sl
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d0ad      	beq.n	8009a18 <_printf_i+0x15c>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	079b      	lsls	r3, r3, #30
 8009ac0:	d413      	bmi.n	8009aea <_printf_i+0x22e>
 8009ac2:	68e0      	ldr	r0, [r4, #12]
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	4298      	cmp	r0, r3
 8009ac8:	bfb8      	it	lt
 8009aca:	4618      	movlt	r0, r3
 8009acc:	e7a6      	b.n	8009a1c <_printf_i+0x160>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	47d0      	blx	sl
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d09d      	beq.n	8009a18 <_printf_i+0x15c>
 8009adc:	3501      	adds	r5, #1
 8009ade:	68e3      	ldr	r3, [r4, #12]
 8009ae0:	9903      	ldr	r1, [sp, #12]
 8009ae2:	1a5b      	subs	r3, r3, r1
 8009ae4:	42ab      	cmp	r3, r5
 8009ae6:	dcf2      	bgt.n	8009ace <_printf_i+0x212>
 8009ae8:	e7eb      	b.n	8009ac2 <_printf_i+0x206>
 8009aea:	2500      	movs	r5, #0
 8009aec:	f104 0619 	add.w	r6, r4, #25
 8009af0:	e7f5      	b.n	8009ade <_printf_i+0x222>
 8009af2:	bf00      	nop
 8009af4:	0800a459 	.word	0x0800a459
 8009af8:	0800a46a 	.word	0x0800a46a

08009afc <_scanf_chars>:
 8009afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b00:	4615      	mov	r5, r2
 8009b02:	688a      	ldr	r2, [r1, #8]
 8009b04:	4680      	mov	r8, r0
 8009b06:	460c      	mov	r4, r1
 8009b08:	b932      	cbnz	r2, 8009b18 <_scanf_chars+0x1c>
 8009b0a:	698a      	ldr	r2, [r1, #24]
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	bf14      	ite	ne
 8009b10:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8009b14:	2201      	moveq	r2, #1
 8009b16:	608a      	str	r2, [r1, #8]
 8009b18:	6822      	ldr	r2, [r4, #0]
 8009b1a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009bac <_scanf_chars+0xb0>
 8009b1e:	06d1      	lsls	r1, r2, #27
 8009b20:	bf5f      	itttt	pl
 8009b22:	681a      	ldrpl	r2, [r3, #0]
 8009b24:	1d11      	addpl	r1, r2, #4
 8009b26:	6019      	strpl	r1, [r3, #0]
 8009b28:	6816      	ldrpl	r6, [r2, #0]
 8009b2a:	2700      	movs	r7, #0
 8009b2c:	69a0      	ldr	r0, [r4, #24]
 8009b2e:	b188      	cbz	r0, 8009b54 <_scanf_chars+0x58>
 8009b30:	2801      	cmp	r0, #1
 8009b32:	d107      	bne.n	8009b44 <_scanf_chars+0x48>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	781a      	ldrb	r2, [r3, #0]
 8009b38:	6963      	ldr	r3, [r4, #20]
 8009b3a:	5c9b      	ldrb	r3, [r3, r2]
 8009b3c:	b953      	cbnz	r3, 8009b54 <_scanf_chars+0x58>
 8009b3e:	2f00      	cmp	r7, #0
 8009b40:	d031      	beq.n	8009ba6 <_scanf_chars+0xaa>
 8009b42:	e022      	b.n	8009b8a <_scanf_chars+0x8e>
 8009b44:	2802      	cmp	r0, #2
 8009b46:	d120      	bne.n	8009b8a <_scanf_chars+0x8e>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009b50:	071b      	lsls	r3, r3, #28
 8009b52:	d41a      	bmi.n	8009b8a <_scanf_chars+0x8e>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	06da      	lsls	r2, r3, #27
 8009b58:	bf5e      	ittt	pl
 8009b5a:	682b      	ldrpl	r3, [r5, #0]
 8009b5c:	781b      	ldrbpl	r3, [r3, #0]
 8009b5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009b62:	682a      	ldr	r2, [r5, #0]
 8009b64:	686b      	ldr	r3, [r5, #4]
 8009b66:	3201      	adds	r2, #1
 8009b68:	602a      	str	r2, [r5, #0]
 8009b6a:	68a2      	ldr	r2, [r4, #8]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	3a01      	subs	r2, #1
 8009b70:	606b      	str	r3, [r5, #4]
 8009b72:	3701      	adds	r7, #1
 8009b74:	60a2      	str	r2, [r4, #8]
 8009b76:	b142      	cbz	r2, 8009b8a <_scanf_chars+0x8e>
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	dcd7      	bgt.n	8009b2c <_scanf_chars+0x30>
 8009b7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009b80:	4629      	mov	r1, r5
 8009b82:	4640      	mov	r0, r8
 8009b84:	4798      	blx	r3
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0d0      	beq.n	8009b2c <_scanf_chars+0x30>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	f013 0310 	ands.w	r3, r3, #16
 8009b90:	d105      	bne.n	8009b9e <_scanf_chars+0xa2>
 8009b92:	68e2      	ldr	r2, [r4, #12]
 8009b94:	3201      	adds	r2, #1
 8009b96:	60e2      	str	r2, [r4, #12]
 8009b98:	69a2      	ldr	r2, [r4, #24]
 8009b9a:	b102      	cbz	r2, 8009b9e <_scanf_chars+0xa2>
 8009b9c:	7033      	strb	r3, [r6, #0]
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	443b      	add	r3, r7
 8009ba2:	6123      	str	r3, [r4, #16]
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009baa:	bf00      	nop
 8009bac:	0800a497 	.word	0x0800a497

08009bb0 <_scanf_i>:
 8009bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	4698      	mov	r8, r3
 8009bb6:	4b74      	ldr	r3, [pc, #464]	@ (8009d88 <_scanf_i+0x1d8>)
 8009bb8:	460c      	mov	r4, r1
 8009bba:	4682      	mov	sl, r0
 8009bbc:	4616      	mov	r6, r2
 8009bbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	ab03      	add	r3, sp, #12
 8009bc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009bca:	4b70      	ldr	r3, [pc, #448]	@ (8009d8c <_scanf_i+0x1dc>)
 8009bcc:	69a1      	ldr	r1, [r4, #24]
 8009bce:	4a70      	ldr	r2, [pc, #448]	@ (8009d90 <_scanf_i+0x1e0>)
 8009bd0:	2903      	cmp	r1, #3
 8009bd2:	bf08      	it	eq
 8009bd4:	461a      	moveq	r2, r3
 8009bd6:	68a3      	ldr	r3, [r4, #8]
 8009bd8:	9201      	str	r2, [sp, #4]
 8009bda:	1e5a      	subs	r2, r3, #1
 8009bdc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009be0:	bf88      	it	hi
 8009be2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009be6:	4627      	mov	r7, r4
 8009be8:	bf82      	ittt	hi
 8009bea:	eb03 0905 	addhi.w	r9, r3, r5
 8009bee:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009bf2:	60a3      	strhi	r3, [r4, #8]
 8009bf4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009bf8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009bfc:	bf98      	it	ls
 8009bfe:	f04f 0900 	movls.w	r9, #0
 8009c02:	6023      	str	r3, [r4, #0]
 8009c04:	463d      	mov	r5, r7
 8009c06:	f04f 0b00 	mov.w	fp, #0
 8009c0a:	6831      	ldr	r1, [r6, #0]
 8009c0c:	ab03      	add	r3, sp, #12
 8009c0e:	7809      	ldrb	r1, [r1, #0]
 8009c10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009c14:	2202      	movs	r2, #2
 8009c16:	f7f6 fae3 	bl	80001e0 <memchr>
 8009c1a:	b328      	cbz	r0, 8009c68 <_scanf_i+0xb8>
 8009c1c:	f1bb 0f01 	cmp.w	fp, #1
 8009c20:	d159      	bne.n	8009cd6 <_scanf_i+0x126>
 8009c22:	6862      	ldr	r2, [r4, #4]
 8009c24:	b92a      	cbnz	r2, 8009c32 <_scanf_i+0x82>
 8009c26:	6822      	ldr	r2, [r4, #0]
 8009c28:	2108      	movs	r1, #8
 8009c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c2e:	6061      	str	r1, [r4, #4]
 8009c30:	6022      	str	r2, [r4, #0]
 8009c32:	6822      	ldr	r2, [r4, #0]
 8009c34:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009c38:	6022      	str	r2, [r4, #0]
 8009c3a:	68a2      	ldr	r2, [r4, #8]
 8009c3c:	1e51      	subs	r1, r2, #1
 8009c3e:	60a1      	str	r1, [r4, #8]
 8009c40:	b192      	cbz	r2, 8009c68 <_scanf_i+0xb8>
 8009c42:	6832      	ldr	r2, [r6, #0]
 8009c44:	1c51      	adds	r1, r2, #1
 8009c46:	6031      	str	r1, [r6, #0]
 8009c48:	7812      	ldrb	r2, [r2, #0]
 8009c4a:	f805 2b01 	strb.w	r2, [r5], #1
 8009c4e:	6872      	ldr	r2, [r6, #4]
 8009c50:	3a01      	subs	r2, #1
 8009c52:	2a00      	cmp	r2, #0
 8009c54:	6072      	str	r2, [r6, #4]
 8009c56:	dc07      	bgt.n	8009c68 <_scanf_i+0xb8>
 8009c58:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4650      	mov	r0, sl
 8009c60:	4790      	blx	r2
 8009c62:	2800      	cmp	r0, #0
 8009c64:	f040 8085 	bne.w	8009d72 <_scanf_i+0x1c2>
 8009c68:	f10b 0b01 	add.w	fp, fp, #1
 8009c6c:	f1bb 0f03 	cmp.w	fp, #3
 8009c70:	d1cb      	bne.n	8009c0a <_scanf_i+0x5a>
 8009c72:	6863      	ldr	r3, [r4, #4]
 8009c74:	b90b      	cbnz	r3, 8009c7a <_scanf_i+0xca>
 8009c76:	230a      	movs	r3, #10
 8009c78:	6063      	str	r3, [r4, #4]
 8009c7a:	6863      	ldr	r3, [r4, #4]
 8009c7c:	4945      	ldr	r1, [pc, #276]	@ (8009d94 <_scanf_i+0x1e4>)
 8009c7e:	6960      	ldr	r0, [r4, #20]
 8009c80:	1ac9      	subs	r1, r1, r3
 8009c82:	f000 f889 	bl	8009d98 <__sccl>
 8009c86:	f04f 0b00 	mov.w	fp, #0
 8009c8a:	68a3      	ldr	r3, [r4, #8]
 8009c8c:	6822      	ldr	r2, [r4, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d03d      	beq.n	8009d0e <_scanf_i+0x15e>
 8009c92:	6831      	ldr	r1, [r6, #0]
 8009c94:	6960      	ldr	r0, [r4, #20]
 8009c96:	f891 c000 	ldrb.w	ip, [r1]
 8009c9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d035      	beq.n	8009d0e <_scanf_i+0x15e>
 8009ca2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009ca6:	d124      	bne.n	8009cf2 <_scanf_i+0x142>
 8009ca8:	0510      	lsls	r0, r2, #20
 8009caa:	d522      	bpl.n	8009cf2 <_scanf_i+0x142>
 8009cac:	f10b 0b01 	add.w	fp, fp, #1
 8009cb0:	f1b9 0f00 	cmp.w	r9, #0
 8009cb4:	d003      	beq.n	8009cbe <_scanf_i+0x10e>
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8009cbc:	60a3      	str	r3, [r4, #8]
 8009cbe:	6873      	ldr	r3, [r6, #4]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	6073      	str	r3, [r6, #4]
 8009cc6:	dd1b      	ble.n	8009d00 <_scanf_i+0x150>
 8009cc8:	6833      	ldr	r3, [r6, #0]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	6033      	str	r3, [r6, #0]
 8009cce:	68a3      	ldr	r3, [r4, #8]
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	60a3      	str	r3, [r4, #8]
 8009cd4:	e7d9      	b.n	8009c8a <_scanf_i+0xda>
 8009cd6:	f1bb 0f02 	cmp.w	fp, #2
 8009cda:	d1ae      	bne.n	8009c3a <_scanf_i+0x8a>
 8009cdc:	6822      	ldr	r2, [r4, #0]
 8009cde:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009ce2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009ce6:	d1bf      	bne.n	8009c68 <_scanf_i+0xb8>
 8009ce8:	2110      	movs	r1, #16
 8009cea:	6061      	str	r1, [r4, #4]
 8009cec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009cf0:	e7a2      	b.n	8009c38 <_scanf_i+0x88>
 8009cf2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009cf6:	6022      	str	r2, [r4, #0]
 8009cf8:	780b      	ldrb	r3, [r1, #0]
 8009cfa:	f805 3b01 	strb.w	r3, [r5], #1
 8009cfe:	e7de      	b.n	8009cbe <_scanf_i+0x10e>
 8009d00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009d04:	4631      	mov	r1, r6
 8009d06:	4650      	mov	r0, sl
 8009d08:	4798      	blx	r3
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d0df      	beq.n	8009cce <_scanf_i+0x11e>
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	05d9      	lsls	r1, r3, #23
 8009d12:	d50d      	bpl.n	8009d30 <_scanf_i+0x180>
 8009d14:	42bd      	cmp	r5, r7
 8009d16:	d909      	bls.n	8009d2c <_scanf_i+0x17c>
 8009d18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d20:	4632      	mov	r2, r6
 8009d22:	4650      	mov	r0, sl
 8009d24:	4798      	blx	r3
 8009d26:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8009d2a:	464d      	mov	r5, r9
 8009d2c:	42bd      	cmp	r5, r7
 8009d2e:	d028      	beq.n	8009d82 <_scanf_i+0x1d2>
 8009d30:	6822      	ldr	r2, [r4, #0]
 8009d32:	f012 0210 	ands.w	r2, r2, #16
 8009d36:	d113      	bne.n	8009d60 <_scanf_i+0x1b0>
 8009d38:	702a      	strb	r2, [r5, #0]
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	9e01      	ldr	r6, [sp, #4]
 8009d3e:	4639      	mov	r1, r7
 8009d40:	4650      	mov	r0, sl
 8009d42:	47b0      	blx	r6
 8009d44:	f8d8 3000 	ldr.w	r3, [r8]
 8009d48:	6821      	ldr	r1, [r4, #0]
 8009d4a:	1d1a      	adds	r2, r3, #4
 8009d4c:	f8c8 2000 	str.w	r2, [r8]
 8009d50:	f011 0f20 	tst.w	r1, #32
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	d00f      	beq.n	8009d78 <_scanf_i+0x1c8>
 8009d58:	6018      	str	r0, [r3, #0]
 8009d5a:	68e3      	ldr	r3, [r4, #12]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	60e3      	str	r3, [r4, #12]
 8009d60:	6923      	ldr	r3, [r4, #16]
 8009d62:	1bed      	subs	r5, r5, r7
 8009d64:	445d      	add	r5, fp
 8009d66:	442b      	add	r3, r5
 8009d68:	6123      	str	r3, [r4, #16]
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	b007      	add	sp, #28
 8009d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d72:	f04f 0b00 	mov.w	fp, #0
 8009d76:	e7ca      	b.n	8009d0e <_scanf_i+0x15e>
 8009d78:	07ca      	lsls	r2, r1, #31
 8009d7a:	bf4c      	ite	mi
 8009d7c:	8018      	strhmi	r0, [r3, #0]
 8009d7e:	6018      	strpl	r0, [r3, #0]
 8009d80:	e7eb      	b.n	8009d5a <_scanf_i+0x1aa>
 8009d82:	2001      	movs	r0, #1
 8009d84:	e7f2      	b.n	8009d6c <_scanf_i+0x1bc>
 8009d86:	bf00      	nop
 8009d88:	0800a40c 	.word	0x0800a40c
 8009d8c:	0800a025 	.word	0x0800a025
 8009d90:	0800a105 	.word	0x0800a105
 8009d94:	0800a48b 	.word	0x0800a48b

08009d98 <__sccl>:
 8009d98:	b570      	push	{r4, r5, r6, lr}
 8009d9a:	780b      	ldrb	r3, [r1, #0]
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	2b5e      	cmp	r3, #94	@ 0x5e
 8009da0:	bf0b      	itete	eq
 8009da2:	784b      	ldrbeq	r3, [r1, #1]
 8009da4:	1c4a      	addne	r2, r1, #1
 8009da6:	1c8a      	addeq	r2, r1, #2
 8009da8:	2100      	movne	r1, #0
 8009daa:	bf08      	it	eq
 8009dac:	2101      	moveq	r1, #1
 8009dae:	3801      	subs	r0, #1
 8009db0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009db4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009db8:	42a8      	cmp	r0, r5
 8009dba:	d1fb      	bne.n	8009db4 <__sccl+0x1c>
 8009dbc:	b90b      	cbnz	r3, 8009dc2 <__sccl+0x2a>
 8009dbe:	1e50      	subs	r0, r2, #1
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	f081 0101 	eor.w	r1, r1, #1
 8009dc6:	54e1      	strb	r1, [r4, r3]
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4602      	mov	r2, r0
 8009dcc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009dd0:	2d2d      	cmp	r5, #45	@ 0x2d
 8009dd2:	d005      	beq.n	8009de0 <__sccl+0x48>
 8009dd4:	2d5d      	cmp	r5, #93	@ 0x5d
 8009dd6:	d016      	beq.n	8009e06 <__sccl+0x6e>
 8009dd8:	2d00      	cmp	r5, #0
 8009dda:	d0f1      	beq.n	8009dc0 <__sccl+0x28>
 8009ddc:	462b      	mov	r3, r5
 8009dde:	e7f2      	b.n	8009dc6 <__sccl+0x2e>
 8009de0:	7846      	ldrb	r6, [r0, #1]
 8009de2:	2e5d      	cmp	r6, #93	@ 0x5d
 8009de4:	d0fa      	beq.n	8009ddc <__sccl+0x44>
 8009de6:	42b3      	cmp	r3, r6
 8009de8:	dcf8      	bgt.n	8009ddc <__sccl+0x44>
 8009dea:	3002      	adds	r0, #2
 8009dec:	461a      	mov	r2, r3
 8009dee:	3201      	adds	r2, #1
 8009df0:	4296      	cmp	r6, r2
 8009df2:	54a1      	strb	r1, [r4, r2]
 8009df4:	dcfb      	bgt.n	8009dee <__sccl+0x56>
 8009df6:	1af2      	subs	r2, r6, r3
 8009df8:	3a01      	subs	r2, #1
 8009dfa:	1c5d      	adds	r5, r3, #1
 8009dfc:	42b3      	cmp	r3, r6
 8009dfe:	bfa8      	it	ge
 8009e00:	2200      	movge	r2, #0
 8009e02:	18ab      	adds	r3, r5, r2
 8009e04:	e7e1      	b.n	8009dca <__sccl+0x32>
 8009e06:	4610      	mov	r0, r2
 8009e08:	e7da      	b.n	8009dc0 <__sccl+0x28>

08009e0a <__submore>:
 8009e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0e:	460c      	mov	r4, r1
 8009e10:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009e12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e16:	4299      	cmp	r1, r3
 8009e18:	d11d      	bne.n	8009e56 <__submore+0x4c>
 8009e1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009e1e:	f7ff f92f 	bl	8009080 <_malloc_r>
 8009e22:	b918      	cbnz	r0, 8009e2c <__submore+0x22>
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e30:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009e32:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009e36:	6360      	str	r0, [r4, #52]	@ 0x34
 8009e38:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009e3c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009e40:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009e44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009e48:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009e4c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009e50:	6020      	str	r0, [r4, #0]
 8009e52:	2000      	movs	r0, #0
 8009e54:	e7e8      	b.n	8009e28 <__submore+0x1e>
 8009e56:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009e58:	0077      	lsls	r7, r6, #1
 8009e5a:	463a      	mov	r2, r7
 8009e5c:	f000 f83a 	bl	8009ed4 <_realloc_r>
 8009e60:	4605      	mov	r5, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d0de      	beq.n	8009e24 <__submore+0x1a>
 8009e66:	eb00 0806 	add.w	r8, r0, r6
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	4632      	mov	r2, r6
 8009e6e:	4640      	mov	r0, r8
 8009e70:	f7ff f88c 	bl	8008f8c <memcpy>
 8009e74:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009e78:	f8c4 8000 	str.w	r8, [r4]
 8009e7c:	e7e9      	b.n	8009e52 <__submore+0x48>

08009e7e <memmove>:
 8009e7e:	4288      	cmp	r0, r1
 8009e80:	b510      	push	{r4, lr}
 8009e82:	eb01 0402 	add.w	r4, r1, r2
 8009e86:	d902      	bls.n	8009e8e <memmove+0x10>
 8009e88:	4284      	cmp	r4, r0
 8009e8a:	4623      	mov	r3, r4
 8009e8c:	d807      	bhi.n	8009e9e <memmove+0x20>
 8009e8e:	1e43      	subs	r3, r0, #1
 8009e90:	42a1      	cmp	r1, r4
 8009e92:	d008      	beq.n	8009ea6 <memmove+0x28>
 8009e94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e9c:	e7f8      	b.n	8009e90 <memmove+0x12>
 8009e9e:	4402      	add	r2, r0
 8009ea0:	4601      	mov	r1, r0
 8009ea2:	428a      	cmp	r2, r1
 8009ea4:	d100      	bne.n	8009ea8 <memmove+0x2a>
 8009ea6:	bd10      	pop	{r4, pc}
 8009ea8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eb0:	e7f7      	b.n	8009ea2 <memmove+0x24>
	...

08009eb4 <_sbrk_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4d06      	ldr	r5, [pc, #24]	@ (8009ed0 <_sbrk_r+0x1c>)
 8009eb8:	2300      	movs	r3, #0
 8009eba:	4604      	mov	r4, r0
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	602b      	str	r3, [r5, #0]
 8009ec0:	f7f7 f88c 	bl	8000fdc <_sbrk>
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	d102      	bne.n	8009ece <_sbrk_r+0x1a>
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	b103      	cbz	r3, 8009ece <_sbrk_r+0x1a>
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	2000200c 	.word	0x2000200c

08009ed4 <_realloc_r>:
 8009ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed8:	4680      	mov	r8, r0
 8009eda:	4615      	mov	r5, r2
 8009edc:	460c      	mov	r4, r1
 8009ede:	b921      	cbnz	r1, 8009eea <_realloc_r+0x16>
 8009ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	f7ff b8cb 	b.w	8009080 <_malloc_r>
 8009eea:	b92a      	cbnz	r2, 8009ef8 <_realloc_r+0x24>
 8009eec:	f7ff f85c 	bl	8008fa8 <_free_r>
 8009ef0:	2400      	movs	r4, #0
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef8:	f000 f906 	bl	800a108 <_malloc_usable_size_r>
 8009efc:	4285      	cmp	r5, r0
 8009efe:	4606      	mov	r6, r0
 8009f00:	d802      	bhi.n	8009f08 <_realloc_r+0x34>
 8009f02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009f06:	d8f4      	bhi.n	8009ef2 <_realloc_r+0x1e>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	f7ff f8b8 	bl	8009080 <_malloc_r>
 8009f10:	4607      	mov	r7, r0
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d0ec      	beq.n	8009ef0 <_realloc_r+0x1c>
 8009f16:	42b5      	cmp	r5, r6
 8009f18:	462a      	mov	r2, r5
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	bf28      	it	cs
 8009f1e:	4632      	movcs	r2, r6
 8009f20:	f7ff f834 	bl	8008f8c <memcpy>
 8009f24:	4621      	mov	r1, r4
 8009f26:	4640      	mov	r0, r8
 8009f28:	f7ff f83e 	bl	8008fa8 <_free_r>
 8009f2c:	463c      	mov	r4, r7
 8009f2e:	e7e0      	b.n	8009ef2 <_realloc_r+0x1e>

08009f30 <_strtol_l.constprop.0>:
 8009f30:	2b24      	cmp	r3, #36	@ 0x24
 8009f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f36:	4686      	mov	lr, r0
 8009f38:	4690      	mov	r8, r2
 8009f3a:	d801      	bhi.n	8009f40 <_strtol_l.constprop.0+0x10>
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d106      	bne.n	8009f4e <_strtol_l.constprop.0+0x1e>
 8009f40:	f7fe fff0 	bl	8008f24 <__errno>
 8009f44:	2316      	movs	r3, #22
 8009f46:	6003      	str	r3, [r0, #0]
 8009f48:	2000      	movs	r0, #0
 8009f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f4e:	4834      	ldr	r0, [pc, #208]	@ (800a020 <_strtol_l.constprop.0+0xf0>)
 8009f50:	460d      	mov	r5, r1
 8009f52:	462a      	mov	r2, r5
 8009f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f58:	5d06      	ldrb	r6, [r0, r4]
 8009f5a:	f016 0608 	ands.w	r6, r6, #8
 8009f5e:	d1f8      	bne.n	8009f52 <_strtol_l.constprop.0+0x22>
 8009f60:	2c2d      	cmp	r4, #45	@ 0x2d
 8009f62:	d12d      	bne.n	8009fc0 <_strtol_l.constprop.0+0x90>
 8009f64:	782c      	ldrb	r4, [r5, #0]
 8009f66:	2601      	movs	r6, #1
 8009f68:	1c95      	adds	r5, r2, #2
 8009f6a:	f033 0210 	bics.w	r2, r3, #16
 8009f6e:	d109      	bne.n	8009f84 <_strtol_l.constprop.0+0x54>
 8009f70:	2c30      	cmp	r4, #48	@ 0x30
 8009f72:	d12a      	bne.n	8009fca <_strtol_l.constprop.0+0x9a>
 8009f74:	782a      	ldrb	r2, [r5, #0]
 8009f76:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f7a:	2a58      	cmp	r2, #88	@ 0x58
 8009f7c:	d125      	bne.n	8009fca <_strtol_l.constprop.0+0x9a>
 8009f7e:	786c      	ldrb	r4, [r5, #1]
 8009f80:	2310      	movs	r3, #16
 8009f82:	3502      	adds	r5, #2
 8009f84:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009f88:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	fbbc f9f3 	udiv	r9, ip, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f98:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009f9c:	2f09      	cmp	r7, #9
 8009f9e:	d81b      	bhi.n	8009fd8 <_strtol_l.constprop.0+0xa8>
 8009fa0:	463c      	mov	r4, r7
 8009fa2:	42a3      	cmp	r3, r4
 8009fa4:	dd27      	ble.n	8009ff6 <_strtol_l.constprop.0+0xc6>
 8009fa6:	1c57      	adds	r7, r2, #1
 8009fa8:	d007      	beq.n	8009fba <_strtol_l.constprop.0+0x8a>
 8009faa:	4581      	cmp	r9, r0
 8009fac:	d320      	bcc.n	8009ff0 <_strtol_l.constprop.0+0xc0>
 8009fae:	d101      	bne.n	8009fb4 <_strtol_l.constprop.0+0x84>
 8009fb0:	45a2      	cmp	sl, r4
 8009fb2:	db1d      	blt.n	8009ff0 <_strtol_l.constprop.0+0xc0>
 8009fb4:	fb00 4003 	mla	r0, r0, r3, r4
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fbe:	e7eb      	b.n	8009f98 <_strtol_l.constprop.0+0x68>
 8009fc0:	2c2b      	cmp	r4, #43	@ 0x2b
 8009fc2:	bf04      	itt	eq
 8009fc4:	782c      	ldrbeq	r4, [r5, #0]
 8009fc6:	1c95      	addeq	r5, r2, #2
 8009fc8:	e7cf      	b.n	8009f6a <_strtol_l.constprop.0+0x3a>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1da      	bne.n	8009f84 <_strtol_l.constprop.0+0x54>
 8009fce:	2c30      	cmp	r4, #48	@ 0x30
 8009fd0:	bf0c      	ite	eq
 8009fd2:	2308      	moveq	r3, #8
 8009fd4:	230a      	movne	r3, #10
 8009fd6:	e7d5      	b.n	8009f84 <_strtol_l.constprop.0+0x54>
 8009fd8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009fdc:	2f19      	cmp	r7, #25
 8009fde:	d801      	bhi.n	8009fe4 <_strtol_l.constprop.0+0xb4>
 8009fe0:	3c37      	subs	r4, #55	@ 0x37
 8009fe2:	e7de      	b.n	8009fa2 <_strtol_l.constprop.0+0x72>
 8009fe4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009fe8:	2f19      	cmp	r7, #25
 8009fea:	d804      	bhi.n	8009ff6 <_strtol_l.constprop.0+0xc6>
 8009fec:	3c57      	subs	r4, #87	@ 0x57
 8009fee:	e7d8      	b.n	8009fa2 <_strtol_l.constprop.0+0x72>
 8009ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ff4:	e7e1      	b.n	8009fba <_strtol_l.constprop.0+0x8a>
 8009ff6:	1c53      	adds	r3, r2, #1
 8009ff8:	d108      	bne.n	800a00c <_strtol_l.constprop.0+0xdc>
 8009ffa:	2322      	movs	r3, #34	@ 0x22
 8009ffc:	f8ce 3000 	str.w	r3, [lr]
 800a000:	4660      	mov	r0, ip
 800a002:	f1b8 0f00 	cmp.w	r8, #0
 800a006:	d0a0      	beq.n	8009f4a <_strtol_l.constprop.0+0x1a>
 800a008:	1e69      	subs	r1, r5, #1
 800a00a:	e006      	b.n	800a01a <_strtol_l.constprop.0+0xea>
 800a00c:	b106      	cbz	r6, 800a010 <_strtol_l.constprop.0+0xe0>
 800a00e:	4240      	negs	r0, r0
 800a010:	f1b8 0f00 	cmp.w	r8, #0
 800a014:	d099      	beq.n	8009f4a <_strtol_l.constprop.0+0x1a>
 800a016:	2a00      	cmp	r2, #0
 800a018:	d1f6      	bne.n	800a008 <_strtol_l.constprop.0+0xd8>
 800a01a:	f8c8 1000 	str.w	r1, [r8]
 800a01e:	e794      	b.n	8009f4a <_strtol_l.constprop.0+0x1a>
 800a020:	0800a497 	.word	0x0800a497

0800a024 <_strtol_r>:
 800a024:	f7ff bf84 	b.w	8009f30 <_strtol_l.constprop.0>

0800a028 <_strtoul_l.constprop.0>:
 800a028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a02c:	4e34      	ldr	r6, [pc, #208]	@ (800a100 <_strtoul_l.constprop.0+0xd8>)
 800a02e:	4686      	mov	lr, r0
 800a030:	460d      	mov	r5, r1
 800a032:	4628      	mov	r0, r5
 800a034:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a038:	5d37      	ldrb	r7, [r6, r4]
 800a03a:	f017 0708 	ands.w	r7, r7, #8
 800a03e:	d1f8      	bne.n	800a032 <_strtoul_l.constprop.0+0xa>
 800a040:	2c2d      	cmp	r4, #45	@ 0x2d
 800a042:	d12f      	bne.n	800a0a4 <_strtoul_l.constprop.0+0x7c>
 800a044:	782c      	ldrb	r4, [r5, #0]
 800a046:	2701      	movs	r7, #1
 800a048:	1c85      	adds	r5, r0, #2
 800a04a:	f033 0010 	bics.w	r0, r3, #16
 800a04e:	d109      	bne.n	800a064 <_strtoul_l.constprop.0+0x3c>
 800a050:	2c30      	cmp	r4, #48	@ 0x30
 800a052:	d12c      	bne.n	800a0ae <_strtoul_l.constprop.0+0x86>
 800a054:	7828      	ldrb	r0, [r5, #0]
 800a056:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a05a:	2858      	cmp	r0, #88	@ 0x58
 800a05c:	d127      	bne.n	800a0ae <_strtoul_l.constprop.0+0x86>
 800a05e:	786c      	ldrb	r4, [r5, #1]
 800a060:	2310      	movs	r3, #16
 800a062:	3502      	adds	r5, #2
 800a064:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800a068:	2600      	movs	r6, #0
 800a06a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a06e:	fb03 f908 	mul.w	r9, r3, r8
 800a072:	ea6f 0909 	mvn.w	r9, r9
 800a076:	4630      	mov	r0, r6
 800a078:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a07c:	f1bc 0f09 	cmp.w	ip, #9
 800a080:	d81c      	bhi.n	800a0bc <_strtoul_l.constprop.0+0x94>
 800a082:	4664      	mov	r4, ip
 800a084:	42a3      	cmp	r3, r4
 800a086:	dd2a      	ble.n	800a0de <_strtoul_l.constprop.0+0xb6>
 800a088:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800a08c:	d007      	beq.n	800a09e <_strtoul_l.constprop.0+0x76>
 800a08e:	4580      	cmp	r8, r0
 800a090:	d322      	bcc.n	800a0d8 <_strtoul_l.constprop.0+0xb0>
 800a092:	d101      	bne.n	800a098 <_strtoul_l.constprop.0+0x70>
 800a094:	45a1      	cmp	r9, r4
 800a096:	db1f      	blt.n	800a0d8 <_strtoul_l.constprop.0+0xb0>
 800a098:	fb00 4003 	mla	r0, r0, r3, r4
 800a09c:	2601      	movs	r6, #1
 800a09e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0a2:	e7e9      	b.n	800a078 <_strtoul_l.constprop.0+0x50>
 800a0a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a0a6:	bf04      	itt	eq
 800a0a8:	782c      	ldrbeq	r4, [r5, #0]
 800a0aa:	1c85      	addeq	r5, r0, #2
 800a0ac:	e7cd      	b.n	800a04a <_strtoul_l.constprop.0+0x22>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1d8      	bne.n	800a064 <_strtoul_l.constprop.0+0x3c>
 800a0b2:	2c30      	cmp	r4, #48	@ 0x30
 800a0b4:	bf0c      	ite	eq
 800a0b6:	2308      	moveq	r3, #8
 800a0b8:	230a      	movne	r3, #10
 800a0ba:	e7d3      	b.n	800a064 <_strtoul_l.constprop.0+0x3c>
 800a0bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a0c0:	f1bc 0f19 	cmp.w	ip, #25
 800a0c4:	d801      	bhi.n	800a0ca <_strtoul_l.constprop.0+0xa2>
 800a0c6:	3c37      	subs	r4, #55	@ 0x37
 800a0c8:	e7dc      	b.n	800a084 <_strtoul_l.constprop.0+0x5c>
 800a0ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a0ce:	f1bc 0f19 	cmp.w	ip, #25
 800a0d2:	d804      	bhi.n	800a0de <_strtoul_l.constprop.0+0xb6>
 800a0d4:	3c57      	subs	r4, #87	@ 0x57
 800a0d6:	e7d5      	b.n	800a084 <_strtoul_l.constprop.0+0x5c>
 800a0d8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800a0dc:	e7df      	b.n	800a09e <_strtoul_l.constprop.0+0x76>
 800a0de:	1c73      	adds	r3, r6, #1
 800a0e0:	d106      	bne.n	800a0f0 <_strtoul_l.constprop.0+0xc8>
 800a0e2:	2322      	movs	r3, #34	@ 0x22
 800a0e4:	f8ce 3000 	str.w	r3, [lr]
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	b932      	cbnz	r2, 800a0fa <_strtoul_l.constprop.0+0xd2>
 800a0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f0:	b107      	cbz	r7, 800a0f4 <_strtoul_l.constprop.0+0xcc>
 800a0f2:	4240      	negs	r0, r0
 800a0f4:	2a00      	cmp	r2, #0
 800a0f6:	d0f9      	beq.n	800a0ec <_strtoul_l.constprop.0+0xc4>
 800a0f8:	b106      	cbz	r6, 800a0fc <_strtoul_l.constprop.0+0xd4>
 800a0fa:	1e69      	subs	r1, r5, #1
 800a0fc:	6011      	str	r1, [r2, #0]
 800a0fe:	e7f5      	b.n	800a0ec <_strtoul_l.constprop.0+0xc4>
 800a100:	0800a497 	.word	0x0800a497

0800a104 <_strtoul_r>:
 800a104:	f7ff bf90 	b.w	800a028 <_strtoul_l.constprop.0>

0800a108 <_malloc_usable_size_r>:
 800a108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a10c:	1f18      	subs	r0, r3, #4
 800a10e:	2b00      	cmp	r3, #0
 800a110:	bfbc      	itt	lt
 800a112:	580b      	ldrlt	r3, [r1, r0]
 800a114:	18c0      	addlt	r0, r0, r3
 800a116:	4770      	bx	lr

0800a118 <_init>:
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	bf00      	nop
 800a11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11e:	bc08      	pop	{r3}
 800a120:	469e      	mov	lr, r3
 800a122:	4770      	bx	lr

0800a124 <_fini>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr
