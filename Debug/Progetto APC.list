
Progetto APC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008070  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080081f8  080081f8  000091f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008308  08008308  0000a0e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008308  08008308  0000a0e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008308  08008308  0000a0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008308  08008308  00009308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800830c  0800830c  0000930c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08008310  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0e4  2**0
                  CONTENTS
 10 .bss          00001084  200000e4  200000e4  0000a0e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001168  20001168  0000a0e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012edc  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000363a  00000000  00000000  0001cff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00020630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c02  00000000  00000000  00021618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202e5  00000000  00000000  0002221a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000158ee  00000000  00000000  000424ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b08f1  00000000  00000000  00057ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001086de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ffc  00000000  00000000  00108724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0010c720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e4 	.word	0x200000e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081e0 	.word	0x080081e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e8 	.word	0x200000e8
 80001c4:	080081e0 	.word	0x080081e0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fbf4 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f816 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8f4 	bl	80003c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f874 	bl	80002c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f8b2 	bl	8000344 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001e0:	f007 fb72 	bl	80078c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  usart_init(115200);
 80001e4:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80001e8:	f000 faf8 	bl	80007dc <usart_init>
  usart_puts("Password Manager 3000 Starting up\n");
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <main+0x34>)
 80001ee:	f000 fb57 	bl	80008a0 <usart_puts>

  real_main();
 80001f2:	f000 f9eb 	bl	80005cc <real_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f6:	bf00      	nop
 80001f8:	e7fd      	b.n	80001f6 <main+0x2e>
 80001fa:	bf00      	nop
 80001fc:	080081f8 	.word	0x080081f8

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b09e      	sub	sp, #120	@ 0x78
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800020a:	2228      	movs	r2, #40	@ 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f007 ffba 	bl	8008188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	223c      	movs	r2, #60	@ 0x3c
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f007 ffac 	bl	8008188 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000230:	2303      	movs	r3, #3
 8000232:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000234:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000238:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000250:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000254:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fc52 	bl	8002b04 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000266:	f000 f929 	bl	80004bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000280:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000284:	2101      	movs	r1, #1
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fc7a 	bl	8003b80 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000292:	f000 f913 	bl	80004bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000296:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <SystemClock_Config+0xc0>)
 8000298:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800029e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	463b      	mov	r3, r7
 80002a6:	4618      	mov	r0, r3
 80002a8:	f003 fe3a 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002b2:	f000 f903 	bl	80004bc <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3778      	adds	r7, #120	@ 0x78
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	00020020 	.word	0x00020020

080002c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000338 <MX_I2C1_Init+0x74>)
 80002ca:	4a1c      	ldr	r2, [pc, #112]	@ (800033c <MX_I2C1_Init+0x78>)
 80002cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000338 <MX_I2C1_Init+0x74>)
 80002d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000340 <MX_I2C1_Init+0x7c>)
 80002d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002d4:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002da:	4b17      	ldr	r3, [pc, #92]	@ (8000338 <MX_I2C1_Init+0x74>)
 80002dc:	2201      	movs	r2, #1
 80002de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e0:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002e6:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <MX_I2C1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ec:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_I2C1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002fe:	480e      	ldr	r0, [pc, #56]	@ (8000338 <MX_I2C1_Init+0x74>)
 8000300:	f000 fe64 	bl	8000fcc <HAL_I2C_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030a:	f000 f8d7 	bl	80004bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800030e:	2100      	movs	r1, #0
 8000310:	4809      	ldr	r0, [pc, #36]	@ (8000338 <MX_I2C1_Init+0x74>)
 8000312:	f000 fef6 	bl	8001102 <HAL_I2CEx_ConfigAnalogFilter>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800031c:	f000 f8ce 	bl	80004bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000320:	2100      	movs	r1, #0
 8000322:	4805      	ldr	r0, [pc, #20]	@ (8000338 <MX_I2C1_Init+0x74>)
 8000324:	f000 ff38 	bl	8001198 <HAL_I2CEx_ConfigDigitalFilter>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800032e:	f000 f8c5 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000100 	.word	0x20000100
 800033c:	40005400 	.word	0x40005400
 8000340:	2000090e 	.word	0x2000090e

08000344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	@ (80003bc <MX_SPI1_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800034e:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000350:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000356:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800035c:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800035e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000362:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000364:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036a:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000370:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000376:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800037a:	2208      	movs	r2, #8
 800037c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000390:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000392:	2207      	movs	r2, #7
 8000394:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800039e:	2208      	movs	r2, #8
 80003a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <MX_SPI1_Init+0x74>)
 80003a4:	f003 ff6c 	bl	8004280 <HAL_SPI_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f885 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000154 	.word	0x20000154
 80003bc:	40013000 	.word	0x40013000

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	@ 0x28
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003d6:	4b37      	ldr	r3, [pc, #220]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a36      	ldr	r2, [pc, #216]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 80003dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b34      	ldr	r3, [pc, #208]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ee:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a30      	ldr	r2, [pc, #192]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 80003f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b2e      	ldr	r3, [pc, #184]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000406:	4b2b      	ldr	r3, [pc, #172]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a2a      	ldr	r2, [pc, #168]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 800040c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b28      	ldr	r3, [pc, #160]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b25      	ldr	r3, [pc, #148]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a24      	ldr	r2, [pc, #144]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 8000424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b22      	ldr	r3, [pc, #136]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b1f      	ldr	r3, [pc, #124]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a1e      	ldr	r2, [pc, #120]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 800043c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <MX_GPIO_Init+0xf4>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800044e:	2200      	movs	r2, #0
 8000450:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000454:	4818      	ldr	r0, [pc, #96]	@ (80004b8 <MX_GPIO_Init+0xf8>)
 8000456:	f000 fda1 	bl	8000f9c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800045a:	2337      	movs	r3, #55	@ 0x37
 800045c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800045e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	4812      	ldr	r0, [pc, #72]	@ (80004b8 <MX_GPIO_Init+0xf8>)
 8000470:	f000 fc1a 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000474:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000478:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4619      	mov	r1, r3
 800048c:	480a      	ldr	r0, [pc, #40]	@ (80004b8 <MX_GPIO_Init+0xf8>)
 800048e:	f000 fc0b 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000492:	2301      	movs	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	4619      	mov	r1, r3
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a8:	f000 fbfe 	bl	8000ca8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ac:	bf00      	nop
 80004ae:	3728      	adds	r7, #40	@ 0x28
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	48001000 	.word	0x48001000

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <Error_Handler+0x8>

080004c8 <class_init>:
#define EP_CTRL 1
#define EP_BULK 2
uint8_t cmdBuffer[16];
uint8_t bulkBuffer[512];

uint8_t class_init(USBD_HandleTypeDef *usb, uint8_t cfgid) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
	usart_puts("Password manager class init\n");
 80004d4:	4813      	ldr	r0, [pc, #76]	@ (8000524 <class_init+0x5c>)
 80004d6:	f000 f9e3 	bl	80008a0 <usart_puts>

    /* Open EP OUT Control */
    USBD_LL_OpenEP(usb, EP_CTRL, USBD_EP_TYPE_CTRL, 16);
 80004da:	2310      	movs	r3, #16
 80004dc:	2200      	movs	r2, #0
 80004de:	2101      	movs	r1, #1
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f007 fd24 	bl	8007f2e <USBD_LL_OpenEP>

    /* Open EP OUT Bulk */
    USBD_LL_OpenEP(usb, EP_BULK, USBD_EP_TYPE_BULK, sizeof(bulkBuffer));
 80004e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004ea:	2202      	movs	r2, #2
 80004ec:	2102      	movs	r1, #2
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f007 fd1d 	bl	8007f2e <USBD_LL_OpenEP>

    usb->ep_out[1].is_used = 1U;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2201      	movs	r2, #1
 80004f8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    usb->ep_out[2].is_used = 1U;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(usb, EP_CTRL, cmdBuffer, sizeof(cmdBuffer));
 8000504:	2310      	movs	r3, #16
 8000506:	4a08      	ldr	r2, [pc, #32]	@ (8000528 <class_init+0x60>)
 8000508:	2101      	movs	r1, #1
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f007 fde1 	bl	80080d2 <USBD_LL_PrepareReceive>
    USBD_LL_StallEP(usb, 2);
 8000510:	2102      	movs	r1, #2
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f007 fd31 	bl	8007f7a <USBD_LL_StallEP>
	return 0;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	0800821c 	.word	0x0800821c
 8000528:	200001b8 	.word	0x200001b8

0800052c <data_sent>:

uint8_t data_sent(USBD_HandleTypeDef *usb, uint8_t ep) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
	usart_puts("Sent data on EP");
 8000538:	4807      	ldr	r0, [pc, #28]	@ (8000558 <data_sent+0x2c>)
 800053a:	f000 f9b1 	bl	80008a0 <usart_puts>
	usart_putdec(ep);
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	b29b      	uxth	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f9c8 	bl	80008d8 <usart_putdec>
	usart_putc('\n');
 8000548:	200a      	movs	r0, #10
 800054a:	f000 f991 	bl	8000870 <usart_putc>
	return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	0800823c 	.word	0x0800823c

0800055c <data_received>:

uint8_t data_received(USBD_HandleTypeDef *usb, uint8_t ep) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
	usart_puts("Received data on EP");
 8000568:	4807      	ldr	r0, [pc, #28]	@ (8000588 <data_received+0x2c>)
 800056a:	f000 f999 	bl	80008a0 <usart_puts>
	usart_putdec(ep);
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	b29b      	uxth	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f9b0 	bl	80008d8 <usart_putdec>
	usart_putc('\n');
 8000578:	200a      	movs	r0, #10
 800057a:	f000 f979 	bl	8000870 <usart_putc>
	return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	0800824c 	.word	0x0800824c

0800058c <descriptor>:
		0x00, 0x01, // BCD Version
		0xEE, // Vendor Code
		3, // Landing page String Index
};

uint8_t *descriptor(uint16_t *len) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	*len = sizeof(class_descriptor);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	223f      	movs	r2, #63	@ 0x3f
 8000598:	801a      	strh	r2, [r3, #0]
	return class_descriptor;
 800059a:	4b03      	ldr	r3, [pc, #12]	@ (80005a8 <descriptor+0x1c>)
}
 800059c:	4618      	mov	r0, r3
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000000 	.word	0x20000000

080005ac <handle_setup>:

uint8_t *handle_setup(USBD_HandleTypeDef *usb, USBD_SetupReqTypedef *req) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	usart_puts("Handle setup");
 80005b6:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <handle_setup+0x1c>)
 80005b8:	f000 f972 	bl	80008a0 <usart_puts>
	return 1;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	08008260 	.word	0x08008260

080005cc <real_main>:
		.GetFSConfigDescriptor = descriptor,
		.GetOtherSpeedConfigDescriptor = descriptor,
		.GetDeviceQualifierDescriptor = NULL,
};

void real_main() {
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <HAL_MspInit+0x44>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <HAL_MspInit+0x44>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <HAL_MspInit+0x44>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <HAL_MspInit+0x44>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <HAL_MspInit+0x44>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <HAL_MspInit+0x44>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000612:	2007      	movs	r0, #7
 8000614:	f000 fb06 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a17      	ldr	r2, [pc, #92]	@ (80006a0 <HAL_I2C_MspInit+0x7c>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d127      	bne.n	8000696 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <HAL_I2C_MspInit+0x80>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a16      	ldr	r2, [pc, #88]	@ (80006a4 <HAL_I2C_MspInit+0x80>)
 800064c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_I2C_MspInit+0x80>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800065e:	23c0      	movs	r3, #192	@ 0xc0
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000662:	2312      	movs	r3, #18
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000666:	2301      	movs	r3, #1
 8000668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066a:	2303      	movs	r3, #3
 800066c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800066e:	2304      	movs	r3, #4
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	480b      	ldr	r0, [pc, #44]	@ (80006a8 <HAL_I2C_MspInit+0x84>)
 800067a:	f000 fb15 	bl	8000ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <HAL_I2C_MspInit+0x80>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <HAL_I2C_MspInit+0x80>)
 8000684:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_I2C_MspInit+0x80>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40005400 	.word	0x40005400
 80006a4:	40021000 	.word	0x40021000
 80006a8:	48000400 	.word	0x48000400

080006ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <HAL_SPI_MspInit+0x7c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d128      	bne.n	8000720 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a16      	ldr	r2, [pc, #88]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a10      	ldr	r2, [pc, #64]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006fe:	23e0      	movs	r3, #224	@ 0xe0
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800070e:	2305      	movs	r3, #5
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071c:	f000 fac4 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40013000 	.word	0x40013000
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <MemManage_Handler+0x4>

08000748 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <UsageFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000786:	f000 f95d 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000794:	4802      	ldr	r0, [pc, #8]	@ (80007a0 <USB_HP_CAN_TX_IRQHandler+0x10>)
 8000796:	f000 fe38 	bl	800140a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000e94 	.word	0x20000e94

080007a4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007a8:	4802      	ldr	r0, [pc, #8]	@ (80007b4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80007aa:	f000 fe2e 	bl	800140a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000e94 	.word	0x20000e94

080007b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <SystemInit+0x20>)
 80007be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007c2:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <SystemInit+0x20>)
 80007c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <usart_init>:
#include "usart.h"

#include <stm32f303xc.h>

void usart_init(int baud) {
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <usart_init+0x84>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000860 <usart_init+0x84>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ee:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;  // Used by USART1
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <usart_init+0x84>)
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000860 <usart_init+0x84>)
 80007f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007fa:	6153      	str	r3, [r2, #20]
    // GPIOC 4, 5 Alternate function
    GPIOC->MODER &= ~(GPIO_MODER_MODER4 | GPIO_MODER_MODER5);
 80007fc:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <usart_init+0x88>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <usart_init+0x88>)
 8000802:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000806:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1;
 8000808:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <usart_init+0x88>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a15      	ldr	r2, [pc, #84]	@ (8000864 <usart_init+0x88>)
 800080e:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8000812:	6013      	str	r3, [r2, #0]
    // GPIOC 4,5 Alternate function 7 (USART 1 TX/RX)
    // STM32F3Datasheet.pdf Page 47
    GPIOC->AFR[0] &= ~(GPIO_AFRL_AFRL4 | GPIO_AFRL_AFRL5);
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <usart_init+0x88>)
 8000816:	6a1b      	ldr	r3, [r3, #32]
 8000818:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <usart_init+0x88>)
 800081a:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800081e:	6213      	str	r3, [r2, #32]
    GPIOC->AFR[0] |= (7 << 16) | (7 << 20);
 8000820:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <usart_init+0x88>)
 8000822:	6a1b      	ldr	r3, [r3, #32]
 8000824:	4a0f      	ldr	r2, [pc, #60]	@ (8000864 <usart_init+0x88>)
 8000826:	f443 03ee 	orr.w	r3, r3, #7798784	@ 0x770000
 800082a:	6213      	str	r3, [r2, #32]

    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <usart_init+0x8c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <usart_init+0x8c>)
 8000832:	f043 030c 	orr.w	r3, r3, #12
 8000836:	6013      	str	r3, [r2, #0]
    USART1->BRR = SystemCoreClock / baud;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <usart_init+0x90>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	490a      	ldr	r1, [pc, #40]	@ (8000868 <usart_init+0x8c>)
 8000840:	fbb2 f3f3 	udiv	r3, r2, r3
 8000844:	60cb      	str	r3, [r1, #12]
    USART1->CR1 |= USART_CR1_UE;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <usart_init+0x8c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a07      	ldr	r2, [pc, #28]	@ (8000868 <usart_init+0x8c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6013      	str	r3, [r2, #0]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800
 8000868:	40013800 	.word	0x40013800
 800086c:	20000078 	.word	0x20000078

08000870 <usart_putc>:

void usart_putc(char ch) {
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
    // Wait for USART1->ISR->TXE to be set
    while ((USART1->ISR & USART_ISR_TXE) == 0)
 800087a:	bf00      	nop
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <usart_putc+0x2c>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0f9      	beq.n	800087c <usart_putc+0xc>
        ;
    USART1->TDR = ch;
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <usart_putc+0x2c>)
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	b292      	uxth	r2, r2
 800088e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40013800 	.word	0x40013800

080008a0 <usart_puts>:

void usart_puts(const char *str) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    for (int i = 0; str[i] != '\0'; i++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	e009      	b.n	80008c2 <usart_puts+0x22>
        usart_putc(str[i]);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffda 	bl	8000870 <usart_putc>
    for (int i = 0; str[i] != '\0'; i++) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1ef      	bne.n	80008ae <usart_puts+0xe>
    }
}
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <usart_putdec>:

        word = word << 4;
    }
}

void usart_putdec(uint16_t halfword) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
    char buff[5];
    int n;

    for(n=0;n<5;n++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e01f      	b.n	8000928 <usart_putdec+0x50>
        uint8_t v = halfword %  10 + '0';
 80008e8:	88fa      	ldrh	r2, [r7, #6]
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <usart_putdec+0x88>)
 80008ec:	fba3 1302 	umull	r1, r3, r3, r2
 80008f0:	08d9      	lsrs	r1, r3, #3
 80008f2:	460b      	mov	r3, r1
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	440b      	add	r3, r1
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	3330      	adds	r3, #48	@ 0x30
 8000902:	73fb      	strb	r3, [r7, #15]
        buff[n] = v;
 8000904:	f107 0208 	add.w	r2, r7, #8
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	4413      	add	r3, r2
 800090c:	7bfa      	ldrb	r2, [r7, #15]
 800090e:	701a      	strb	r2, [r3, #0]
        halfword /= 10;
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	4a13      	ldr	r2, [pc, #76]	@ (8000960 <usart_putdec+0x88>)
 8000914:	fba2 2303 	umull	r2, r3, r2, r3
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	80fb      	strh	r3, [r7, #6]
        if (halfword == 0) break;
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d006      	beq.n	8000930 <usart_putdec+0x58>
    for(n=0;n<5;n++) {
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	2b04      	cmp	r3, #4
 800092c:	dddc      	ble.n	80008e8 <usart_putdec+0x10>
 800092e:	e000      	b.n	8000932 <usart_putdec+0x5a>
        if (halfword == 0) break;
 8000930:	bf00      	nop
    }

    for (int i=n;i>=0;i--) {
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	e00a      	b.n	800094e <usart_putdec+0x76>
        usart_putc(buff[i]);
 8000938:	f107 0208 	add.w	r2, r7, #8
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff94 	bl	8000870 <usart_putc>
    for (int i=n;i>=0;i--) {
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	3b01      	subs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	2b00      	cmp	r3, #0
 8000952:	daf1      	bge.n	8000938 <usart_putdec+0x60>
    }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	cccccccd 	.word	0xcccccccd

08000964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800099c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000968:	f7ff ff26 	bl	80007b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	@ (80009a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <LoopForever+0xe>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	@ (80009b0 <LoopForever+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000992:	f007 fc01 	bl	8008198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000996:	f7ff fc17 	bl	80001c8 <main>

0800099a <LoopForever>:

LoopForever:
    b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800099c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80009a8:	08008310 	.word	0x08008310
  ldr r2, =_sbss
 80009ac:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 80009b0:	20001168 	.word	0x20001168

080009b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_2_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_Init+0x28>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <HAL_Init+0x28>)
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f92b 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fe02 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40022000 	.word	0x40022000

080009e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f943 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a20:	f000 f90b 	bl	8000c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	@ (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000078 	.word	0x20000078
 8000a3c:	20000080 	.word	0x20000080
 8000a40:	2000007c 	.word	0x2000007c

08000a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000080 	.word	0x20000080
 8000a68:	200001c8 	.word	0x200001c8

08000a6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a70:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200001c8 	.word	0x200001c8

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	@ (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	@ 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	@ 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff29 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff3e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff31 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffa2 	bl	8000be0 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb6:	e154      	b.n	8000f62 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8146 	beq.w	8000f5c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d005      	beq.n	8000ce8 <HAL_GPIO_Init+0x40>
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d130      	bne.n	8000d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	f003 0201 	and.w	r2, r3, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d017      	beq.n	8000d86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d123      	bne.n	8000dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	6939      	ldr	r1, [r7, #16]
 8000dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0203 	and.w	r2, r3, #3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 80a0 	beq.w	8000f5c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	4b58      	ldr	r3, [pc, #352]	@ (8000f80 <HAL_GPIO_Init+0x2d8>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a57      	ldr	r2, [pc, #348]	@ (8000f80 <HAL_GPIO_Init+0x2d8>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b55      	ldr	r3, [pc, #340]	@ (8000f80 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e34:	4a53      	ldr	r2, [pc, #332]	@ (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e5e:	d019      	beq.n	8000e94 <HAL_GPIO_Init+0x1ec>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a49      	ldr	r2, [pc, #292]	@ (8000f88 <HAL_GPIO_Init+0x2e0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d013      	beq.n	8000e90 <HAL_GPIO_Init+0x1e8>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a48      	ldr	r2, [pc, #288]	@ (8000f8c <HAL_GPIO_Init+0x2e4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d00d      	beq.n	8000e8c <HAL_GPIO_Init+0x1e4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a47      	ldr	r2, [pc, #284]	@ (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d007      	beq.n	8000e88 <HAL_GPIO_Init+0x1e0>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a46      	ldr	r2, [pc, #280]	@ (8000f94 <HAL_GPIO_Init+0x2ec>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d101      	bne.n	8000e84 <HAL_GPIO_Init+0x1dc>
 8000e80:	2304      	movs	r3, #4
 8000e82:	e008      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e84:	2305      	movs	r3, #5
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e94:	2300      	movs	r3, #0
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea6:	4937      	ldr	r1, [pc, #220]	@ (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb4:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ede:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f02:	4a25      	ldr	r2, [pc, #148]	@ (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f56:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f aea3 	bne.w	8000cb8 <HAL_GPIO_Init+0x10>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010000 	.word	0x40010000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	48000c00 	.word	0x48000c00
 8000f94:	48001000 	.word	0x48001000
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e08d      	b.n	80010fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d106      	bne.n	8000ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fb16 	bl	8000624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2224      	movs	r2, #36	@ 0x24
 8000ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0201 	bic.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800101c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800102c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d107      	bne.n	8001046 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	e006      	b.n	8001054 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001052:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d108      	bne.n	800106e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	e007      	b.n	800107e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800107c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800108c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69d9      	ldr	r1, [r3, #28]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1a      	ldr	r2, [r3, #32]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0201 	orr.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2220      	movs	r2, #32
 80010e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b20      	cmp	r3, #32
 8001116:	d138      	bne.n	800118a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001122:	2302      	movs	r3, #2
 8001124:	e032      	b.n	800118c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2224      	movs	r2, #36	@ 0x24
 8001132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001154:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0201 	orr.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2220      	movs	r2, #32
 800117a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800118a:	2302      	movs	r3, #2
  }
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b20      	cmp	r3, #32
 80011ac:	d139      	bne.n	8001222 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e033      	b.n	8001224 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2224      	movs	r2, #36	@ 0x24
 80011c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0201 	orr.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2220      	movs	r2, #32
 8001212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001222:	2302      	movs	r3, #2
  }
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0b9      	b.n	80013b6 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f006 fd04 	bl	8007c64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2203      	movs	r2, #3
 8001260:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f003 f8cb 	bl	8004404 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e03e      	b.n	80012f2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	3311      	adds	r3, #17
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	3310      	adds	r3, #16
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	3313      	adds	r3, #19
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	3320      	adds	r3, #32
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	3324      	adds	r3, #36	@ 0x24
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	3301      	adds	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	791b      	ldrb	r3, [r3, #4]
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3bb      	bcc.n	8001274 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e044      	b.n	800138c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	440b      	add	r3, r1
 800133c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3301      	adds	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	429a      	cmp	r2, r3
 8001394:	d3b5      	bcc.n	8001302 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3304      	adds	r3, #4
 800139e:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013a2:	f003 f84a 	bl	800443a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_PCD_Start+0x16>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e016      	b.n	8001402 <HAL_PCD_Start+0x44>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fff8 	bl	80043d6 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013e6:	2101      	movs	r1, #1
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f006 fe95 	bl	8008118 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 f8c9 	bl	800658a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f005 f8c2 	bl	80065a0 <USB_ReadInterrupts>
 800141c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fa51 	bl	80018d0 <PCD_EP_ISR_Handler>

    return;
 800142e:	e0bd      	b.n	80015ac <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001436:	2b00      	cmp	r3, #0
 8001438:	d013      	beq.n	8001462 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001442:	b29a      	uxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800144c:	b292      	uxth	r2, r2
 800144e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f006 fcaf 	bl	8007db6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001458:	2100      	movs	r1, #0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f8a9 	bl	80015b2 <HAL_PCD_SetAddress>

    return;
 8001460:	e0a4      	b.n	80015ac <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00c      	beq.n	8001486 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001474:	b29a      	uxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800147e:	b292      	uxth	r2, r2
 8001480:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001484:	e092      	b.n	80015ac <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00c      	beq.n	80014aa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001498:	b29a      	uxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014a2:	b292      	uxth	r2, r2
 80014a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014a8:	e080      	b.n	80015ac <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d027      	beq.n	8001504 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014bc:	b29a      	uxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0204 	bic.w	r2, r2, #4
 80014c6:	b292      	uxth	r2, r2
 80014c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0208 	bic.w	r2, r2, #8
 80014de:	b292      	uxth	r2, r2
 80014e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f006 fc9f 	bl	8007e28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014fc:	b292      	uxth	r2, r2
 80014fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001502:	e053      	b.n	80015ac <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800150a:	2b00      	cmp	r3, #0
 800150c:	d027      	beq.n	800155e <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001516:	b29a      	uxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0208 	orr.w	r2, r2, #8
 8001520:	b292      	uxth	r2, r2
 8001522:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001538:	b292      	uxth	r2, r2
 800153a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 0204 	orr.w	r2, r2, #4
 8001550:	b292      	uxth	r2, r2
 8001552:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f006 fc4c 	bl	8007df4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800155c:	e026      	b.n	80015ac <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00f      	beq.n	8001588 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800157a:	b292      	uxth	r2, r2
 800157c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f006 fc0a 	bl	8007d9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001586:	e011      	b.n	80015ac <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00c      	beq.n	80015ac <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015aa:	bf00      	nop
  }
}
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_PCD_SetAddress+0x1a>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e012      	b.n	80015f2 <HAL_PCD_SetAddress+0x40>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 ffbd 	bl	8006562 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	4608      	mov	r0, r1
 8001604:	4611      	mov	r1, r2
 8001606:	461a      	mov	r2, r3
 8001608:	4603      	mov	r3, r0
 800160a:	70fb      	strb	r3, [r7, #3]
 800160c:	460b      	mov	r3, r1
 800160e:	803b      	strh	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	da0e      	bge.n	800163e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	f003 0207 	and.w	r2, r3, #7
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	3310      	adds	r3, #16
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	705a      	strb	r2, [r3, #1]
 800163c:	e00e      	b.n	800165c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	f003 0207 	and.w	r2, r3, #7
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	b2da      	uxtb	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001668:	883a      	ldrh	r2, [r7, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	78ba      	ldrb	r2, [r7, #2]
 8001672:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001674:	78bb      	ldrb	r3, [r7, #2]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d102      	bne.n	8001680 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_PCD_EP_Open+0x94>
 800168a:	2302      	movs	r3, #2
 800168c:	e00e      	b.n	80016ac <HAL_PCD_EP_Open+0xb2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 feeb 	bl	8004478 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80016aa:	7afb      	ldrb	r3, [r7, #11]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	460b      	mov	r3, r1
 80016c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	f003 0207 	and.w	r2, r3, #7
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2200      	movs	r2, #0
 80016f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6979      	ldr	r1, [r7, #20]
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fa7a 	bl	8004c00 <USB_EPStartXfer>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	460b      	mov	r3, r1
 8001724:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	f003 0207 	and.w	r2, r3, #7
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	3310      	adds	r3, #16
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4413      	add	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2201      	movs	r2, #1
 8001760:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	b2da      	uxtb	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6979      	ldr	r1, [r7, #20]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fa43 	bl	8004c00 <USB_EPStartXfer>

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	7912      	ldrb	r2, [r2, #4]
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e03e      	b.n	8001820 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da0e      	bge.n	80017c8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 0207 	and.w	r2, r3, #7
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	3310      	adds	r3, #16
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	705a      	strb	r2, [r3, #1]
 80017c6:	e00c      	b.n	80017e2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_PCD_EP_SetStall+0x7e>
 80017fe:	2302      	movs	r3, #2
 8001800:	e00e      	b.n	8001820 <HAL_PCD_EP_SetStall+0x9c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68f9      	ldr	r1, [r7, #12]
 8001810:	4618      	mov	r0, r3
 8001812:	f004 fda7 	bl	8006364 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	7912      	ldrb	r2, [r2, #4]
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e040      	b.n	80018c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da0e      	bge.n	800186c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	f003 0207 	and.w	r2, r3, #7
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	3310      	adds	r3, #16
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	705a      	strb	r2, [r3, #1]
 800186a:	e00e      	b.n	800188a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 0207 	and.w	r2, r3, #7
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	b2da      	uxtb	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_PCD_EP_ClrStall+0x82>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e00e      	b.n	80018c8 <HAL_PCD_EP_ClrStall+0xa0>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68f9      	ldr	r1, [r7, #12]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f004 fda4 	bl	8006406 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b096      	sub	sp, #88	@ 0x58
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018d8:	e3bb      	b.n	8002052 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018e2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80018f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f040 8175 	bne.w	8001be8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	d14e      	bne.n	80019a8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800191a:	81fb      	strh	r3, [r7, #14]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800192a:	b29b      	uxth	r3, r3
 800192c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3310      	adds	r3, #16
 8001932:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	3302      	adds	r3, #2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	4413      	add	r3, r2
 8001952:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800195c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	441a      	add	r2, r3
 800196a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f006 f9f8 	bl	8007d66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b1b      	ldrb	r3, [r3, #12]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8368 	beq.w	8002052 <PCD_EP_ISR_Handler+0x782>
 8001982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 8363 	bne.w	8002052 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7b1b      	ldrb	r3, [r3, #12]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001996:	b2da      	uxtb	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	731a      	strb	r2, [r3, #12]
 80019a6:	e354      	b.n	8002052 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019ae:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80019be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d034      	beq.n	8001a30 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	3306      	adds	r3, #6
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80019fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f004 fe21 	bl	800664c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a16:	4013      	ands	r3, r2
 8001a18:	823b      	strh	r3, [r7, #16]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	8a3a      	ldrh	r2, [r7, #16]
 8001a20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a24:	b292      	uxth	r2, r2
 8001a26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f006 f96f 	bl	8007d0c <HAL_PCD_SetupStageCallback>
 8001a2e:	e310      	b.n	8002052 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a30:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f280 830c 	bge.w	8002052 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a46:	4013      	ands	r3, r2
 8001a48:	83fb      	strh	r3, [r7, #30]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	8bfa      	ldrh	r2, [r7, #30]
 8001a50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a54:	b292      	uxth	r2, r2
 8001a56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3306      	adds	r3, #6
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a82:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d019      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x1f0>
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d015      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9a:	6959      	ldr	r1, [r3, #20]
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f004 fdd1 	bl	800664c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	441a      	add	r2, r3
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f006 f938 	bl	8007d30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001aca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 82bd 	bne.w	8002052 <PCD_EP_ISR_Handler+0x782>
 8001ad8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001adc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001ae0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001ae4:	f000 82b5 	beq.w	8002052 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4413      	add	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	801a      	strh	r2, [r3, #0]
 8001b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10a      	bne.n	8001b36 <PCD_EP_ISR_Handler+0x266>
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	801a      	strh	r2, [r3, #0]
 8001b34:	e039      	b.n	8001baa <PCD_EP_ISR_Handler+0x2da>
 8001b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b3c:	d818      	bhi.n	8001b70 <PCD_EP_ISR_Handler+0x2a0>
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <PCD_EP_ISR_Handler+0x288>
 8001b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b54:	3301      	adds	r3, #1
 8001b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	029b      	lsls	r3, r3, #10
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	e01c      	b.n	8001baa <PCD_EP_ISR_Handler+0x2da>
 8001b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <PCD_EP_ISR_Handler+0x2ba>
 8001b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b86:	3b01      	subs	r3, #1
 8001b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bba:	827b      	strh	r3, [r7, #18]
 8001bbc:	8a7b      	ldrh	r3, [r7, #18]
 8001bbe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001bc2:	827b      	strh	r3, [r7, #18]
 8001bc4:	8a7b      	ldrh	r3, [r7, #18]
 8001bc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001bca:	827b      	strh	r3, [r7, #18]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	8a7b      	ldrh	r3, [r7, #18]
 8001bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	8013      	strh	r3, [r2, #0]
 8001be6:	e234      	b.n	8002052 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bfc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f280 80fc 	bge.w	8001dfe <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001c34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c3c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c54:	7b1b      	ldrb	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d125      	bne.n	8001ca6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3306      	adds	r3, #6
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001c86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8092 	beq.w	8001db4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c96:	6959      	ldr	r1, [r3, #20]
 8001c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9a:	88da      	ldrh	r2, [r3, #6]
 8001c9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ca0:	f004 fcd4 	bl	800664c <USB_ReadPMA>
 8001ca4:	e086      	b.n	8001db4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca8:	78db      	ldrb	r3, [r3, #3]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d10a      	bne.n	8001cc4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001cae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f9d9 	bl	800206e <HAL_PCD_EP_DB_Receive>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001cc2:	e077      	b.n	8001db4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cde:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	441a      	add	r2, r3
 8001cf0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001cf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d024      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	3302      	adds	r3, #2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d4a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d02e      	beq.n	8001db4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5c:	6959      	ldr	r1, [r3, #20]
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d60:	891a      	ldrh	r2, [r3, #8]
 8001d62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d66:	f004 fc71 	bl	800664c <USB_ReadPMA>
 8001d6a:	e023      	b.n	8001db4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3306      	adds	r3, #6
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d94:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da6:	6959      	ldr	r1, [r3, #20]
 8001da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001daa:	895a      	ldrh	r2, [r3, #10]
 8001dac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001db0:	f004 fc4c 	bl	800664c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dbc:	441a      	add	r2, r3
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dca:	441a      	add	r2, r3
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <PCD_EP_ISR_Handler+0x514>
 8001dd8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d206      	bcs.n	8001df2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f005 ffa0 	bl	8007d30 <HAL_PCD_DataOutStageCallback>
 8001df0:	e005      	b.n	8001dfe <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 ff01 	bl	8004c00 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dfe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8123 	beq.w	8002052 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e0c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	3310      	adds	r3, #16
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	441a      	add	r2, r3
 8001e4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5e:	78db      	ldrb	r3, [r3, #3]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	f040 80a2 	bne.w	8001faa <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	7b1b      	ldrb	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8093 	beq.w	8001f9c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d046      	beq.n	8001f10 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d126      	bne.n	8001ed8 <PCD_EP_ISR_Handler+0x608>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	4413      	add	r3, r2
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	011a      	lsls	r2, r3, #4
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	4413      	add	r3, r2
 8001eac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001eb0:	623b      	str	r3, [r7, #32]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	e061      	b.n	8001f9c <PCD_EP_ISR_Handler+0x6cc>
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eda:	785b      	ldrb	r3, [r3, #1]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d15d      	bne.n	8001f9c <PCD_EP_ISR_Handler+0x6cc>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef4:	4413      	add	r3, r2
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	011a      	lsls	r2, r3, #4
 8001efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f00:	4413      	add	r3, r2
 8001f02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	e045      	b.n	8001f9c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d126      	bne.n	8001f6c <PCD_EP_ISR_Handler+0x69c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f32:	4413      	add	r3, r2
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	011a      	lsls	r2, r3, #4
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f3e:	4413      	add	r3, r2
 8001f40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	e017      	b.n	8001f9c <PCD_EP_ISR_Handler+0x6cc>
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6e:	785b      	ldrb	r3, [r3, #1]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d113      	bne.n	8001f9c <PCD_EP_ISR_Handler+0x6cc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f82:	4413      	add	r3, r2
 8001f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	011a      	lsls	r2, r3, #4
 8001f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f8e:	4413      	add	r3, r2
 8001f90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f98:	2200      	movs	r2, #0
 8001f9a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f005 fedf 	bl	8007d66 <HAL_PCD_DataInStageCallback>
 8001fa8:	e053      	b.n	8002052 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001faa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d146      	bne.n	8002044 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3302      	adds	r3, #2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fde:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d907      	bls.n	8001ffe <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ff6:	1ad2      	subs	r2, r2, r3
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	619a      	str	r2, [r3, #24]
 8001ffc:	e002      	b.n	8002004 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800200c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f005 fea7 	bl	8007d66 <HAL_PCD_DataInStageCallback>
 8002018:	e01b      	b.n	8002052 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800201a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002022:	441a      	add	r2, r3
 8002024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002026:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002030:	441a      	add	r2, r3
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800203c:	4618      	mov	r0, r3
 800203e:	f002 fddf 	bl	8004c00 <USB_EPStartXfer>
 8002042:	e006      	b.n	8002052 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002044:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002048:	461a      	mov	r2, r3
 800204a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f91b 	bl	8002288 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800205a:	b29b      	uxth	r3, r3
 800205c:	b21b      	sxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	f6ff ac3b 	blt.w	80018da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3758      	adds	r7, #88	@ 0x58
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b088      	sub	sp, #32
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	4613      	mov	r3, r2
 800207a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d07e      	beq.n	8002184 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	3302      	adds	r3, #2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	699a      	ldr	r2, [r3, #24]
 80020b4:	8b7b      	ldrh	r3, [r7, #26]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d306      	bcc.n	80020c8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	8b7b      	ldrh	r3, [r7, #26]
 80020c0:	1ad2      	subs	r2, r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	619a      	str	r2, [r3, #24]
 80020c6:	e002      	b.n	80020ce <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d123      	bne.n	800211e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020f0:	833b      	strh	r3, [r7, #24]
 80020f2:	8b3b      	ldrh	r3, [r7, #24]
 80020f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020f8:	833b      	strh	r3, [r7, #24]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	441a      	add	r2, r3
 8002108:	8b3b      	ldrh	r3, [r7, #24]
 800210a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800210e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800211a:	b29b      	uxth	r3, r3
 800211c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01f      	beq.n	8002168 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800213e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002142:	82fb      	strh	r3, [r7, #22]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	8afb      	ldrh	r3, [r7, #22]
 8002154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800215c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002160:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002164:	b29b      	uxth	r3, r3
 8002166:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002168:	8b7b      	ldrh	r3, [r7, #26]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8087 	beq.w	800227e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	6959      	ldr	r1, [r3, #20]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	891a      	ldrh	r2, [r3, #8]
 800217c:	8b7b      	ldrh	r3, [r7, #26]
 800217e:	f004 fa65 	bl	800664c <USB_ReadPMA>
 8002182:	e07c      	b.n	800227e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800218c:	b29b      	uxth	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	3306      	adds	r3, #6
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	8b7b      	ldrh	r3, [r7, #26]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d306      	bcc.n	80021c6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	8b7b      	ldrh	r3, [r7, #26]
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	619a      	str	r2, [r3, #24]
 80021c4:	e002      	b.n	80021cc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d123      	bne.n	800221c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ee:	83fb      	strh	r3, [r7, #30]
 80021f0:	8bfb      	ldrh	r3, [r7, #30]
 80021f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021f6:	83fb      	strh	r3, [r7, #30]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	8bfb      	ldrh	r3, [r7, #30]
 8002208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800220c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002218:	b29b      	uxth	r3, r3
 800221a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d11f      	bne.n	8002266 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800223c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002240:	83bb      	strh	r3, [r7, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	8bbb      	ldrh	r3, [r7, #28]
 8002252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800225a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800225e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002262:	b29b      	uxth	r3, r3
 8002264:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002266:	8b7b      	ldrh	r3, [r7, #26]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	6959      	ldr	r1, [r3, #20]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	895a      	ldrh	r2, [r3, #10]
 8002278:	8b7b      	ldrh	r3, [r7, #26]
 800227a:	f004 f9e7 	bl	800664c <USB_ReadPMA>
    }
  }

  return count;
 800227e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0a4      	sub	sp, #144	@ 0x90
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 81dd 	beq.w	800265c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	3302      	adds	r3, #2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ca:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d907      	bls.n	80022ea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	619a      	str	r2, [r3, #24]
 80022e8:	e002      	b.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 80b9 	bne.w	800246c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	785b      	ldrb	r3, [r3, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d126      	bne.n	8002350 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002310:	b29b      	uxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002316:	4413      	add	r3, r2
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	011a      	lsls	r2, r3, #4
 8002320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002322:	4413      	add	r3, r2
 8002324:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002334:	b29a      	uxth	r2, r3
 8002336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002338:	801a      	strh	r2, [r3, #0]
 800233a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002348:	b29a      	uxth	r2, r3
 800234a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	e01a      	b.n	8002386 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d116      	bne.n	8002386 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	637b      	str	r3, [r7, #52]	@ 0x34
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800236c:	4413      	add	r3, r2
 800236e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	011a      	lsls	r2, r3, #4
 8002376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002378:	4413      	add	r3, r2
 800237a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	2200      	movs	r2, #0
 8002384:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d126      	bne.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	011a      	lsls	r2, r3, #4
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023da:	b29a      	uxth	r2, r3
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	801a      	strh	r2, [r3, #0]
 80023e0:	e017      	b.n	8002412 <HAL_PCD_EP_DB_Transmit+0x18a>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	785b      	ldrb	r3, [r3, #1]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d113      	bne.n	8002412 <HAL_PCD_EP_DB_Transmit+0x18a>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	4413      	add	r3, r2
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	011a      	lsls	r2, r3, #4
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	4413      	add	r3, r2
 8002406:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800240a:	623b      	str	r3, [r7, #32]
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f005 fca4 	bl	8007d66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 82fc 	beq.w	8002a22 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002444:	82fb      	strh	r3, [r7, #22]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	441a      	add	r2, r3
 8002454:	8afb      	ldrh	r3, [r7, #22]
 8002456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800245a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800245e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002466:	b29b      	uxth	r3, r3
 8002468:	8013      	strh	r3, [r2, #0]
 800246a:	e2da      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d021      	beq.n	80024ba <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800248c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002490:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	441a      	add	r2, r3
 80024a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80024a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 82ae 	bne.w	8002a22 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80024ce:	441a      	add	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80024dc:	441a      	add	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d30b      	bcc.n	8002506 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	6a1a      	ldr	r2, [r3, #32]
 80024fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024fe:	1ad2      	subs	r2, r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	621a      	str	r2, [r3, #32]
 8002504:	e017      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800250e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800251e:	e00a      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2200      	movs	r2, #0
 8002534:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d165      	bne.n	800260a <HAL_PCD_EP_DB_Transmit+0x382>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002552:	4413      	add	r3, r2
 8002554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	011a      	lsls	r2, r3, #4
 800255c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255e:	4413      	add	r3, r2
 8002560:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002570:	b29a      	uxth	r2, r3
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0x30c>
 800257e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258c:	b29a      	uxth	r2, r3
 800258e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e057      	b.n	8002644 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002598:	2b3e      	cmp	r3, #62	@ 0x3e
 800259a:	d818      	bhi.n	80025ce <HAL_PCD_EP_DB_Transmit+0x346>
 800259c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x32e>
 80025b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025b2:	3301      	adds	r3, #1
 80025b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025be:	b29b      	uxth	r3, r3
 80025c0:	029b      	lsls	r3, r3, #10
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ca:	801a      	strh	r2, [r3, #0]
 80025cc:	e03a      	b.n	8002644 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_PCD_EP_DB_Transmit+0x360>
 80025e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025e4:	3b01      	subs	r3, #1
 80025e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4313      	orrs	r3, r2
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002602:	b29a      	uxth	r2, r3
 8002604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002606:	801a      	strh	r2, [r3, #0]
 8002608:	e01c      	b.n	8002644 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d118      	bne.n	8002644 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	647b      	str	r3, [r7, #68]	@ 0x44
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002620:	b29b      	uxth	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002626:	4413      	add	r3, r2
 8002628:	647b      	str	r3, [r7, #68]	@ 0x44
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	011a      	lsls	r2, r3, #4
 8002630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002632:	4413      	add	r3, r2
 8002634:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002638:	643b      	str	r3, [r7, #64]	@ 0x40
 800263a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800263e:	b29a      	uxth	r2, r3
 8002640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002642:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	6959      	ldr	r1, [r3, #20]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	891a      	ldrh	r2, [r3, #8]
 8002650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002654:	b29b      	uxth	r3, r3
 8002656:	f003 ffb3 	bl	80065c0 <USB_WritePMA>
 800265a:	e1e2      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	3306      	adds	r3, #6
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002684:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002690:	429a      	cmp	r2, r3
 8002692:	d307      	bcc.n	80026a4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800269c:	1ad2      	subs	r2, r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	619a      	str	r2, [r3, #24]
 80026a2:	e002      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 80c0 	bne.w	8002834 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d126      	bne.n	800270a <HAL_PCD_EP_DB_Transmit+0x482>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026d0:	4413      	add	r3, r2
 80026d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	011a      	lsls	r2, r3, #4
 80026da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026dc:	4413      	add	r3, r2
 80026de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002702:	b29a      	uxth	r2, r3
 8002704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002706:	801a      	strh	r2, [r3, #0]
 8002708:	e01a      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	785b      	ldrb	r3, [r3, #1]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d116      	bne.n	8002740 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	667b      	str	r3, [r7, #100]	@ 0x64
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002726:	4413      	add	r3, r2
 8002728:	667b      	str	r3, [r7, #100]	@ 0x64
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	011a      	lsls	r2, r3, #4
 8002730:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002732:	4413      	add	r3, r2
 8002734:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002738:	663b      	str	r3, [r7, #96]	@ 0x60
 800273a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800273c:	2200      	movs	r2, #0
 800273e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	677b      	str	r3, [r7, #116]	@ 0x74
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d12b      	bne.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002762:	4413      	add	r3, r2
 8002764:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	011a      	lsls	r2, r3, #4
 800276c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800276e:	4413      	add	r3, r2
 8002770:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002778:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002784:	b29a      	uxth	r2, r3
 8002786:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279c:	b29a      	uxth	r2, r3
 800279e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	e017      	b.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d113      	bne.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027bc:	4413      	add	r3, r2
 80027be:	677b      	str	r3, [r7, #116]	@ 0x74
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	011a      	lsls	r2, r3, #4
 80027c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c8:	4413      	add	r3, r2
 80027ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80027d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027d2:	2200      	movs	r2, #0
 80027d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	4619      	mov	r1, r3
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f005 fac2 	bl	8007d66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 811a 	bne.w	8002a22 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002808:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800281e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002826:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800282a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800282e:	b29b      	uxth	r3, r3
 8002830:	8013      	strh	r3, [r2, #0]
 8002832:	e0f6      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d121      	bne.n	8002882 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002858:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800286e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002876:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800287a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800287e:	b29b      	uxth	r3, r3
 8002880:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002888:	2b01      	cmp	r3, #1
 800288a:	f040 80ca 	bne.w	8002a22 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002896:	441a      	add	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80028a4:	441a      	add	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d30b      	bcc.n	80028ce <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c6:	1ad2      	subs	r2, r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	621a      	str	r2, [r3, #32]
 80028cc:	e017      	b.n	80028fe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d108      	bne.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80028d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80028da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028e6:	e00a      	b.n	80028fe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2200      	movs	r2, #0
 80028f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	657b      	str	r3, [r7, #84]	@ 0x54
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d165      	bne.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x750>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002920:	4413      	add	r3, r2
 8002922:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	011a      	lsls	r2, r3, #4
 800292a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800292c:	4413      	add	r3, r2
 800292e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002932:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293e:	b29a      	uxth	r2, r3
 8002940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002942:	801a      	strh	r2, [r3, #0]
 8002944:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_PCD_EP_DB_Transmit+0x6da>
 800294c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800295a:	b29a      	uxth	r2, r3
 800295c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800295e:	801a      	strh	r2, [r3, #0]
 8002960:	e054      	b.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x784>
 8002962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002966:	2b3e      	cmp	r3, #62	@ 0x3e
 8002968:	d818      	bhi.n	800299c <HAL_PCD_EP_DB_Transmit+0x714>
 800296a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800297e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002980:	3301      	adds	r3, #1
 8002982:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29a      	uxth	r2, r3
 800298a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800298c:	b29b      	uxth	r3, r3
 800298e:	029b      	lsls	r3, r3, #10
 8002990:	b29b      	uxth	r3, r3
 8002992:	4313      	orrs	r3, r2
 8002994:	b29a      	uxth	r2, r3
 8002996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002998:	801a      	strh	r2, [r3, #0]
 800299a:	e037      	b.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x784>
 800299c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x72e>
 80029b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029b2:	3b01      	subs	r3, #1
 80029b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029be:	b29b      	uxth	r3, r3
 80029c0:	029b      	lsls	r3, r3, #10
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	e019      	b.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x784>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d115      	bne.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x784>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ee:	4413      	add	r3, r2
 80029f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	011a      	lsls	r2, r3, #4
 80029f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fa:	4413      	add	r3, r2
 80029fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a0a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6959      	ldr	r1, [r3, #20]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	895a      	ldrh	r2, [r3, #10]
 8002a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f003 fdcf 	bl	80065c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a3c:	82bb      	strh	r3, [r7, #20]
 8002a3e:	8abb      	ldrh	r3, [r7, #20]
 8002a40:	f083 0310 	eor.w	r3, r3, #16
 8002a44:	82bb      	strh	r3, [r7, #20]
 8002a46:	8abb      	ldrh	r3, [r7, #20]
 8002a48:	f083 0320 	eor.w	r3, r3, #32
 8002a4c:	82bb      	strh	r3, [r7, #20]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	441a      	add	r2, r3
 8002a5c:	8abb      	ldrh	r3, [r7, #20]
 8002a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3790      	adds	r7, #144	@ 0x90
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a8e:	897b      	ldrh	r3, [r7, #10]
 8002a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	f003 0207 	and.w	r2, r3, #7
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	3310      	adds	r3, #16
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4413      	add	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	e009      	b.n	8002ac6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ab2:	897a      	ldrh	r2, [r7, #10]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ac6:	893b      	ldrh	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	80da      	strh	r2, [r3, #6]
 8002ada:	e00b      	b.n	8002af4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b14:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f001 b823 	b.w	8003b70 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 817d 	beq.w	8002e3a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b40:	4bbc      	ldr	r3, [pc, #752]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d00c      	beq.n	8002b66 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b4c:	4bb9      	ldr	r3, [pc, #740]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d15c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x10e>
 8002b58:	4bb6      	ldr	r3, [pc, #728]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b64:	d155      	bne.n	8002c12 <HAL_RCC_OscConfig+0x10e>
 8002b66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b6a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_RCC_OscConfig+0x94>
 8002b92:	4ba8      	ldr	r3, [pc, #672]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	e015      	b.n	8002bc4 <HAL_RCC_OscConfig+0xc0>
 8002b98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b9c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002bac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bb0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002bb4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002bc0:	4b9c      	ldr	r3, [pc, #624]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bc8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002bcc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002bd0:	fa92 f2a2 	rbit	r2, r2
 8002bd4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002bd8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002bdc:	fab2 f282 	clz	r2, r2
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f042 0220 	orr.w	r2, r2, #32
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f002 021f 	and.w	r2, r2, #31
 8002bec:	2101      	movs	r1, #1
 8002bee:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 811f 	beq.w	8002e38 <HAL_RCC_OscConfig+0x334>
 8002bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8116 	bne.w	8002e38 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f000 bfaf 	b.w	8003b70 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12e>
 8002c24:	4b83      	ldr	r3, [pc, #524]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a82      	ldr	r2, [pc, #520]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e036      	b.n	8002ca0 <HAL_RCC_OscConfig+0x19c>
 8002c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x158>
 8002c42:	4b7c      	ldr	r3, [pc, #496]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7b      	ldr	r2, [pc, #492]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b79      	ldr	r3, [pc, #484]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a78      	ldr	r2, [pc, #480]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e021      	b.n	8002ca0 <HAL_RCC_OscConfig+0x19c>
 8002c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x184>
 8002c6e:	4b71      	ldr	r3, [pc, #452]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a70      	ldr	r2, [pc, #448]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6d      	ldr	r2, [pc, #436]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0x19c>
 8002c88:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a69      	ldr	r2, [pc, #420]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b67      	ldr	r3, [pc, #412]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a66      	ldr	r2, [pc, #408]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ca0:	4b64      	ldr	r3, [pc, #400]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	f023 020f 	bic.w	r2, r3, #15
 8002ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	495f      	ldr	r1, [pc, #380]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d059      	beq.n	8002d7e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fd fecf 	bl	8000a6c <HAL_GetTick>
 8002cce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fd feca 	bl	8000a6c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b64      	cmp	r3, #100	@ 0x64
 8002ce2:	d902      	bls.n	8002cea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	f000 bf43 	b.w	8003b70 <HAL_RCC_OscConfig+0x106c>
 8002cea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cee:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002cfe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d102      	bne.n	8002d1c <HAL_RCC_OscConfig+0x218>
 8002d16:	4b47      	ldr	r3, [pc, #284]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	e015      	b.n	8002d48 <HAL_RCC_OscConfig+0x244>
 8002d1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d20:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d34:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d44:	4b3b      	ldr	r3, [pc, #236]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d4c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002d50:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d54:	fa92 f2a2 	rbit	r2, r2
 8002d58:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002d5c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002d60:	fab2 f282 	clz	r2, r2
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	f042 0220 	orr.w	r2, r2, #32
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f002 021f 	and.w	r2, r2, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f202 	lsl.w	r2, r1, r2
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ab      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x1d0>
 8002d7c:	e05d      	b.n	8002e3a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fd fe75 	bl	8000a6c <HAL_GetTick>
 8002d82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fd fe70 	bl	8000a6c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	@ 0x64
 8002d96:	d902      	bls.n	8002d9e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	f000 bee9 	b.w	8003b70 <HAL_RCC_OscConfig+0x106c>
 8002d9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002da2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002db2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d102      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x2cc>
 8002dca:	4b1a      	ldr	r3, [pc, #104]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	e015      	b.n	8002dfc <HAL_RCC_OscConfig+0x2f8>
 8002dd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dd4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002de4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002de8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002dec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <HAL_RCC_OscConfig+0x330>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e00:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002e04:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e08:	fa92 f2a2 	rbit	r2, r2
 8002e0c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002e10:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002e14:	fab2 f282 	clz	r2, r2
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f002 021f 	and.w	r2, r2, #31
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ab      	bne.n	8002d88 <HAL_RCC_OscConfig+0x284>
 8002e30:	e003      	b.n	8002e3a <HAL_RCC_OscConfig+0x336>
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 817d 	beq.w	800314a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e50:	4ba6      	ldr	r3, [pc, #664]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00b      	beq.n	8002e74 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e5c:	4ba3      	ldr	r3, [pc, #652]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d172      	bne.n	8002f4e <HAL_RCC_OscConfig+0x44a>
 8002e68:	4ba0      	ldr	r3, [pc, #640]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d16c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x44a>
 8002e74:	2302      	movs	r3, #2
 8002e76:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002e86:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d102      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x3a0>
 8002e9e:	4b93      	ldr	r3, [pc, #588]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	e013      	b.n	8002ecc <HAL_RCC_OscConfig+0x3c8>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002ebc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002ec8:	4b88      	ldr	r3, [pc, #544]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002ed2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002ed6:	fa92 f2a2 	rbit	r2, r2
 8002eda:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002ede:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002ee2:	fab2 f282 	clz	r2, r2
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f042 0220 	orr.w	r2, r2, #32
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	f002 021f 	and.w	r2, r2, #31
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCC_OscConfig+0x410>
 8002efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f000 be2e 	b.w	8003b70 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b75      	ldr	r3, [pc, #468]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	21f8      	movs	r1, #248	@ 0xf8
 8002f2a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f32:	fa91 f1a1 	rbit	r1, r1
 8002f36:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002f3a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002f3e:	fab1 f181 	clz	r1, r1
 8002f42:	b2c9      	uxtb	r1, r1
 8002f44:	408b      	lsls	r3, r1
 8002f46:	4969      	ldr	r1, [pc, #420]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4c:	e0fd      	b.n	800314a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8088 	beq.w	8003070 <HAL_RCC_OscConfig+0x56c>
 8002f60:	2301      	movs	r3, #1
 8002f62:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002f72:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	461a      	mov	r2, r3
 8002f88:	2301      	movs	r3, #1
 8002f8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fd fd6e 	bl	8000a6c <HAL_GetTick>
 8002f90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fd fd69 	bl	8000a6c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d902      	bls.n	8002fac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	f000 bde2 	b.w	8003b70 <HAL_RCC_OscConfig+0x106c>
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002fbe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_RCC_OscConfig+0x4d8>
 8002fd6:	4b45      	ldr	r3, [pc, #276]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	e013      	b.n	8003004 <HAL_RCC_OscConfig+0x500>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002ff4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003000:	4b3a      	ldr	r3, [pc, #232]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	2202      	movs	r2, #2
 8003006:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800300a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800300e:	fa92 f2a2 	rbit	r2, r2
 8003012:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003016:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800301a:	fab2 f282 	clz	r2, r2
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	f042 0220 	orr.w	r2, r2, #32
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f002 021f 	and.w	r2, r2, #31
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f202 	lsl.w	r2, r1, r2
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0af      	beq.n	8002f96 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b2d      	ldr	r3, [pc, #180]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	21f8      	movs	r1, #248	@ 0xf8
 800304c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003054:	fa91 f1a1 	rbit	r1, r1
 8003058:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800305c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003060:	fab1 f181 	clz	r1, r1
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	408b      	lsls	r3, r1
 8003068:	4920      	ldr	r1, [pc, #128]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
 800306e:	e06c      	b.n	800314a <HAL_RCC_OscConfig+0x646>
 8003070:	2301      	movs	r3, #1
 8003072:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003082:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003090:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	461a      	mov	r2, r3
 8003098:	2300      	movs	r3, #0
 800309a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fd fce6 	bl	8000a6c <HAL_GetTick>
 80030a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fd fce1 	bl	8000a6c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	f000 bd5a 	b.w	8003b70 <HAL_RCC_OscConfig+0x106c>
 80030bc:	2302      	movs	r3, #2
 80030be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80030ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d104      	bne.n	80030f0 <HAL_RCC_OscConfig+0x5ec>
 80030e6:	4b01      	ldr	r3, [pc, #4]	@ (80030ec <HAL_RCC_OscConfig+0x5e8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	e015      	b.n	8003118 <HAL_RCC_OscConfig+0x614>
 80030ec:	40021000 	.word	0x40021000
 80030f0:	2302      	movs	r3, #2
 80030f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003102:	2302      	movs	r3, #2
 8003104:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003108:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003114:	4bc8      	ldr	r3, [pc, #800]	@ (8003438 <HAL_RCC_OscConfig+0x934>)
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	2202      	movs	r2, #2
 800311a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800311e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003122:	fa92 f2a2 	rbit	r2, r2
 8003126:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800312a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800312e:	fab2 f282 	clz	r2, r2
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	f042 0220 	orr.w	r2, r2, #32
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	f002 021f 	and.w	r2, r2, #31
 800313e:	2101      	movs	r1, #1
 8003140:	fa01 f202 	lsl.w	r2, r1, r2
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ad      	bne.n	80030a6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8110 	beq.w	8003380 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003164:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d079      	beq.n	8003264 <HAL_RCC_OscConfig+0x760>
 8003170:	2301      	movs	r3, #1
 8003172:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4bab      	ldr	r3, [pc, #684]	@ (800343c <HAL_RCC_OscConfig+0x938>)
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	461a      	mov	r2, r3
 8003196:	2301      	movs	r3, #1
 8003198:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fd fc67 	bl	8000a6c <HAL_GetTick>
 800319e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fd fc62 	bl	8000a6c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d902      	bls.n	80031ba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	f000 bcdb 	b.w	8003b70 <HAL_RCC_OscConfig+0x106c>
 80031ba:	2302      	movs	r3, #2
 80031bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031d4:	2202      	movs	r2, #2
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	fa93 f2a3 	rbit	r2, r3
 80031e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031f8:	2202      	movs	r2, #2
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003212:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003214:	4b88      	ldr	r3, [pc, #544]	@ (8003438 <HAL_RCC_OscConfig+0x934>)
 8003216:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003220:	2102      	movs	r1, #2
 8003222:	6019      	str	r1, [r3, #0]
 8003224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003228:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	fa93 f1a3 	rbit	r1, r3
 8003232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003236:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800323a:	6019      	str	r1, [r3, #0]
  return result;
 800323c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003240:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0a0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x6a0>
 8003262:	e08d      	b.n	8003380 <HAL_RCC_OscConfig+0x87c>
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800326c:	2201      	movs	r2, #1
 800326e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fa93 f2a3 	rbit	r2, r3
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003286:	601a      	str	r2, [r3, #0]
  return result;
 8003288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003290:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	4b68      	ldr	r3, [pc, #416]	@ (800343c <HAL_RCC_OscConfig+0x938>)
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	461a      	mov	r2, r3
 80032a2:	2300      	movs	r3, #0
 80032a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7fd fbe1 	bl	8000a6c <HAL_GetTick>
 80032aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fd fbdc 	bl	8000a6c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d902      	bls.n	80032c6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	f000 bc55 	b.w	8003b70 <HAL_RCC_OscConfig+0x106c>
 80032c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032ce:	2202      	movs	r2, #2
 80032d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80032f2:	2202      	movs	r2, #2
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003312:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003316:	2202      	movs	r2, #2
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003330:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003332:	4b41      	ldr	r3, [pc, #260]	@ (8003438 <HAL_RCC_OscConfig+0x934>)
 8003334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800333e:	2102      	movs	r1, #2
 8003340:	6019      	str	r1, [r3, #0]
 8003342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003346:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f1a3 	rbit	r1, r3
 8003350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003354:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003358:	6019      	str	r1, [r3, #0]
  return result;
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	2101      	movs	r1, #1
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d197      	bne.n	80032b0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 81a1 	beq.w	80036d8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339c:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_RCC_OscConfig+0x934>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d116      	bne.n	80033d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b23      	ldr	r3, [pc, #140]	@ (8003438 <HAL_RCC_OscConfig+0x934>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	4a22      	ldr	r2, [pc, #136]	@ (8003438 <HAL_RCC_OscConfig+0x934>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	61d3      	str	r3, [r2, #28]
 80033b4:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_RCC_OscConfig+0x934>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80033bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ca:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <HAL_RCC_OscConfig+0x93c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11a      	bne.n	8003418 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e2:	4b17      	ldr	r3, [pc, #92]	@ (8003440 <HAL_RCC_OscConfig+0x93c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <HAL_RCC_OscConfig+0x93c>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ee:	f7fd fb3d 	bl	8000a6c <HAL_GetTick>
 80033f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	e009      	b.n	800340c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f8:	f7fd fb38 	bl	8000a6c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b64      	cmp	r3, #100	@ 0x64
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e3b1      	b.n	8003b70 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <HAL_RCC_OscConfig+0x93c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ef      	beq.n	80033f8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d10d      	bne.n	8003444 <HAL_RCC_OscConfig+0x940>
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_RCC_OscConfig+0x934>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	4a02      	ldr	r2, [pc, #8]	@ (8003438 <HAL_RCC_OscConfig+0x934>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6213      	str	r3, [r2, #32]
 8003434:	e03c      	b.n	80034b0 <HAL_RCC_OscConfig+0x9ac>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	10908120 	.word	0x10908120
 8003440:	40007000 	.word	0x40007000
 8003444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003448:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10c      	bne.n	800346e <HAL_RCC_OscConfig+0x96a>
 8003454:	4bc1      	ldr	r3, [pc, #772]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4ac0      	ldr	r2, [pc, #768]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6213      	str	r3, [r2, #32]
 8003460:	4bbe      	ldr	r3, [pc, #760]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	4abd      	ldr	r2, [pc, #756]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 8003466:	f023 0304 	bic.w	r3, r3, #4
 800346a:	6213      	str	r3, [r2, #32]
 800346c:	e020      	b.n	80034b0 <HAL_RCC_OscConfig+0x9ac>
 800346e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x994>
 800347e:	4bb7      	ldr	r3, [pc, #732]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4ab6      	ldr	r2, [pc, #728]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6213      	str	r3, [r2, #32]
 800348a:	4bb4      	ldr	r3, [pc, #720]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4ab3      	ldr	r2, [pc, #716]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6213      	str	r3, [r2, #32]
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x9ac>
 8003498:	4bb0      	ldr	r3, [pc, #704]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4aaf      	ldr	r2, [pc, #700]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6213      	str	r3, [r2, #32]
 80034a4:	4bad      	ldr	r3, [pc, #692]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4aac      	ldr	r2, [pc, #688]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8081 	beq.w	80035c4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fd fad3 	bl	8000a6c <HAL_GetTick>
 80034c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd face 	bl	8000a6c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e345      	b.n	8003b70 <HAL_RCC_OscConfig+0x106c>
 80034e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034ec:	2202      	movs	r2, #2
 80034ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003502:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003510:	2202      	movs	r2, #2
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003518:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800352a:	601a      	str	r2, [r3, #0]
  return result;
 800352c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003530:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003534:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d102      	bne.n	8003550 <HAL_RCC_OscConfig+0xa4c>
 800354a:	4b84      	ldr	r3, [pc, #528]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	e013      	b.n	8003578 <HAL_RCC_OscConfig+0xa74>
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003558:	2202      	movs	r2, #2
 800355a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003560:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	4b79      	ldr	r3, [pc, #484]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800357c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003580:	2102      	movs	r1, #2
 8003582:	6011      	str	r1, [r2, #0]
 8003584:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003588:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	fa92 f1a2 	rbit	r1, r2
 8003592:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003596:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800359a:	6011      	str	r1, [r2, #0]
  return result;
 800359c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035a0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	fab2 f282 	clz	r2, r2
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	f002 021f 	and.w	r2, r2, #31
 80035b6:	2101      	movs	r1, #1
 80035b8:	fa01 f202 	lsl.w	r2, r1, r2
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d084      	beq.n	80034cc <HAL_RCC_OscConfig+0x9c8>
 80035c2:	e07f      	b.n	80036c4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c4:	f7fd fa52 	bl	8000a6c <HAL_GetTick>
 80035c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	e00b      	b.n	80035e6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd fa4d 	bl	8000a6c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e2c4      	b.n	8003b70 <HAL_RCC_OscConfig+0x106c>
 80035e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80035ee:	2202      	movs	r2, #2
 80035f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	fa93 f2a3 	rbit	r2, r3
 8003600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003604:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003612:	2202      	movs	r2, #2
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	fa93 f2a3 	rbit	r2, r3
 8003624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003628:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800362c:	601a      	str	r2, [r3, #0]
  return result;
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003636:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d102      	bne.n	8003652 <HAL_RCC_OscConfig+0xb4e>
 800364c:	4b43      	ldr	r3, [pc, #268]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	e013      	b.n	800367a <HAL_RCC_OscConfig+0xb76>
 8003652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003656:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800365a:	2202      	movs	r2, #2
 800365c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003662:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	fa93 f2a3 	rbit	r2, r3
 800366c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003670:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	4b39      	ldr	r3, [pc, #228]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800367e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003682:	2102      	movs	r1, #2
 8003684:	6011      	str	r1, [r2, #0]
 8003686:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800368a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	fa92 f1a2 	rbit	r1, r2
 8003694:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003698:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800369c:	6011      	str	r1, [r2, #0]
  return result;
 800369e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	fab2 f282 	clz	r2, r2
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	f002 021f 	and.w	r2, r2, #31
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d184      	bne.n	80035ce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d105      	bne.n	80036d8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036cc:	4b23      	ldr	r3, [pc, #140]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	4a22      	ldr	r2, [pc, #136]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 80036d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8242 	beq.w	8003b6e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ea:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <HAL_RCC_OscConfig+0xc58>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	f000 8213 	beq.w	8003b1e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	2b02      	cmp	r3, #2
 8003706:	f040 8162 	bne.w	80039ce <HAL_RCC_OscConfig+0xeca>
 800370a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003712:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fa93 f2a3 	rbit	r2, r3
 8003726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800372e:	601a      	str	r2, [r3, #0]
  return result;
 8003730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003734:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003738:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003744:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	461a      	mov	r2, r3
 800374c:	2300      	movs	r3, #0
 800374e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fd f98c 	bl	8000a6c <HAL_GetTick>
 8003754:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003758:	e00c      	b.n	8003774 <HAL_RCC_OscConfig+0xc70>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fd f984 	bl	8000a6c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e1fd      	b.n	8003b70 <HAL_RCC_OscConfig+0x106c>
 8003774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003778:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800377c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003786:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	fa93 f2a3 	rbit	r2, r3
 8003790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003794:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003798:	601a      	str	r2, [r3, #0]
  return result;
 800379a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HAL_RCC_OscConfig+0xcba>
 80037b8:	4bb0      	ldr	r3, [pc, #704]	@ (8003a7c <HAL_RCC_OscConfig+0xf78>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e027      	b.n	800380e <HAL_RCC_OscConfig+0xd0a>
 80037be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80037ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	4b9c      	ldr	r3, [pc, #624]	@ (8003a7c <HAL_RCC_OscConfig+0xf78>)
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003812:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003816:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800381a:	6011      	str	r1, [r2, #0]
 800381c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003820:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	fa92 f1a2 	rbit	r1, r2
 800382a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800382e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003832:	6011      	str	r1, [r2, #0]
  return result;
 8003834:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003838:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	fab2 f282 	clz	r2, r2
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f042 0220 	orr.w	r2, r2, #32
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	f002 021f 	and.w	r2, r2, #31
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d182      	bne.n	8003760 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800385a:	4b88      	ldr	r3, [pc, #544]	@ (8003a7c <HAL_RCC_OscConfig+0xf78>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003866:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800386e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003872:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	430b      	orrs	r3, r1
 800387c:	497f      	ldr	r1, [pc, #508]	@ (8003a7c <HAL_RCC_OscConfig+0xf78>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
 8003882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003886:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800388a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800388e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003894:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	fa93 f2a3 	rbit	r2, r3
 800389e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038a6:	601a      	str	r2, [r3, #0]
  return result;
 80038a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038b0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	461a      	mov	r2, r3
 80038c4:	2301      	movs	r3, #1
 80038c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fd f8d0 	bl	8000a6c <HAL_GetTick>
 80038cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d0:	e009      	b.n	80038e6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d2:	f7fd f8cb 	bl	8000a6c <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e144      	b.n	8003b70 <HAL_RCC_OscConfig+0x106c>
 80038e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800390a:	601a      	str	r2, [r3, #0]
  return result;
 800390c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003910:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003914:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d102      	bne.n	8003930 <HAL_RCC_OscConfig+0xe2c>
 800392a:	4b54      	ldr	r3, [pc, #336]	@ (8003a7c <HAL_RCC_OscConfig+0xf78>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	e027      	b.n	8003980 <HAL_RCC_OscConfig+0xe7c>
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003938:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800393c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003942:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f2a3 	rbit	r2, r3
 800394c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003950:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800395e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003968:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	fa93 f2a3 	rbit	r2, r3
 8003972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003976:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a7c <HAL_RCC_OscConfig+0xf78>)
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003984:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003988:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800398c:	6011      	str	r1, [r2, #0]
 800398e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003992:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	fa92 f1a2 	rbit	r1, r2
 800399c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039a0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039a4:	6011      	str	r1, [r2, #0]
  return result;
 80039a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039aa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	fab2 f282 	clz	r2, r2
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	f042 0220 	orr.w	r2, r2, #32
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f002 021f 	and.w	r2, r2, #31
 80039c0:	2101      	movs	r1, #1
 80039c2:	fa01 f202 	lsl.w	r2, r1, r2
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d082      	beq.n	80038d2 <HAL_RCC_OscConfig+0xdce>
 80039cc:	e0cf      	b.n	8003b6e <HAL_RCC_OscConfig+0x106a>
 80039ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fa93 f2a3 	rbit	r2, r3
 80039ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80039f2:	601a      	str	r2, [r3, #0]
  return result;
 80039f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80039fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd f82a 	bl	8000a6c <HAL_GetTick>
 8003a18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1c:	e009      	b.n	8003a32 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fd f825 	bl	8000a6c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e09e      	b.n	8003b70 <HAL_RCC_OscConfig+0x106c>
 8003a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a36:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a44:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	fa93 f2a3 	rbit	r2, r3
 8003a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a52:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a56:	601a      	str	r2, [r3, #0]
  return result;
 8003a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d104      	bne.n	8003a80 <HAL_RCC_OscConfig+0xf7c>
 8003a76:	4b01      	ldr	r3, [pc, #4]	@ (8003a7c <HAL_RCC_OscConfig+0xf78>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	e029      	b.n	8003ad0 <HAL_RCC_OscConfig+0xfcc>
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a92:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fa93 f2a3 	rbit	r2, r3
 8003a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aaa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003aae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	fa93 f2a3 	rbit	r2, r3
 8003ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b7c <HAL_RCC_OscConfig+0x1078>)
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ad4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003ad8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003adc:	6011      	str	r1, [r2, #0]
 8003ade:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ae2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	fa92 f1a2 	rbit	r1, r2
 8003aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003af0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003af4:	6011      	str	r1, [r2, #0]
  return result;
 8003af6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003afa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	fab2 f282 	clz	r2, r2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	f042 0220 	orr.w	r2, r2, #32
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	f002 021f 	and.w	r2, r2, #31
 8003b10:	2101      	movs	r1, #1
 8003b12:	fa01 f202 	lsl.w	r2, r1, r2
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d180      	bne.n	8003a1e <HAL_RCC_OscConfig+0xf1a>
 8003b1c:	e027      	b.n	8003b6e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e01e      	b.n	8003b70 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b32:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <HAL_RCC_OscConfig+0x1078>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b3e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d10b      	bne.n	8003b6a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000

08003b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b09e      	sub	sp, #120	@ 0x78
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e162      	b.n	8003e5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b90      	ldr	r3, [pc, #576]	@ (8003ddc <HAL_RCC_ClockConfig+0x25c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d910      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8003ddc <HAL_RCC_ClockConfig+0x25c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 0207 	bic.w	r2, r3, #7
 8003bae:	498b      	ldr	r1, [pc, #556]	@ (8003ddc <HAL_RCC_ClockConfig+0x25c>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b89      	ldr	r3, [pc, #548]	@ (8003ddc <HAL_RCC_ClockConfig+0x25c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e14a      	b.n	8003e5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b82      	ldr	r3, [pc, #520]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	497f      	ldr	r1, [pc, #508]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80dc 	beq.w	8003dac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d13c      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xf6>
 8003bfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c00:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d102      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xa6>
 8003c20:	4b6f      	ldr	r3, [pc, #444]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	e00f      	b.n	8003c46 <HAL_RCC_ClockConfig+0xc6>
 8003c26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c38:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c42:	4b67      	ldr	r3, [pc, #412]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c4e:	fa92 f2a2 	rbit	r2, r2
 8003c52:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003c54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c56:	fab2 f282 	clz	r2, r2
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	f042 0220 	orr.w	r2, r2, #32
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f002 021f 	and.w	r2, r2, #31
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d17b      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0f3      	b.n	8003e5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d13c      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0x178>
 8003c7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c82:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d102      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x128>
 8003ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	e00f      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x148>
 8003ca8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb0:	fa93 f3a3 	rbit	r3, r3
 8003cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cba:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc4:	4b46      	ldr	r3, [pc, #280]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ccc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003cce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cd0:	fa92 f2a2 	rbit	r2, r2
 8003cd4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003cd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cd8:	fab2 f282 	clz	r2, r2
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	f042 0220 	orr.w	r2, r2, #32
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	f002 021f 	and.w	r2, r2, #31
 8003ce8:	2101      	movs	r1, #1
 8003cea:	fa01 f202 	lsl.w	r2, r1, r2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d13a      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0b2      	b.n	8003e5e <HAL_RCC_ClockConfig+0x2de>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x1a0>
 8003d1a:	4b31      	ldr	r3, [pc, #196]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	e00d      	b.n	8003d3c <HAL_RCC_ClockConfig+0x1bc>
 8003d20:	2302      	movs	r3, #2
 8003d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	623b      	str	r3, [r7, #32]
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	4b29      	ldr	r3, [pc, #164]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	61ba      	str	r2, [r7, #24]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	fa92 f2a2 	rbit	r2, r2
 8003d46:	617a      	str	r2, [r7, #20]
  return result;
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	fab2 f282 	clz	r2, r2
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f042 0220 	orr.w	r2, r2, #32
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	f002 021f 	and.w	r2, r2, #31
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e079      	b.n	8003e5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f023 0203 	bic.w	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	491a      	ldr	r1, [pc, #104]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d7c:	f7fc fe76 	bl	8000a6c <HAL_GetTick>
 8003d80:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d84:	f7fc fe72 	bl	8000a6c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e061      	b.n	8003e5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <HAL_RCC_ClockConfig+0x260>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 020c 	and.w	r2, r3, #12
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d1eb      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dac:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <HAL_RCC_ClockConfig+0x25c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d214      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b08      	ldr	r3, [pc, #32]	@ (8003ddc <HAL_RCC_ClockConfig+0x25c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 0207 	bic.w	r2, r3, #7
 8003dc2:	4906      	ldr	r1, [pc, #24]	@ (8003ddc <HAL_RCC_ClockConfig+0x25c>)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <HAL_RCC_ClockConfig+0x25c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e040      	b.n	8003e5e <HAL_RCC_ClockConfig+0x2de>
 8003ddc:	40022000 	.word	0x40022000
 8003de0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <HAL_RCC_ClockConfig+0x2e8>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	491a      	ldr	r1, [pc, #104]	@ (8003e68 <HAL_RCC_ClockConfig+0x2e8>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0e:	4b16      	ldr	r3, [pc, #88]	@ (8003e68 <HAL_RCC_ClockConfig+0x2e8>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4912      	ldr	r1, [pc, #72]	@ (8003e68 <HAL_RCC_ClockConfig+0x2e8>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e22:	f000 f829 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e26:	4601      	mov	r1, r0
 8003e28:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <HAL_RCC_ClockConfig+0x2e8>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e30:	22f0      	movs	r2, #240	@ 0xf0
 8003e32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	fa92 f2a2 	rbit	r2, r2
 8003e3a:	60fa      	str	r2, [r7, #12]
  return result;
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	fab2 f282 	clz	r2, r2
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	40d3      	lsrs	r3, r2
 8003e46:	4a09      	ldr	r2, [pc, #36]	@ (8003e6c <HAL_RCC_ClockConfig+0x2ec>)
 8003e48:	5cd3      	ldrb	r3, [r2, r3]
 8003e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e4e:	4a08      	ldr	r2, [pc, #32]	@ (8003e70 <HAL_RCC_ClockConfig+0x2f0>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e52:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <HAL_RCC_ClockConfig+0x2f4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc fdc4 	bl	80009e4 <HAL_InitTick>
  
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3778      	adds	r7, #120	@ 0x78
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	080082d8 	.word	0x080082d8
 8003e70:	20000078 	.word	0x20000078
 8003e74:	2000007c 	.word	0x2000007c

08003e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003e92:	4b1e      	ldr	r3, [pc, #120]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x36>
 8003ea6:	e026      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ea8:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eaa:	613b      	str	r3, [r7, #16]
      break;
 8003eac:	e026      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	0c9b      	lsrs	r3, r3, #18
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	4a17      	ldr	r2, [pc, #92]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
 8003eba:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003ebc:	4b13      	ldr	r3, [pc, #76]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ec6:	5cd3      	ldrb	r3, [r2, r3]
 8003ec8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e004      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	613b      	str	r3, [r7, #16]
      break;
 8003ef4:	e002      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ef6:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ef8:	613b      	str	r3, [r7, #16]
      break;
 8003efa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003efc:	693b      	ldr	r3, [r7, #16]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	007a1200 	.word	0x007a1200
 8003f14:	080082e8 	.word	0x080082e8
 8003f18:	080082f8 	.word	0x080082f8
 8003f1c:	003d0900 	.word	0x003d0900

08003f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b092      	sub	sp, #72	@ 0x48
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80d4 	beq.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f44:	4b4e      	ldr	r3, [pc, #312]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10e      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f50:	4b4b      	ldr	r3, [pc, #300]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4a4a      	ldr	r2, [pc, #296]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	61d3      	str	r3, [r2, #28]
 8003f5c:	4b48      	ldr	r3, [pc, #288]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6e:	4b45      	ldr	r3, [pc, #276]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d118      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7a:	4b42      	ldr	r3, [pc, #264]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a41      	ldr	r2, [pc, #260]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f86:	f7fc fd71 	bl	8000a6c <HAL_GetTick>
 8003f8a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8e:	f7fc fd6d 	bl	8000a6c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b64      	cmp	r3, #100	@ 0x64
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e169      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa0:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fac:	4b34      	ldr	r3, [pc, #208]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8084 	beq.w	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d07c      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b26      	ldr	r3, [pc, #152]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800401e:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004022:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d04b      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fc fd1d 	bl	8000a6c <HAL_GetTick>
 8004032:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004034:	e00a      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fc fd19 	bl	8000a6c <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e113      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800404c:	2302      	movs	r3, #2
 800404e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
 8004058:	2302      	movs	r3, #2
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	61fb      	str	r3, [r7, #28]
  return result;
 8004064:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f043 0302 	orr.w	r3, r3, #2
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d108      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800407a:	4b01      	ldr	r3, [pc, #4]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	e00d      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004080:	40021000 	.word	0x40021000
 8004084:	40007000 	.word	0x40007000
 8004088:	10908100 	.word	0x10908100
 800408c:	2302      	movs	r3, #2
 800408e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	4b78      	ldr	r3, [pc, #480]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	2202      	movs	r2, #2
 800409e:	613a      	str	r2, [r7, #16]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	fa92 f2a2 	rbit	r2, r2
 80040a6:	60fa      	str	r2, [r7, #12]
  return result;
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	fab2 f282 	clz	r2, r2
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	f002 021f 	and.w	r2, r2, #31
 80040ba:	2101      	movs	r1, #1
 80040bc:	fa01 f202 	lsl.w	r2, r1, r2
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0b7      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040c6:	4b6d      	ldr	r3, [pc, #436]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	496a      	ldr	r1, [pc, #424]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e0:	4b66      	ldr	r3, [pc, #408]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	4a65      	ldr	r2, [pc, #404]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040f8:	4b60      	ldr	r3, [pc, #384]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	f023 0203 	bic.w	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	495d      	ldr	r1, [pc, #372]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004106:	4313      	orrs	r3, r2
 8004108:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004116:	4b59      	ldr	r3, [pc, #356]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4956      	ldr	r1, [pc, #344]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004134:	4b51      	ldr	r3, [pc, #324]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	494e      	ldr	r1, [pc, #312]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004142:	4313      	orrs	r3, r2
 8004144:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004152:	4b4a      	ldr	r3, [pc, #296]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	f023 0210 	bic.w	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4947      	ldr	r1, [pc, #284]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004170:	4b42      	ldr	r3, [pc, #264]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	493f      	ldr	r1, [pc, #252]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800418e:	4b3b      	ldr	r3, [pc, #236]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	f023 0220 	bic.w	r2, r3, #32
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	4938      	ldr	r1, [pc, #224]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800419c:	4313      	orrs	r3, r2
 800419e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ac:	4b33      	ldr	r3, [pc, #204]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	4930      	ldr	r1, [pc, #192]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041ca:	4b2c      	ldr	r3, [pc, #176]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	4929      	ldr	r1, [pc, #164]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041e8:	4b24      	ldr	r3, [pc, #144]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	4921      	ldr	r1, [pc, #132]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004206:	4b1d      	ldr	r3, [pc, #116]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	491a      	ldr	r1, [pc, #104]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004214:	4313      	orrs	r3, r2
 8004216:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004224:	4b15      	ldr	r3, [pc, #84]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	4912      	ldr	r1, [pc, #72]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004242:	4b0e      	ldr	r3, [pc, #56]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	490b      	ldr	r1, [pc, #44]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004250:	4313      	orrs	r3, r2
 8004252:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004260:	4b06      	ldr	r3, [pc, #24]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426c:	4903      	ldr	r1, [pc, #12]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800426e:	4313      	orrs	r3, r2
 8004270:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3748      	adds	r7, #72	@ 0x48
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000

08004280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e09d      	b.n	80043ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	d108      	bne.n	80042ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042a2:	d009      	beq.n	80042b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
 80042aa:	e005      	b.n	80042b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc f9ea 	bl	80006ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042f8:	d902      	bls.n	8004300 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e002      	b.n	8004306 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004304:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800430e:	d007      	beq.n	8004320 <HAL_SPI_Init+0xa0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004318:	d002      	beq.n	8004320 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004362:	ea42 0103 	orr.w	r1, r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	0c1b      	lsrs	r3, r3, #16
 800437c:	f003 0204 	and.w	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800439c:	ea42 0103 	orr.w	r1, r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043e6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80043ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800440c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004410:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	b29b      	uxth	r3, r3
 800441e:	43db      	mvns	r3, r3
 8004420:	b29b      	uxth	r3, r3
 8004422:	4013      	ands	r3, r2
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004478:	b480      	push	{r7}
 800447a:	b09d      	sub	sp, #116	@ 0x74
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800449a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	78db      	ldrb	r3, [r3, #3]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d81f      	bhi.n	80044ea <USB_ActivateEndpoint+0x72>
 80044aa:	a201      	add	r2, pc, #4	@ (adr r2, 80044b0 <USB_ActivateEndpoint+0x38>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	080044f3 	.word	0x080044f3
 80044bc:	080044cf 	.word	0x080044cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80044c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80044c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80044cc:	e012      	b.n	80044f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80044d2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80044d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80044da:	e00b      	b.n	80044f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80044e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80044e8:	e004      	b.n	80044f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80044f0:	e000      	b.n	80044f4 <USB_ActivateEndpoint+0x7c>
      break;
 80044f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	441a      	add	r2, r3
 80044fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800450a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800450e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004512:	b29b      	uxth	r3, r3
 8004514:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	b21b      	sxth	r3, r3
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800452a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452e:	b21a      	sxth	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	b21b      	sxth	r3, r3
 8004536:	4313      	orrs	r3, r2
 8004538:	b21b      	sxth	r3, r3
 800453a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	441a      	add	r2, r3
 8004548:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800454c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455c:	b29b      	uxth	r3, r3
 800455e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	7b1b      	ldrb	r3, [r3, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f040 8178 	bne.w	800485a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8084 	beq.w	800467c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800457e:	b29b      	uxth	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4413      	add	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	011a      	lsls	r2, r3, #4
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	88db      	ldrh	r3, [r3, #6]
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	b29b      	uxth	r3, r3
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	827b      	strh	r3, [r7, #18]
 80045b6:	8a7b      	ldrh	r3, [r7, #18]
 80045b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01b      	beq.n	80045f8 <USB_ActivateEndpoint+0x180>
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d6:	823b      	strh	r3, [r7, #16]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	441a      	add	r2, r3
 80045e2:	8a3b      	ldrh	r3, [r7, #16]
 80045e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	78db      	ldrb	r3, [r3, #3]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d020      	beq.n	8004642 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004616:	81bb      	strh	r3, [r7, #12]
 8004618:	89bb      	ldrh	r3, [r7, #12]
 800461a:	f083 0320 	eor.w	r3, r3, #32
 800461e:	81bb      	strh	r3, [r7, #12]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	89bb      	ldrh	r3, [r7, #12]
 800462c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800463c:	b29b      	uxth	r3, r3
 800463e:	8013      	strh	r3, [r2, #0]
 8004640:	e2d5      	b.n	8004bee <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004658:	81fb      	strh	r3, [r7, #14]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	441a      	add	r2, r3
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800466a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800466e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004676:	b29b      	uxth	r3, r3
 8004678:	8013      	strh	r3, [r2, #0]
 800467a:	e2b8      	b.n	8004bee <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	4413      	add	r3, r2
 800468e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	011a      	lsls	r2, r3, #4
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	4413      	add	r3, r2
 800469a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800469e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	88db      	ldrh	r3, [r3, #6]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ae:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	4413      	add	r3, r2
 80046c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	011a      	lsls	r2, r3, #4
 80046ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046cc:	4413      	add	r3, r2
 80046ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046de:	b29a      	uxth	r2, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <USB_ActivateEndpoint+0x28a>
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	801a      	strh	r2, [r3, #0]
 8004700:	e039      	b.n	8004776 <USB_ActivateEndpoint+0x2fe>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b3e      	cmp	r3, #62	@ 0x3e
 8004708:	d818      	bhi.n	800473c <USB_ActivateEndpoint+0x2c4>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <USB_ActivateEndpoint+0x2ac>
 800471e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004720:	3301      	adds	r3, #1
 8004722:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	b29a      	uxth	r2, r3
 800472a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800472c:	b29b      	uxth	r3, r3
 800472e:	029b      	lsls	r3, r3, #10
 8004730:	b29b      	uxth	r3, r3
 8004732:	4313      	orrs	r3, r2
 8004734:	b29a      	uxth	r2, r3
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	e01c      	b.n	8004776 <USB_ActivateEndpoint+0x2fe>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <USB_ActivateEndpoint+0x2de>
 8004750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004752:	3b01      	subs	r3, #1
 8004754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29a      	uxth	r2, r3
 800475c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800475e:	b29b      	uxth	r3, r3
 8004760:	029b      	lsls	r3, r3, #10
 8004762:	b29b      	uxth	r3, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	b29b      	uxth	r3, r3
 8004768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004770:	b29a      	uxth	r2, r3
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004784:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01b      	beq.n	80047c6 <USB_ActivateEndpoint+0x34e>
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a4:	843b      	strh	r3, [r7, #32]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	8c3b      	ldrh	r3, [r7, #32]
 80047b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d124      	bne.n	8004818 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e4:	83bb      	strh	r3, [r7, #28]
 80047e6:	8bbb      	ldrh	r3, [r7, #28]
 80047e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80047ec:	83bb      	strh	r3, [r7, #28]
 80047ee:	8bbb      	ldrh	r3, [r7, #28]
 80047f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80047f4:	83bb      	strh	r3, [r7, #28]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	441a      	add	r2, r3
 8004800:	8bbb      	ldrh	r3, [r7, #28]
 8004802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800480a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800480e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004812:	b29b      	uxth	r3, r3
 8004814:	8013      	strh	r3, [r2, #0]
 8004816:	e1ea      	b.n	8004bee <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800482a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482e:	83fb      	strh	r3, [r7, #30]
 8004830:	8bfb      	ldrh	r3, [r7, #30]
 8004832:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004836:	83fb      	strh	r3, [r7, #30]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	8bfb      	ldrh	r3, [r7, #30]
 8004844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800484c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]
 8004858:	e1c9      	b.n	8004bee <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	78db      	ldrb	r3, [r3, #3]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d11e      	bne.n	80048a0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004878:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800488a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004892:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]
 800489e:	e01d      	b.n	80048dc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80048b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80048c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d8:	b29b      	uxth	r3, r3
 80048da:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048ec:	4413      	add	r3, r2
 80048ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	011a      	lsls	r2, r3, #4
 80048f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	891b      	ldrh	r3, [r3, #8]
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	b29b      	uxth	r3, r3
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	657b      	str	r3, [r7, #84]	@ 0x54
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800491a:	b29b      	uxth	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004920:	4413      	add	r3, r2
 8004922:	657b      	str	r3, [r7, #84]	@ 0x54
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	011a      	lsls	r2, r3, #4
 800492a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800492c:	4413      	add	r3, r2
 800492e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004932:	653b      	str	r3, [r7, #80]	@ 0x50
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	895b      	ldrh	r3, [r3, #10]
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	b29b      	uxth	r3, r3
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004942:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 8093 	bne.w	8004a74 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800495e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d01b      	beq.n	80049a2 <USB_ActivateEndpoint+0x52a>
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	b29b      	uxth	r3, r3
 8004978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800497c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004980:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	441a      	add	r2, r3
 800498c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800498e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800499a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80049b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80049b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01b      	beq.n	80049f2 <USB_ActivateEndpoint+0x57a>
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	441a      	add	r2, r3
 80049dc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80049de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a08:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004a0a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a10:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004a12:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a18:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a50:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	441a      	add	r2, r3
 8004a5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	8013      	strh	r3, [r2, #0]
 8004a72:	e0bc      	b.n	8004bee <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01d      	beq.n	8004acc <USB_ActivateEndpoint+0x654>
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004adc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01d      	beq.n	8004b24 <USB_ActivateEndpoint+0x6ac>
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	441a      	add	r2, r3
 8004b0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	78db      	ldrb	r3, [r3, #3]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d024      	beq.n	8004b76 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b42:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004b46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004b4a:	f083 0320 	eor.w	r3, r3, #32
 8004b4e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	8013      	strh	r3, [r2, #0]
 8004b74:	e01d      	b.n	8004bb2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b8c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004bee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3774      	adds	r7, #116	@ 0x74
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b0c2      	sub	sp, #264	@ 0x108
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c0e:	6018      	str	r0, [r3, #0]
 8004c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c18:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	f040 86b7 	bne.w	800599a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d908      	bls.n	8004c5a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c58:	e007      	b.n	8004c6a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	7b1b      	ldrb	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d13a      	bne.n	8004cf0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6959      	ldr	r1, [r3, #20]
 8004c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	88da      	ldrh	r2, [r3, #6]
 8004c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ca0:	6800      	ldr	r0, [r0, #0]
 8004ca2:	f001 fc8d 	bl	80065c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	011a      	lsls	r2, r3, #4
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	f000 be1f 	b.w	800592e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	78db      	ldrb	r3, [r3, #3]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	f040 8462 	bne.w	80055c6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	f240 83df 	bls.w	80054de <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d46:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	441a      	add	r2, r3
 8004d64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d70:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8c:	1ad2      	subs	r2, r2, r3
 8004d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 81c7 	beq.w	8005150 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d177      	bne.n	8004ece <USB_EPStartXfer+0x2ce>
 8004dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	4413      	add	r3, r2
 8004e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	011a      	lsls	r2, r3, #4
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	4413      	add	r3, r2
 8004e14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	801a      	strh	r2, [r3, #0]
 8004e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <USB_EPStartXfer+0x248>
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e067      	b.n	8004f18 <USB_EPStartXfer+0x318>
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e4e:	d81c      	bhi.n	8004e8a <USB_EPStartXfer+0x28a>
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <USB_EPStartXfer+0x270>
 8004e66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	4313      	orrs	r3, r2
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	e046      	b.n	8004f18 <USB_EPStartXfer+0x318>
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <USB_EPStartXfer+0x2aa>
 8004ea0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	029b      	lsls	r3, r3, #10
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	801a      	strh	r2, [r3, #0]
 8004ecc:	e024      	b.n	8004f18 <USB_EPStartXfer+0x318>
 8004ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d11c      	bne.n	8004f18 <USB_EPStartXfer+0x318>
 8004ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef2:	4413      	add	r3, r2
 8004ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	011a      	lsls	r2, r3, #4
 8004f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f06:	4413      	add	r3, r2
 8004f08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	895b      	ldrh	r3, [r3, #10]
 8004f24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6959      	ldr	r1, [r3, #20]
 8004f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f46:	6800      	ldr	r0, [r0, #0]
 8004f48:	f001 fb3a 	bl	80065c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5c:	441a      	add	r2, r3
 8004f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6a1a      	ldr	r2, [r3, #32]
 8004f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d90f      	bls.n	8004fa6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	621a      	str	r2, [r3, #32]
 8004fa4:	e00e      	b.n	8004fc4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d177      	bne.n	80050c4 <USB_EPStartXfer+0x4c4>
 8004fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	011a      	lsls	r2, r3, #4
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800501a:	b29a      	uxth	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <USB_EPStartXfer+0x43e>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29b      	uxth	r3, r3
 800502e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005036:	b29a      	uxth	r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e06d      	b.n	800511a <USB_EPStartXfer+0x51a>
 800503e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005042:	2b3e      	cmp	r3, #62	@ 0x3e
 8005044:	d81c      	bhi.n	8005080 <USB_EPStartXfer+0x480>
 8005046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d004      	beq.n	8005066 <USB_EPStartXfer+0x466>
 800505c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005060:	3301      	adds	r3, #1
 8005062:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29a      	uxth	r2, r3
 800506c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005070:	b29b      	uxth	r3, r3
 8005072:	029b      	lsls	r3, r3, #10
 8005074:	b29b      	uxth	r3, r3
 8005076:	4313      	orrs	r3, r2
 8005078:	b29a      	uxth	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	e04c      	b.n	800511a <USB_EPStartXfer+0x51a>
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800508a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <USB_EPStartXfer+0x4a0>
 8005096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509a:	3b01      	subs	r3, #1
 800509c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	029b      	lsls	r3, r3, #10
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	4313      	orrs	r3, r2
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050bc:	b29a      	uxth	r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	e02a      	b.n	800511a <USB_EPStartXfer+0x51a>
 80050c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	785b      	ldrb	r3, [r3, #1]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d122      	bne.n	800511a <USB_EPStartXfer+0x51a>
 80050d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	4413      	add	r3, r2
 80050f6:	623b      	str	r3, [r7, #32]
 80050f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	011a      	lsls	r2, r3, #4
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	4413      	add	r3, r2
 800510a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005114:	b29a      	uxth	r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800511a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	891b      	ldrh	r3, [r3, #8]
 8005126:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800512a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6959      	ldr	r1, [r3, #20]
 8005136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513a:	b29b      	uxth	r3, r3
 800513c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005140:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005144:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005148:	6800      	ldr	r0, [r0, #0]
 800514a:	f001 fa39 	bl	80065c0 <USB_WritePMA>
 800514e:	e3ee      	b.n	800592e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d177      	bne.n	8005250 <USB_EPStartXfer+0x650>
 8005160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800516c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005170:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800517a:	b29b      	uxth	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005180:	4413      	add	r3, r2
 8005182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005194:	4413      	add	r3, r2
 8005196:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800519a:	647b      	str	r3, [r7, #68]	@ 0x44
 800519c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <USB_EPStartXfer+0x5ca>
 80051b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	e06d      	b.n	80052a6 <USB_EPStartXfer+0x6a6>
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80051d0:	d81c      	bhi.n	800520c <USB_EPStartXfer+0x60c>
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <USB_EPStartXfer+0x5f2>
 80051e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051ec:	3301      	adds	r3, #1
 80051ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	029b      	lsls	r3, r3, #10
 8005200:	b29b      	uxth	r3, r3
 8005202:	4313      	orrs	r3, r2
 8005204:	b29a      	uxth	r2, r3
 8005206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	e04c      	b.n	80052a6 <USB_EPStartXfer+0x6a6>
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <USB_EPStartXfer+0x62c>
 8005222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005226:	3b01      	subs	r3, #1
 8005228:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800522c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29a      	uxth	r2, r3
 8005232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005236:	b29b      	uxth	r3, r3
 8005238:	029b      	lsls	r3, r3, #10
 800523a:	b29b      	uxth	r3, r3
 800523c:	4313      	orrs	r3, r2
 800523e:	b29b      	uxth	r3, r3
 8005240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005248:	b29a      	uxth	r2, r3
 800524a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	e02a      	b.n	80052a6 <USB_EPStartXfer+0x6a6>
 8005250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d122      	bne.n	80052a6 <USB_EPStartXfer+0x6a6>
 8005260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	653b      	str	r3, [r7, #80]	@ 0x50
 800526c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005270:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005280:	4413      	add	r3, r2
 8005282:	653b      	str	r3, [r7, #80]	@ 0x50
 8005284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	011a      	lsls	r2, r3, #4
 8005292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005294:	4413      	add	r3, r2
 8005296:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800529a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800529c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	891b      	ldrh	r3, [r3, #8]
 80052b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6959      	ldr	r1, [r3, #20]
 80052c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052d4:	6800      	ldr	r0, [r0, #0]
 80052d6:	f001 f973 	bl	80065c0 <USB_WritePMA>
            ep->xfer_buff += len;
 80052da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ea:	441a      	add	r2, r3
 80052ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a1a      	ldr	r2, [r3, #32]
 8005304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	429a      	cmp	r2, r3
 8005312:	d90f      	bls.n	8005334 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005324:	1ad2      	subs	r2, r2, r3
 8005326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800532a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	621a      	str	r2, [r3, #32]
 8005332:	e00e      	b.n	8005352 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	643b      	str	r3, [r7, #64]	@ 0x40
 800535e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	785b      	ldrb	r3, [r3, #1]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d177      	bne.n	800545e <USB_EPStartXfer+0x85e>
 800536e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	63bb      	str	r3, [r7, #56]	@ 0x38
 800537a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005388:	b29b      	uxth	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538e:	4413      	add	r3, r2
 8005390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	011a      	lsls	r2, r3, #4
 80053a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <USB_EPStartXfer+0x7d8>
 80053c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e067      	b.n	80054a8 <USB_EPStartXfer+0x8a8>
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80053de:	d81c      	bhi.n	800541a <USB_EPStartXfer+0x81a>
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <USB_EPStartXfer+0x800>
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fa:	3301      	adds	r3, #1
 80053fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29a      	uxth	r2, r3
 8005406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540a:	b29b      	uxth	r3, r3
 800540c:	029b      	lsls	r3, r3, #10
 800540e:	b29b      	uxth	r3, r3
 8005410:	4313      	orrs	r3, r2
 8005412:	b29a      	uxth	r2, r3
 8005414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005416:	801a      	strh	r2, [r3, #0]
 8005418:	e046      	b.n	80054a8 <USB_EPStartXfer+0x8a8>
 800541a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <USB_EPStartXfer+0x83a>
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005434:	3b01      	subs	r3, #1
 8005436:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800543a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29a      	uxth	r2, r3
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29b      	uxth	r3, r3
 800544a:	4313      	orrs	r3, r2
 800544c:	b29b      	uxth	r3, r3
 800544e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005456:	b29a      	uxth	r2, r3
 8005458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545a:	801a      	strh	r2, [r3, #0]
 800545c:	e024      	b.n	80054a8 <USB_EPStartXfer+0x8a8>
 800545e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d11c      	bne.n	80054a8 <USB_EPStartXfer+0x8a8>
 800546e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005482:	4413      	add	r3, r2
 8005484:	643b      	str	r3, [r7, #64]	@ 0x40
 8005486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	011a      	lsls	r2, r3, #4
 8005494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005496:	4413      	add	r3, r2
 8005498:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800549c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	895b      	ldrh	r3, [r3, #10]
 80054b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6959      	ldr	r1, [r3, #20]
 80054c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054d6:	6800      	ldr	r0, [r0, #0]
 80054d8:	f001 f872 	bl	80065c0 <USB_WritePMA>
 80054dc:	e227      	b.n	800592e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80054ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005514:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	441a      	add	r2, r3
 8005532:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800553a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005546:	b29b      	uxth	r3, r3
 8005548:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800554a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005564:	b29b      	uxth	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800556a:	4413      	add	r3, r2
 800556c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800556e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	011a      	lsls	r2, r3, #4
 800557c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800557e:	4413      	add	r3, r2
 8005580:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005584:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558a:	b29a      	uxth	r2, r3
 800558c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800558e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	891b      	ldrh	r3, [r3, #8]
 800559c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6959      	ldr	r1, [r3, #20]
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055be:	6800      	ldr	r0, [r0, #0]
 80055c0:	f000 fffe 	bl	80065c0 <USB_WritePMA>
 80055c4:	e1b3      	b.n	800592e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80055c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6a1a      	ldr	r2, [r3, #32]
 80055d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d6:	1ad2      	subs	r2, r2, r3
 80055d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80c6 	beq.w	8005798 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800560c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005610:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	673b      	str	r3, [r7, #112]	@ 0x70
 8005618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d177      	bne.n	8005718 <USB_EPStartXfer+0xb18>
 8005628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005642:	b29b      	uxth	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005648:	4413      	add	r3, r2
 800564a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800564c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	011a      	lsls	r2, r3, #4
 800565a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800565c:	4413      	add	r3, r2
 800565e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005662:	667b      	str	r3, [r7, #100]	@ 0x64
 8005664:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800566e:	b29a      	uxth	r2, r3
 8005670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <USB_EPStartXfer+0xa92>
 800567c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568a:	b29a      	uxth	r2, r3
 800568c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	e067      	b.n	8005762 <USB_EPStartXfer+0xb62>
 8005692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005696:	2b3e      	cmp	r3, #62	@ 0x3e
 8005698:	d81c      	bhi.n	80056d4 <USB_EPStartXfer+0xad4>
 800569a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <USB_EPStartXfer+0xaba>
 80056b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056b4:	3301      	adds	r3, #1
 80056b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	029b      	lsls	r3, r3, #10
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	4313      	orrs	r3, r2
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e046      	b.n	8005762 <USB_EPStartXfer+0xb62>
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <USB_EPStartXfer+0xaf4>
 80056ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056ee:	3b01      	subs	r3, #1
 80056f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056fe:	b29b      	uxth	r3, r3
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	b29b      	uxth	r3, r3
 8005704:	4313      	orrs	r3, r2
 8005706:	b29b      	uxth	r3, r3
 8005708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005710:	b29a      	uxth	r2, r3
 8005712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	e024      	b.n	8005762 <USB_EPStartXfer+0xb62>
 8005718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d11c      	bne.n	8005762 <USB_EPStartXfer+0xb62>
 8005728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005736:	b29b      	uxth	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800573c:	4413      	add	r3, r2
 800573e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	011a      	lsls	r2, r3, #4
 800574e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005750:	4413      	add	r3, r2
 8005752:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005756:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575c:	b29a      	uxth	r2, r3
 800575e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005760:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	895b      	ldrh	r3, [r3, #10]
 800576e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6959      	ldr	r1, [r3, #20]
 800577e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005782:	b29b      	uxth	r3, r3
 8005784:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005788:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800578c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005790:	6800      	ldr	r0, [r0, #0]
 8005792:	f000 ff15 	bl	80065c0 <USB_WritePMA>
 8005796:	e0ca      	b.n	800592e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d177      	bne.n	8005898 <USB_EPStartXfer+0xc98>
 80057a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057c8:	4413      	add	r3, r2
 80057ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	011a      	lsls	r2, r3, #4
 80057da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057dc:	4413      	add	r3, r2
 80057de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <USB_EPStartXfer+0xc12>
 80057fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580a:	b29a      	uxth	r2, r3
 800580c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e073      	b.n	80058fa <USB_EPStartXfer+0xcfa>
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005816:	2b3e      	cmp	r3, #62	@ 0x3e
 8005818:	d81c      	bhi.n	8005854 <USB_EPStartXfer+0xc54>
 800581a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <USB_EPStartXfer+0xc3a>
 8005830:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005834:	3301      	adds	r3, #1
 8005836:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800583a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29a      	uxth	r2, r3
 8005840:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005844:	b29b      	uxth	r3, r3
 8005846:	029b      	lsls	r3, r3, #10
 8005848:	b29b      	uxth	r3, r3
 800584a:	4313      	orrs	r3, r2
 800584c:	b29a      	uxth	r2, r3
 800584e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e052      	b.n	80058fa <USB_EPStartXfer+0xcfa>
 8005854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800585e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <USB_EPStartXfer+0xc74>
 800586a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800586e:	3b01      	subs	r3, #1
 8005870:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29a      	uxth	r2, r3
 800587a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800587e:	b29b      	uxth	r3, r3
 8005880:	029b      	lsls	r3, r3, #10
 8005882:	b29b      	uxth	r3, r3
 8005884:	4313      	orrs	r3, r2
 8005886:	b29b      	uxth	r3, r3
 8005888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005890:	b29a      	uxth	r2, r3
 8005892:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005894:	801a      	strh	r2, [r3, #0]
 8005896:	e030      	b.n	80058fa <USB_EPStartXfer+0xcfa>
 8005898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d128      	bne.n	80058fa <USB_EPStartXfer+0xcfa>
 80058a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058cc:	4413      	add	r3, r2
 80058ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	011a      	lsls	r2, r3, #4
 80058e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058e4:	4413      	add	r3, r2
 80058e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	891b      	ldrh	r3, [r3, #8]
 8005906:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800590a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6959      	ldr	r1, [r3, #20]
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591a:	b29b      	uxth	r3, r3
 800591c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005920:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005924:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005928:	6800      	ldr	r0, [r0, #0]
 800592a:	f000 fe49 	bl	80065c0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800592e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005954:	817b      	strh	r3, [r7, #10]
 8005956:	897b      	ldrh	r3, [r7, #10]
 8005958:	f083 0310 	eor.w	r3, r3, #16
 800595c:	817b      	strh	r3, [r7, #10]
 800595e:	897b      	ldrh	r3, [r7, #10]
 8005960:	f083 0320 	eor.w	r3, r3, #32
 8005964:	817b      	strh	r3, [r7, #10]
 8005966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	897b      	ldrh	r3, [r7, #10]
 8005982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800598e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005992:	b29b      	uxth	r3, r3
 8005994:	8013      	strh	r3, [r2, #0]
 8005996:	f000 bcdf 	b.w	8006358 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800599a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	7b1b      	ldrb	r3, [r3, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f040 80bc 	bne.w	8005b24 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d917      	bls.n	80059f8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80059c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e8:	1ad2      	subs	r2, r2, r3
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	619a      	str	r2, [r3, #24]
 80059f6:	e00e      	b.n	8005a16 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80059f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	011a      	lsls	r2, r3, #4
 8005a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a52:	4413      	add	r3, r2
 8005a54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10d      	bne.n	8005a94 <USB_EPStartXfer+0xe94>
 8005a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	f000 bc28 	b.w	80062e4 <USB_EPStartXfer+0x16e4>
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a98:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a9a:	d81f      	bhi.n	8005adc <USB_EPStartXfer+0xedc>
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa0:	085b      	lsrs	r3, r3, #1
 8005aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <USB_EPStartXfer+0xebc>
 8005ab2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	029b      	lsls	r3, r3, #10
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	f000 bc04 	b.w	80062e4 <USB_EPStartXfer+0x16e4>
 8005adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d104      	bne.n	8005afc <USB_EPStartXfer+0xefc>
 8005af2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005af6:	3b01      	subs	r3, #1
 8005af8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	029b      	lsls	r3, r3, #10
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e3df      	b.n	80062e4 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	78db      	ldrb	r3, [r3, #3]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	f040 8218 	bne.w	8005f66 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f040 809d 	bne.w	8005c82 <USB_EPStartXfer+0x1082>
 8005b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	011a      	lsls	r2, r3, #4
 8005b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b84:	4413      	add	r3, r2
 8005b86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ba0:	801a      	strh	r2, [r3, #0]
 8005ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <USB_EPStartXfer+0xfcc>
 8005bb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	e08f      	b.n	8005cec <USB_EPStartXfer+0x10ec>
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bda:	d826      	bhi.n	8005c2a <USB_EPStartXfer+0x102a>
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <USB_EPStartXfer+0x100c>
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c06:	3301      	adds	r3, #1
 8005c08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	029b      	lsls	r3, r3, #10
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	e060      	b.n	8005cec <USB_EPStartXfer+0x10ec>
 8005c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <USB_EPStartXfer+0x105a>
 8005c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c54:	3b01      	subs	r3, #1
 8005c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	029b      	lsls	r3, r3, #10
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	e034      	b.n	8005cec <USB_EPStartXfer+0x10ec>
 8005c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d12c      	bne.n	8005cec <USB_EPStartXfer+0x10ec>
 8005c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	011a      	lsls	r2, r3, #4
 8005cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cce:	4413      	add	r3, r2
 8005cd0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f040 809d 	bne.w	8005e46 <USB_EPStartXfer+0x1246>
 8005d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d30:	4413      	add	r3, r2
 8005d32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	011a      	lsls	r2, r3, #4
 8005d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d48:	4413      	add	r3, r2
 8005d4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10c      	bne.n	8005d90 <USB_EPStartXfer+0x1190>
 8005d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e088      	b.n	8005ea2 <USB_EPStartXfer+0x12a2>
 8005d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d9e:	d826      	bhi.n	8005dee <USB_EPStartXfer+0x11ee>
 8005da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <USB_EPStartXfer+0x11d0>
 8005dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dca:	3301      	adds	r3, #1
 8005dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	029b      	lsls	r3, r3, #10
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e059      	b.n	8005ea2 <USB_EPStartXfer+0x12a2>
 8005dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 031f 	and.w	r3, r3, #31
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <USB_EPStartXfer+0x121e>
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	029b      	lsls	r3, r3, #10
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	4313      	orrs	r3, r2
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	e02d      	b.n	8005ea2 <USB_EPStartXfer+0x12a2>
 8005e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d125      	bne.n	8005ea2 <USB_EPStartXfer+0x12a2>
 8005e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	011a      	lsls	r2, r3, #4
 8005e80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ea0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8218 	beq.w	80062e4 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ed4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <USB_EPStartXfer+0x12ec>
 8005ee0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005eec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ef0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f040 81f5 	bne.w	80062e4 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005efa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 81ee 	bne.w	80062e4 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	441a      	add	r2, r3
 8005f4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8013      	strh	r3, [r2, #0]
 8005f64:	e1be      	b.n	80062e4 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	78db      	ldrb	r3, [r3, #3]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	f040 81b4 	bne.w	80062e0 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699a      	ldr	r2, [r3, #24]
 8005f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d917      	bls.n	8005fc4 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8005f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	619a      	str	r2, [r3, #24]
 8005fc2:	e00e      	b.n	8005fe2 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8005fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f040 8085 	bne.w	80060fe <USB_EPStartXfer+0x14fe>
 8005ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006010:	b29b      	uxth	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006018:	4413      	add	r3, r2
 800601a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	011a      	lsls	r2, r3, #4
 800602c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006030:	4413      	add	r3, r2
 8006032:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006036:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800603a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006046:	b29a      	uxth	r2, r3
 8006048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10c      	bne.n	8006070 <USB_EPStartXfer+0x1470>
 8006056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006066:	b29a      	uxth	r2, r3
 8006068:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	e077      	b.n	8006160 <USB_EPStartXfer+0x1560>
 8006070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006074:	2b3e      	cmp	r3, #62	@ 0x3e
 8006076:	d81e      	bhi.n	80060b6 <USB_EPStartXfer+0x14b6>
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <USB_EPStartXfer+0x1498>
 800608e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006092:	3301      	adds	r3, #1
 8006094:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006098:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29a      	uxth	r2, r3
 80060a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	029b      	lsls	r3, r3, #10
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	4313      	orrs	r3, r2
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	e054      	b.n	8006160 <USB_EPStartXfer+0x1560>
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <USB_EPStartXfer+0x14d6>
 80060cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d0:	3b01      	subs	r3, #1
 80060d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	029b      	lsls	r3, r3, #10
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e030      	b.n	8006160 <USB_EPStartXfer+0x1560>
 80060fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d128      	bne.n	8006160 <USB_EPStartXfer+0x1560>
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006132:	4413      	add	r3, r2
 8006134:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800614a:	4413      	add	r3, r2
 800614c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006158:	b29a      	uxth	r2, r3
 800615a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800615e:	801a      	strh	r2, [r3, #0]
 8006160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800616e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f040 8085 	bne.w	800628a <USB_EPStartXfer+0x168a>
 8006180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800618e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80061a4:	4413      	add	r3, r2
 80061a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	011a      	lsls	r2, r3, #4
 80061b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80061bc:	4413      	add	r3, r2
 80061be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10c      	bne.n	80061fc <USB_EPStartXfer+0x15fc>
 80061e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	e073      	b.n	80062e4 <USB_EPStartXfer+0x16e4>
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	2b3e      	cmp	r3, #62	@ 0x3e
 8006202:	d81e      	bhi.n	8006242 <USB_EPStartXfer+0x1642>
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <USB_EPStartXfer+0x1624>
 800621a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800621e:	3301      	adds	r3, #1
 8006220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006230:	b29b      	uxth	r3, r3
 8006232:	029b      	lsls	r3, r3, #10
 8006234:	b29b      	uxth	r3, r3
 8006236:	4313      	orrs	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	e050      	b.n	80062e4 <USB_EPStartXfer+0x16e4>
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <USB_EPStartXfer+0x1662>
 8006258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800625c:	3b01      	subs	r3, #1
 800625e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800626e:	b29b      	uxth	r3, r3
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	b29b      	uxth	r3, r3
 8006274:	4313      	orrs	r3, r2
 8006276:	b29b      	uxth	r3, r3
 8006278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006280:	b29a      	uxth	r2, r3
 8006282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	e02c      	b.n	80062e4 <USB_EPStartXfer+0x16e4>
 800628a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d124      	bne.n	80062e4 <USB_EPStartXfer+0x16e4>
 800629a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062b0:	4413      	add	r3, r2
 80062b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	011a      	lsls	r2, r3, #4
 80062c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062c8:	4413      	add	r3, r2
 80062ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e001      	b.n	80062e4 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e03a      	b.n	800635a <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800630a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800630e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006312:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006316:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800631a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800631e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006322:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	441a      	add	r2, r3
 8006340:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800634c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006354:	b29b      	uxth	r3, r3
 8006356:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d020      	beq.n	80063b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800638c:	81bb      	strh	r3, [r7, #12]
 800638e:	89bb      	ldrh	r3, [r7, #12]
 8006390:	f083 0310 	eor.w	r3, r3, #16
 8006394:	81bb      	strh	r3, [r7, #12]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	441a      	add	r2, r3
 80063a0:	89bb      	ldrh	r3, [r7, #12]
 80063a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	8013      	strh	r3, [r2, #0]
 80063b6:	e01f      	b.n	80063f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ce:	81fb      	strh	r3, [r7, #14]
 80063d0:	89fb      	ldrh	r3, [r7, #14]
 80063d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80063d6:	81fb      	strh	r3, [r7, #14]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	89fb      	ldrh	r3, [r7, #14]
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006406:	b480      	push	{r7}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	7b1b      	ldrb	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 809d 	bne.w	8006554 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d04c      	beq.n	80064bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	823b      	strh	r3, [r7, #16]
 8006430:	8a3b      	ldrh	r3, [r7, #16]
 8006432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01b      	beq.n	8006472 <USB_EPClearStall+0x6c>
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800644c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006450:	81fb      	strh	r3, [r7, #14]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	441a      	add	r2, r3
 800645c:	89fb      	ldrh	r3, [r7, #14]
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800646a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	78db      	ldrb	r3, [r3, #3]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d06c      	beq.n	8006554 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006490:	81bb      	strh	r3, [r7, #12]
 8006492:	89bb      	ldrh	r3, [r7, #12]
 8006494:	f083 0320 	eor.w	r3, r3, #32
 8006498:	81bb      	strh	r3, [r7, #12]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	89bb      	ldrh	r3, [r7, #12]
 80064a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	8013      	strh	r3, [r2, #0]
 80064ba:	e04b      	b.n	8006554 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	82fb      	strh	r3, [r7, #22]
 80064ca:	8afb      	ldrh	r3, [r7, #22]
 80064cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01b      	beq.n	800650c <USB_EPClearStall+0x106>
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	82bb      	strh	r3, [r7, #20]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	441a      	add	r2, r3
 80064f6:	8abb      	ldrh	r3, [r7, #20]
 80064f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006508:	b29b      	uxth	r3, r3
 800650a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800651e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006522:	827b      	strh	r3, [r7, #18]
 8006524:	8a7b      	ldrh	r3, [r7, #18]
 8006526:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800652a:	827b      	strh	r3, [r7, #18]
 800652c:	8a7b      	ldrh	r3, [r7, #18]
 800652e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006532:	827b      	strh	r3, [r7, #18]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	441a      	add	r2, r3
 800653e:	8a7b      	ldrh	r3, [r7, #18]
 8006540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800654c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006550:	b29b      	uxth	r3, r3
 8006552:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800656e:	78fb      	ldrb	r3, [r7, #3]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2280      	movs	r2, #128	@ 0x80
 8006578:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b08b      	sub	sp, #44	@ 0x2c
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	4611      	mov	r1, r2
 80065cc:	461a      	mov	r2, r3
 80065ce:	460b      	mov	r3, r1
 80065d0:	80fb      	strh	r3, [r7, #6]
 80065d2:	4613      	mov	r3, r2
 80065d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065d6:	88bb      	ldrh	r3, [r7, #4]
 80065d8:	3301      	adds	r3, #1
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	005a      	lsls	r2, r3, #1
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065f2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f8:	e01e      	b.n	8006638 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	3301      	adds	r3, #1
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	b21a      	sxth	r2, r3
 800660a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800660e:	4313      	orrs	r3, r2
 8006610:	b21b      	sxth	r3, r3
 8006612:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	8a7a      	ldrh	r2, [r7, #18]
 8006618:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	3302      	adds	r3, #2
 800661e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	3302      	adds	r3, #2
 8006624:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3301      	adds	r3, #1
 800662a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	3301      	adds	r3, #1
 8006630:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	3b01      	subs	r3, #1
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1dd      	bne.n	80065fa <USB_WritePMA+0x3a>
  }
}
 800663e:	bf00      	nop
 8006640:	bf00      	nop
 8006642:	372c      	adds	r7, #44	@ 0x2c
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800664c:	b480      	push	{r7}
 800664e:	b08b      	sub	sp, #44	@ 0x2c
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	4611      	mov	r1, r2
 8006658:	461a      	mov	r2, r3
 800665a:	460b      	mov	r3, r1
 800665c:	80fb      	strh	r3, [r7, #6]
 800665e:	4613      	mov	r3, r2
 8006660:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006662:	88bb      	ldrh	r3, [r7, #4]
 8006664:	085b      	lsrs	r3, r3, #1
 8006666:	b29b      	uxth	r3, r3
 8006668:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	005a      	lsls	r2, r3, #1
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800667e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
 8006684:	e01b      	b.n	80066be <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	3302      	adds	r3, #2
 8006692:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	b2da      	uxtb	r2, r3
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	3301      	adds	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	0a1b      	lsrs	r3, r3, #8
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	3301      	adds	r3, #1
 80066b0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	3302      	adds	r3, #2
 80066b6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	3b01      	subs	r3, #1
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e0      	bne.n	8006686 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80066c4:	88bb      	ldrh	r3, [r7, #4]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	701a      	strb	r2, [r3, #0]
  }
}
 80066e0:	bf00      	nop
 80066e2:	372c      	adds	r7, #44	@ 0x2c
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80066f6:	2302      	movs	r3, #2
 80066f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800671a:	b480      	push	{r7}
 800671c:	b087      	sub	sp, #28
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	4613      	mov	r3, r2
 8006726:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800672e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006738:	88fa      	ldrh	r2, [r7, #6]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800675e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006784:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d017      	beq.n	80067c0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7c1b      	ldrb	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800679e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067a2:	2101      	movs	r1, #1
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 fc94 	bl	80080d2 <USBD_LL_PrepareReceive>
 80067aa:	e007      	b.n	80067bc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067b2:	2340      	movs	r3, #64	@ 0x40
 80067b4:	2101      	movs	r1, #1
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fc8b 	bl	80080d2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80067de:	2302      	movs	r3, #2
 80067e0:	e01a      	b.n	8006818 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	79fa      	ldrb	r2, [r7, #7]
 800680e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f001 fb17 	bl	8007e44 <USBD_LL_Init>

  return USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d006      	beq.n	8006842 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	73fb      	strb	r3, [r7, #15]
 8006840:	e001      	b.n	8006846 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006842:	2302      	movs	r3, #2
 8006844:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fb4b 	bl	8007ef8 <USBD_LL_Start>

  return USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800688e:	2302      	movs	r3, #2
 8006890:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00c      	beq.n	80068b6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	4611      	mov	r1, r2
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	78fa      	ldrb	r2, [r7, #3]
 80068d6:	4611      	mov	r1, r2
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3

  return USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 feda 	bl	80076b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800690c:	461a      	mov	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	2b02      	cmp	r3, #2
 8006920:	d016      	beq.n	8006950 <USBD_LL_SetupStage+0x6a>
 8006922:	2b02      	cmp	r3, #2
 8006924:	d81c      	bhi.n	8006960 <USBD_LL_SetupStage+0x7a>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <USBD_LL_SetupStage+0x4a>
 800692a:	2b01      	cmp	r3, #1
 800692c:	d008      	beq.n	8006940 <USBD_LL_SetupStage+0x5a>
 800692e:	e017      	b.n	8006960 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f9cd 	bl	8006cd8 <USBD_StdDevReq>
      break;
 800693e:	e01a      	b.n	8006976 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fa2f 	bl	8006dac <USBD_StdItfReq>
      break;
 800694e:	e012      	b.n	8006976 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fa6f 	bl	8006e3c <USBD_StdEPReq>
      break;
 800695e:	e00a      	b.n	8006976 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006966:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800696a:	b2db      	uxtb	r3, r3
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fb03 	bl	8007f7a <USBD_LL_StallEP>
      break;
 8006974:	bf00      	nop
  }

  return USBD_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	460b      	mov	r3, r1
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d14b      	bne.n	8006a2c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800699a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d134      	bne.n	8006a10 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d919      	bls.n	80069e6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d203      	bcs.n	80069d4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	e002      	b.n	80069da <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069d8:	b29b      	uxth	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 ff3a 	bl	8007858 <USBD_CtlContinueRx>
 80069e4:	e038      	b.n	8006a58 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d105      	bne.n	8006a08 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 ff37 	bl	800787c <USBD_CtlSendStatus>
 8006a0e:	e023      	b.n	8006a58 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a16:	2b05      	cmp	r3, #5
 8006a18:	d11e      	bne.n	8006a58 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a22:	2100      	movs	r1, #0
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f001 faa8 	bl	8007f7a <USBD_LL_StallEP>
 8006a2a:	e015      	b.n	8006a58 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00d      	beq.n	8006a54 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d108      	bne.n	8006a54 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	7afa      	ldrb	r2, [r7, #11]
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	4798      	blx	r3
 8006a52:	e001      	b.n	8006a58 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a54:	2302      	movs	r3, #2
 8006a56:	e000      	b.n	8006a5a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b086      	sub	sp, #24
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	607a      	str	r2, [r7, #4]
 8006a6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a70:	7afb      	ldrb	r3, [r7, #11]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d17f      	bne.n	8006b76 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3314      	adds	r3, #20
 8006a7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d15c      	bne.n	8006b40 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d915      	bls.n	8006abe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	1ad2      	subs	r2, r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fec2 	bl	8007834 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f001 fb0b 	bl	80080d2 <USBD_LL_PrepareReceive>
 8006abc:	e04e      	b.n	8006b5c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	6912      	ldr	r2, [r2, #16]
 8006ac6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aca:	fb01 f202 	mul.w	r2, r1, r2
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11c      	bne.n	8006b0e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d316      	bcc.n	8006b0e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d20f      	bcs.n	8006b0e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006aee:	2200      	movs	r2, #0
 8006af0:	2100      	movs	r1, #0
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fe9e 	bl	8007834 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b00:	2300      	movs	r3, #0
 8006b02:	2200      	movs	r2, #0
 8006b04:	2100      	movs	r1, #0
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f001 fae3 	bl	80080d2 <USBD_LL_PrepareReceive>
 8006b0c:	e026      	b.n	8006b5c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d105      	bne.n	8006b30 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b30:	2180      	movs	r1, #128	@ 0x80
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f001 fa21 	bl	8007f7a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 feb2 	bl	80078a2 <USBD_CtlReceiveStatus>
 8006b3e:	e00d      	b.n	8006b5c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d004      	beq.n	8006b54 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b54:	2180      	movs	r1, #128	@ 0x80
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f001 fa0f 	bl	8007f7a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d11d      	bne.n	8006ba2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fe80 	bl	800686c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b74:	e015      	b.n	8006ba2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00d      	beq.n	8006b9e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d108      	bne.n	8006b9e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	7afa      	ldrb	r2, [r7, #11]
 8006b96:	4611      	mov	r1, r2
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	4798      	blx	r3
 8006b9c:	e001      	b.n	8006ba2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e000      	b.n	8006ba4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bb4:	2340      	movs	r3, #64	@ 0x40
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f001 f9b7 	bl	8007f2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2240      	movs	r2, #64	@ 0x40
 8006bcc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bd0:	2340      	movs	r3, #64	@ 0x40
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2180      	movs	r1, #128	@ 0x80
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 f9a9 	bl	8007f2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2240      	movs	r2, #64	@ 0x40
 8006be6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d009      	beq.n	8006c24 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6852      	ldr	r2, [r2, #4]
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	4611      	mov	r1, r2
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
  }

  return USBD_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2204      	movs	r2, #4
 8006c66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d105      	bne.n	8006c96 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d10b      	bne.n	8006cce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cee:	2b40      	cmp	r3, #64	@ 0x40
 8006cf0:	d005      	beq.n	8006cfe <USBD_StdDevReq+0x26>
 8006cf2:	2b40      	cmp	r3, #64	@ 0x40
 8006cf4:	d84f      	bhi.n	8006d96 <USBD_StdDevReq+0xbe>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <USBD_StdDevReq+0x36>
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d14b      	bne.n	8006d96 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
      break;
 8006d0c:	e048      	b.n	8006da0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b09      	cmp	r3, #9
 8006d14:	d839      	bhi.n	8006d8a <USBD_StdDevReq+0xb2>
 8006d16:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <USBD_StdDevReq+0x44>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d6d 	.word	0x08006d6d
 8006d20:	08006d81 	.word	0x08006d81
 8006d24:	08006d8b 	.word	0x08006d8b
 8006d28:	08006d77 	.word	0x08006d77
 8006d2c:	08006d8b 	.word	0x08006d8b
 8006d30:	08006d4f 	.word	0x08006d4f
 8006d34:	08006d45 	.word	0x08006d45
 8006d38:	08006d8b 	.word	0x08006d8b
 8006d3c:	08006d63 	.word	0x08006d63
 8006d40:	08006d59 	.word	0x08006d59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f9dc 	bl	8007104 <USBD_GetDescriptor>
          break;
 8006d4c:	e022      	b.n	8006d94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fb3f 	bl	80073d4 <USBD_SetAddress>
          break;
 8006d56:	e01d      	b.n	8006d94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fb7e 	bl	800745c <USBD_SetConfig>
          break;
 8006d60:	e018      	b.n	8006d94 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fc07 	bl	8007578 <USBD_GetConfig>
          break;
 8006d6a:	e013      	b.n	8006d94 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fc37 	bl	80075e2 <USBD_GetStatus>
          break;
 8006d74:	e00e      	b.n	8006d94 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fc65 	bl	8007648 <USBD_SetFeature>
          break;
 8006d7e:	e009      	b.n	8006d94 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fc74 	bl	8007670 <USBD_ClrFeature>
          break;
 8006d88:	e004      	b.n	8006d94 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fcca 	bl	8007726 <USBD_CtlError>
          break;
 8006d92:	bf00      	nop
      }
      break;
 8006d94:	e004      	b.n	8006da0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fcc4 	bl	8007726 <USBD_CtlError>
      break;
 8006d9e:	bf00      	nop
  }

  return ret;
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop

08006dac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dc2:	2b40      	cmp	r3, #64	@ 0x40
 8006dc4:	d005      	beq.n	8006dd2 <USBD_StdItfReq+0x26>
 8006dc6:	2b40      	cmp	r3, #64	@ 0x40
 8006dc8:	d82e      	bhi.n	8006e28 <USBD_StdItfReq+0x7c>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <USBD_StdItfReq+0x26>
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d12a      	bne.n	8006e28 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d81d      	bhi.n	8006e1a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	889b      	ldrh	r3, [r3, #4]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d813      	bhi.n	8006e10 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	88db      	ldrh	r3, [r3, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d110      	bne.n	8006e24 <USBD_StdItfReq+0x78>
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10d      	bne.n	8006e24 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fd37 	bl	800787c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e0e:	e009      	b.n	8006e24 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fc87 	bl	8007726 <USBD_CtlError>
          break;
 8006e18:	e004      	b.n	8006e24 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fc82 	bl	8007726 <USBD_CtlError>
          break;
 8006e22:	e000      	b.n	8006e26 <USBD_StdItfReq+0x7a>
          break;
 8006e24:	bf00      	nop
      }
      break;
 8006e26:	e004      	b.n	8006e32 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fc7b 	bl	8007726 <USBD_CtlError>
      break;
 8006e30:	bf00      	nop
  }

  return USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	889b      	ldrh	r3, [r3, #4]
 8006e4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e58:	2b40      	cmp	r3, #64	@ 0x40
 8006e5a:	d007      	beq.n	8006e6c <USBD_StdEPReq+0x30>
 8006e5c:	2b40      	cmp	r3, #64	@ 0x40
 8006e5e:	f200 8146 	bhi.w	80070ee <USBD_StdEPReq+0x2b2>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <USBD_StdEPReq+0x40>
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	f040 8141 	bne.w	80070ee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
      break;
 8006e7a:	e13d      	b.n	80070f8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d10a      	bne.n	8006e9e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	e12d      	b.n	80070fa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d007      	beq.n	8006eb6 <USBD_StdEPReq+0x7a>
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	f300 811b 	bgt.w	80070e2 <USBD_StdEPReq+0x2a6>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d072      	beq.n	8006f96 <USBD_StdEPReq+0x15a>
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d03a      	beq.n	8006f2a <USBD_StdEPReq+0xee>
 8006eb4:	e115      	b.n	80070e2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d002      	beq.n	8006ec6 <USBD_StdEPReq+0x8a>
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d015      	beq.n	8006ef0 <USBD_StdEPReq+0xb4>
 8006ec4:	e02b      	b.n	8006f1e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00c      	beq.n	8006ee6 <USBD_StdEPReq+0xaa>
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	2b80      	cmp	r3, #128	@ 0x80
 8006ed0:	d009      	beq.n	8006ee6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 f84f 	bl	8007f7a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006edc:	2180      	movs	r1, #128	@ 0x80
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 f84b 	bl	8007f7a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ee4:	e020      	b.n	8006f28 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc1c 	bl	8007726 <USBD_CtlError>
              break;
 8006eee:	e01b      	b.n	8006f28 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	885b      	ldrh	r3, [r3, #2]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10e      	bne.n	8006f16 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <USBD_StdEPReq+0xda>
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
 8006f00:	2b80      	cmp	r3, #128	@ 0x80
 8006f02:	d008      	beq.n	8006f16 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	88db      	ldrh	r3, [r3, #6]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 f832 	bl	8007f7a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fcb0 	bl	800787c <USBD_CtlSendStatus>

              break;
 8006f1c:	e004      	b.n	8006f28 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fc00 	bl	8007726 <USBD_CtlError>
              break;
 8006f26:	bf00      	nop
          }
          break;
 8006f28:	e0e0      	b.n	80070ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d002      	beq.n	8006f3a <USBD_StdEPReq+0xfe>
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d015      	beq.n	8006f64 <USBD_StdEPReq+0x128>
 8006f38:	e026      	b.n	8006f88 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00c      	beq.n	8006f5a <USBD_StdEPReq+0x11e>
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	2b80      	cmp	r3, #128	@ 0x80
 8006f44:	d009      	beq.n	8006f5a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 f815 	bl	8007f7a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f50:	2180      	movs	r1, #128	@ 0x80
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 f811 	bl	8007f7a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f58:	e01c      	b.n	8006f94 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fbe2 	bl	8007726 <USBD_CtlError>
              break;
 8006f62:	e017      	b.n	8006f94 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	885b      	ldrh	r3, [r3, #2]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d112      	bne.n	8006f92 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f81c 	bl	8007fb8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fc7b 	bl	800787c <USBD_CtlSendStatus>
              }
              break;
 8006f86:	e004      	b.n	8006f92 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fbcb 	bl	8007726 <USBD_CtlError>
              break;
 8006f90:	e000      	b.n	8006f94 <USBD_StdEPReq+0x158>
              break;
 8006f92:	bf00      	nop
          }
          break;
 8006f94:	e0aa      	b.n	80070ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d002      	beq.n	8006fa6 <USBD_StdEPReq+0x16a>
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d032      	beq.n	800700a <USBD_StdEPReq+0x1ce>
 8006fa4:	e097      	b.n	80070d6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <USBD_StdEPReq+0x180>
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	2b80      	cmp	r3, #128	@ 0x80
 8006fb0:	d004      	beq.n	8006fbc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fbb6 	bl	8007726 <USBD_CtlError>
                break;
 8006fba:	e091      	b.n	80070e0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	da0b      	bge.n	8006fdc <USBD_StdEPReq+0x1a0>
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	3310      	adds	r3, #16
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3304      	adds	r3, #4
 8006fda:	e00b      	b.n	8006ff4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2202      	movs	r2, #2
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fbfa 	bl	80077fc <USBD_CtlSendData>
              break;
 8007008:	e06a      	b.n	80070e0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800700a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800700e:	2b00      	cmp	r3, #0
 8007010:	da11      	bge.n	8007036 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	f003 020f 	and.w	r2, r3, #15
 8007018:	6879      	ldr	r1, [r7, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	3318      	adds	r3, #24
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d117      	bne.n	800705c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fb79 	bl	8007726 <USBD_CtlError>
                  break;
 8007034:	e054      	b.n	80070e0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	f003 020f 	and.w	r2, r3, #15
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fb66 	bl	8007726 <USBD_CtlError>
                  break;
 800705a:	e041      	b.n	80070e0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800705c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007060:	2b00      	cmp	r3, #0
 8007062:	da0b      	bge.n	800707c <USBD_StdEPReq+0x240>
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	3310      	adds	r3, #16
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	4413      	add	r3, r2
 8007078:	3304      	adds	r3, #4
 800707a:	e00b      	b.n	8007094 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	4413      	add	r3, r2
 8007092:	3304      	adds	r3, #4
 8007094:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <USBD_StdEPReq+0x266>
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	2b80      	cmp	r3, #128	@ 0x80
 80070a0:	d103      	bne.n	80070aa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e00e      	b.n	80070c8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 ffa1 	bl	8007ff6 <USBD_LL_IsStallEP>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2201      	movs	r2, #1
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	e002      	b.n	80070c8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2202      	movs	r2, #2
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fb94 	bl	80077fc <USBD_CtlSendData>
              break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fb24 	bl	8007726 <USBD_CtlError>
              break;
 80070de:	bf00      	nop
          }
          break;
 80070e0:	e004      	b.n	80070ec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fb1e 	bl	8007726 <USBD_CtlError>
          break;
 80070ea:	bf00      	nop
      }
      break;
 80070ec:	e004      	b.n	80070f8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fb18 	bl	8007726 <USBD_CtlError>
      break;
 80070f6:	bf00      	nop
  }

  return ret;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	885b      	ldrh	r3, [r3, #2]
 800711e:	0a1b      	lsrs	r3, r3, #8
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	2b06      	cmp	r3, #6
 8007126:	f200 8128 	bhi.w	800737a <USBD_GetDescriptor+0x276>
 800712a:	a201      	add	r2, pc, #4	@ (adr r2, 8007130 <USBD_GetDescriptor+0x2c>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	0800714d 	.word	0x0800714d
 8007134:	08007165 	.word	0x08007165
 8007138:	080071a5 	.word	0x080071a5
 800713c:	0800737b 	.word	0x0800737b
 8007140:	0800737b 	.word	0x0800737b
 8007144:	0800731b 	.word	0x0800731b
 8007148:	08007347 	.word	0x08007347
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	7c12      	ldrb	r2, [r2, #16]
 8007158:	f107 0108 	add.w	r1, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
      break;
 8007162:	e112      	b.n	800738a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	7c1b      	ldrb	r3, [r3, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10d      	bne.n	8007188 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007174:	f107 0208 	add.w	r2, r7, #8
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
 800717c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	2202      	movs	r2, #2
 8007184:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007186:	e100      	b.n	800738a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	f107 0208 	add.w	r2, r7, #8
 8007194:	4610      	mov	r0, r2
 8007196:	4798      	blx	r3
 8007198:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3301      	adds	r3, #1
 800719e:	2202      	movs	r2, #2
 80071a0:	701a      	strb	r2, [r3, #0]
      break;
 80071a2:	e0f2      	b.n	800738a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	885b      	ldrh	r3, [r3, #2]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	f200 80ac 	bhi.w	8007308 <USBD_GetDescriptor+0x204>
 80071b0:	a201      	add	r2, pc, #4	@ (adr r2, 80071b8 <USBD_GetDescriptor+0xb4>)
 80071b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b6:	bf00      	nop
 80071b8:	080071d1 	.word	0x080071d1
 80071bc:	08007205 	.word	0x08007205
 80071c0:	08007239 	.word	0x08007239
 80071c4:	0800726d 	.word	0x0800726d
 80071c8:	080072a1 	.word	0x080072a1
 80071cc:	080072d5 	.word	0x080072d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	7c12      	ldrb	r2, [r2, #16]
 80071e8:	f107 0108 	add.w	r1, r7, #8
 80071ec:	4610      	mov	r0, r2
 80071ee:	4798      	blx	r3
 80071f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071f2:	e091      	b.n	8007318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa95 	bl	8007726 <USBD_CtlError>
            err++;
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	3301      	adds	r3, #1
 8007200:	72fb      	strb	r3, [r7, #11]
          break;
 8007202:	e089      	b.n	8007318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	7c12      	ldrb	r2, [r2, #16]
 800721c:	f107 0108 	add.w	r1, r7, #8
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007226:	e077      	b.n	8007318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa7b 	bl	8007726 <USBD_CtlError>
            err++;
 8007230:	7afb      	ldrb	r3, [r7, #11]
 8007232:	3301      	adds	r3, #1
 8007234:	72fb      	strb	r3, [r7, #11]
          break;
 8007236:	e06f      	b.n	8007318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7c12      	ldrb	r2, [r2, #16]
 8007250:	f107 0108 	add.w	r1, r7, #8
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
 8007258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800725a:	e05d      	b.n	8007318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa61 	bl	8007726 <USBD_CtlError>
            err++;
 8007264:	7afb      	ldrb	r3, [r7, #11]
 8007266:	3301      	adds	r3, #1
 8007268:	72fb      	strb	r3, [r7, #11]
          break;
 800726a:	e055      	b.n	8007318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	7c12      	ldrb	r2, [r2, #16]
 8007284:	f107 0108 	add.w	r1, r7, #8
 8007288:	4610      	mov	r0, r2
 800728a:	4798      	blx	r3
 800728c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800728e:	e043      	b.n	8007318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fa47 	bl	8007726 <USBD_CtlError>
            err++;
 8007298:	7afb      	ldrb	r3, [r7, #11]
 800729a:	3301      	adds	r3, #1
 800729c:	72fb      	strb	r3, [r7, #11]
          break;
 800729e:	e03b      	b.n	8007318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	7c12      	ldrb	r2, [r2, #16]
 80072b8:	f107 0108 	add.w	r1, r7, #8
 80072bc:	4610      	mov	r0, r2
 80072be:	4798      	blx	r3
 80072c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072c2:	e029      	b.n	8007318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa2d 	bl	8007726 <USBD_CtlError>
            err++;
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	3301      	adds	r3, #1
 80072d0:	72fb      	strb	r3, [r7, #11]
          break;
 80072d2:	e021      	b.n	8007318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	7c12      	ldrb	r2, [r2, #16]
 80072ec:	f107 0108 	add.w	r1, r7, #8
 80072f0:	4610      	mov	r0, r2
 80072f2:	4798      	blx	r3
 80072f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072f6:	e00f      	b.n	8007318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fa13 	bl	8007726 <USBD_CtlError>
            err++;
 8007300:	7afb      	ldrb	r3, [r7, #11]
 8007302:	3301      	adds	r3, #1
 8007304:	72fb      	strb	r3, [r7, #11]
          break;
 8007306:	e007      	b.n	8007318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa0b 	bl	8007726 <USBD_CtlError>
          err++;
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	3301      	adds	r3, #1
 8007314:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007316:	e038      	b.n	800738a <USBD_GetDescriptor+0x286>
 8007318:	e037      	b.n	800738a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7c1b      	ldrb	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d109      	bne.n	8007336 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732a:	f107 0208 	add.w	r2, r7, #8
 800732e:	4610      	mov	r0, r2
 8007330:	4798      	blx	r3
 8007332:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007334:	e029      	b.n	800738a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f9f4 	bl	8007726 <USBD_CtlError>
        err++;
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	3301      	adds	r3, #1
 8007342:	72fb      	strb	r3, [r7, #11]
      break;
 8007344:	e021      	b.n	800738a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7c1b      	ldrb	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10d      	bne.n	800736a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007356:	f107 0208 	add.w	r2, r7, #8
 800735a:	4610      	mov	r0, r2
 800735c:	4798      	blx	r3
 800735e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3301      	adds	r3, #1
 8007364:	2207      	movs	r2, #7
 8007366:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007368:	e00f      	b.n	800738a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f9da 	bl	8007726 <USBD_CtlError>
        err++;
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	3301      	adds	r3, #1
 8007376:	72fb      	strb	r3, [r7, #11]
      break;
 8007378:	e007      	b.n	800738a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f9d2 	bl	8007726 <USBD_CtlError>
      err++;
 8007382:	7afb      	ldrb	r3, [r7, #11]
 8007384:	3301      	adds	r3, #1
 8007386:	72fb      	strb	r3, [r7, #11]
      break;
 8007388:	bf00      	nop
  }

  if (err != 0U)
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d11c      	bne.n	80073ca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007390:	893b      	ldrh	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d011      	beq.n	80073ba <USBD_GetDescriptor+0x2b6>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	88db      	ldrh	r3, [r3, #6]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00d      	beq.n	80073ba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	88da      	ldrh	r2, [r3, #6]
 80073a2:	893b      	ldrh	r3, [r7, #8]
 80073a4:	4293      	cmp	r3, r2
 80073a6:	bf28      	it	cs
 80073a8:	4613      	movcs	r3, r2
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073ae:	893b      	ldrh	r3, [r7, #8]
 80073b0:	461a      	mov	r2, r3
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fa21 	bl	80077fc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	88db      	ldrh	r3, [r3, #6]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa5a 	bl	800787c <USBD_CtlSendStatus>
 80073c8:	e000      	b.n	80073cc <USBD_GetDescriptor+0x2c8>
    return;
 80073ca:	bf00      	nop
    }
  }
}
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop

080073d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	889b      	ldrh	r3, [r3, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d130      	bne.n	8007448 <USBD_SetAddress+0x74>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	88db      	ldrh	r3, [r3, #6]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d12c      	bne.n	8007448 <USBD_SetAddress+0x74>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80073f4:	d828      	bhi.n	8007448 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	885b      	ldrh	r3, [r3, #2]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007400:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007408:	2b03      	cmp	r3, #3
 800740a:	d104      	bne.n	8007416 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f989 	bl	8007726 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007414:	e01d      	b.n	8007452 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	7bfa      	ldrb	r2, [r7, #15]
 800741a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fe13 	bl	800804e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fa27 	bl	800787c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743c:	e009      	b.n	8007452 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007446:	e004      	b.n	8007452 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f96b 	bl	8007726 <USBD_CtlError>
  }
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	885b      	ldrh	r3, [r3, #2]
 800746a:	b2da      	uxtb	r2, r3
 800746c:	4b41      	ldr	r3, [pc, #260]	@ (8007574 <USBD_SetConfig+0x118>)
 800746e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007470:	4b40      	ldr	r3, [pc, #256]	@ (8007574 <USBD_SetConfig+0x118>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d904      	bls.n	8007482 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f953 	bl	8007726 <USBD_CtlError>
 8007480:	e075      	b.n	800756e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007488:	2b02      	cmp	r3, #2
 800748a:	d002      	beq.n	8007492 <USBD_SetConfig+0x36>
 800748c:	2b03      	cmp	r3, #3
 800748e:	d023      	beq.n	80074d8 <USBD_SetConfig+0x7c>
 8007490:	e062      	b.n	8007558 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007492:	4b38      	ldr	r3, [pc, #224]	@ (8007574 <USBD_SetConfig+0x118>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01a      	beq.n	80074d0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800749a:	4b36      	ldr	r3, [pc, #216]	@ (8007574 <USBD_SetConfig+0x118>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2203      	movs	r2, #3
 80074a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074ac:	4b31      	ldr	r3, [pc, #196]	@ (8007574 <USBD_SetConfig+0x118>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff f9e5 	bl	8006882 <USBD_SetClassConfig>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d104      	bne.n	80074c8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f930 	bl	8007726 <USBD_CtlError>
            return;
 80074c6:	e052      	b.n	800756e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f9d7 	bl	800787c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074ce:	e04e      	b.n	800756e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9d3 	bl	800787c <USBD_CtlSendStatus>
        break;
 80074d6:	e04a      	b.n	800756e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80074d8:	4b26      	ldr	r3, [pc, #152]	@ (8007574 <USBD_SetConfig+0x118>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d112      	bne.n	8007506 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80074e8:	4b22      	ldr	r3, [pc, #136]	@ (8007574 <USBD_SetConfig+0x118>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80074f2:	4b20      	ldr	r3, [pc, #128]	@ (8007574 <USBD_SetConfig+0x118>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff f9e1 	bl	80068c0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f9bc 	bl	800787c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007504:	e033      	b.n	800756e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007506:	4b1b      	ldr	r3, [pc, #108]	@ (8007574 <USBD_SetConfig+0x118>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d01d      	beq.n	8007550 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff f9cf 	bl	80068c0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007522:	4b14      	ldr	r3, [pc, #80]	@ (8007574 <USBD_SetConfig+0x118>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800752c:	4b11      	ldr	r3, [pc, #68]	@ (8007574 <USBD_SetConfig+0x118>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff f9a5 	bl	8006882 <USBD_SetClassConfig>
 8007538:	4603      	mov	r3, r0
 800753a:	2b02      	cmp	r3, #2
 800753c:	d104      	bne.n	8007548 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8f0 	bl	8007726 <USBD_CtlError>
            return;
 8007546:	e012      	b.n	800756e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f997 	bl	800787c <USBD_CtlSendStatus>
        break;
 800754e:	e00e      	b.n	800756e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f993 	bl	800787c <USBD_CtlSendStatus>
        break;
 8007556:	e00a      	b.n	800756e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8e3 	bl	8007726 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007560:	4b04      	ldr	r3, [pc, #16]	@ (8007574 <USBD_SetConfig+0x118>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff f9aa 	bl	80068c0 <USBD_ClrClassConfig>
        break;
 800756c:	bf00      	nop
    }
  }
}
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	200001cc 	.word	0x200001cc

08007578 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	88db      	ldrh	r3, [r3, #6]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d004      	beq.n	8007594 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f8ca 	bl	8007726 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007592:	e022      	b.n	80075da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800759a:	2b02      	cmp	r3, #2
 800759c:	dc02      	bgt.n	80075a4 <USBD_GetConfig+0x2c>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dc03      	bgt.n	80075aa <USBD_GetConfig+0x32>
 80075a2:	e015      	b.n	80075d0 <USBD_GetConfig+0x58>
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetConfig+0x48>
 80075a8:	e012      	b.n	80075d0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3308      	adds	r3, #8
 80075b4:	2201      	movs	r2, #1
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f91f 	bl	80077fc <USBD_CtlSendData>
        break;
 80075be:	e00c      	b.n	80075da <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	2201      	movs	r2, #1
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f917 	bl	80077fc <USBD_CtlSendData>
        break;
 80075ce:	e004      	b.n	80075da <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f8a7 	bl	8007726 <USBD_CtlError>
        break;
 80075d8:	bf00      	nop
}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075f2:	3b01      	subs	r3, #1
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d81e      	bhi.n	8007636 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	88db      	ldrh	r3, [r3, #6]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d004      	beq.n	800760a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f88f 	bl	8007726 <USBD_CtlError>
        break;
 8007608:	e01a      	b.n	8007640 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f043 0202 	orr.w	r2, r3, #2
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	330c      	adds	r3, #12
 800762a:	2202      	movs	r2, #2
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f8e4 	bl	80077fc <USBD_CtlSendData>
      break;
 8007634:	e004      	b.n	8007640 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f874 	bl	8007726 <USBD_CtlError>
      break;
 800763e:	bf00      	nop
  }
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	885b      	ldrh	r3, [r3, #2]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d106      	bne.n	8007668 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f90a 	bl	800787c <USBD_CtlSendStatus>
  }
}
 8007668:	bf00      	nop
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007680:	3b01      	subs	r3, #1
 8007682:	2b02      	cmp	r3, #2
 8007684:	d80b      	bhi.n	800769e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	885b      	ldrh	r3, [r3, #2]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d10c      	bne.n	80076a8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f8f0 	bl	800787c <USBD_CtlSendStatus>
      }
      break;
 800769c:	e004      	b.n	80076a8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f840 	bl	8007726 <USBD_CtlError>
      break;
 80076a6:	e000      	b.n	80076aa <USBD_ClrFeature+0x3a>
      break;
 80076a8:	bf00      	nop
  }
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781a      	ldrb	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	785a      	ldrb	r2, [r3, #1]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	3302      	adds	r3, #2
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	3303      	adds	r3, #3
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	b29b      	uxth	r3, r3
 80076de:	4413      	add	r3, r2
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	3304      	adds	r3, #4
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	3305      	adds	r3, #5
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	4413      	add	r3, r2
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	3306      	adds	r3, #6
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	3307      	adds	r3, #7
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	b29b      	uxth	r3, r3
 8007712:	4413      	add	r3, r2
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	80da      	strh	r2, [r3, #6]

}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007730:	2180      	movs	r1, #128	@ 0x80
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fc21 	bl	8007f7a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007738:	2100      	movs	r1, #0
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fc1d 	bl	8007f7a <USBD_LL_StallEP>
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d032      	beq.n	80077c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 f834 	bl	80077cc <USBD_GetLen>
 8007764:	4603      	mov	r3, r0
 8007766:	3301      	adds	r3, #1
 8007768:	b29b      	uxth	r3, r3
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	75fa      	strb	r2, [r7, #23]
 8007778:	461a      	mov	r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	4413      	add	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	75fa      	strb	r2, [r7, #23]
 800778a:	461a      	mov	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4413      	add	r3, r2
 8007790:	2203      	movs	r2, #3
 8007792:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007794:	e012      	b.n	80077bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	60fa      	str	r2, [r7, #12]
 800779c:	7dfa      	ldrb	r2, [r7, #23]
 800779e:	1c51      	adds	r1, r2, #1
 80077a0:	75f9      	strb	r1, [r7, #23]
 80077a2:	4611      	mov	r1, r2
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	440a      	add	r2, r1
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	75fa      	strb	r2, [r7, #23]
 80077b2:	461a      	mov	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4413      	add	r3, r2
 80077b8:	2200      	movs	r2, #0
 80077ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e8      	bne.n	8007796 <USBD_GetString+0x4e>
    }
  }
}
 80077c4:	bf00      	nop
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80077d8:	e005      	b.n	80077e6 <USBD_GetLen+0x1a>
  {
    len++;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	3301      	adds	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]
    buf++;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3301      	adds	r3, #1
 80077e4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1f5      	bne.n	80077da <USBD_GetLen+0xe>
  }

  return len;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	4613      	mov	r3, r2
 8007808:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2202      	movs	r2, #2
 800780e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007812:	88fa      	ldrh	r2, [r7, #6]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007818:	88fa      	ldrh	r2, [r7, #6]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	2100      	movs	r1, #0
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fc31 	bl	800808c <USBD_LL_Transmit>

  return USBD_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007842:	88fb      	ldrh	r3, [r7, #6]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	2100      	movs	r1, #0
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 fc1f 	bl	800808c <USBD_LL_Transmit>

  return USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	2100      	movs	r1, #0
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 fc30 	bl	80080d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2204      	movs	r2, #4
 8007888:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800788c:	2300      	movs	r3, #0
 800788e:	2200      	movs	r2, #0
 8007890:	2100      	movs	r1, #0
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fbfa 	bl	800808c <USBD_LL_Transmit>

  return USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2205      	movs	r2, #5
 80078ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078b2:	2300      	movs	r3, #0
 80078b4:	2200      	movs	r2, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fc0a 	bl	80080d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078cc:	2200      	movs	r2, #0
 80078ce:	4912      	ldr	r1, [pc, #72]	@ (8007918 <MX_USB_DEVICE_Init+0x50>)
 80078d0:	4812      	ldr	r0, [pc, #72]	@ (800791c <MX_USB_DEVICE_Init+0x54>)
 80078d2:	f7fe ff7a 	bl	80067ca <USBD_Init>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078dc:	f7f8 fdee 	bl	80004bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &passwordManagerClass) != USBD_OK)
 80078e0:	490f      	ldr	r1, [pc, #60]	@ (8007920 <MX_USB_DEVICE_Init+0x58>)
 80078e2:	480e      	ldr	r0, [pc, #56]	@ (800791c <MX_USB_DEVICE_Init+0x54>)
 80078e4:	f7fe ff9c 	bl	8006820 <USBD_RegisterClass>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <MX_USB_DEVICE_Init+0x2a>
  // if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
  {
    Error_Handler();
 80078ee:	f7f8 fde5 	bl	80004bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078f2:	490c      	ldr	r1, [pc, #48]	@ (8007924 <MX_USB_DEVICE_Init+0x5c>)
 80078f4:	4809      	ldr	r0, [pc, #36]	@ (800791c <MX_USB_DEVICE_Init+0x54>)
 80078f6:	f7fe fef9 	bl	80066ec <USBD_CDC_RegisterInterface>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007900:	f7f8 fddc 	bl	80004bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007904:	4805      	ldr	r0, [pc, #20]	@ (800791c <MX_USB_DEVICE_Init+0x54>)
 8007906:	f7fe ffa5 	bl	8006854 <USBD_Start>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007910:	f7f8 fdd4 	bl	80004bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007914:	bf00      	nop
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000094 	.word	0x20000094
 800791c:	200001d0 	.word	0x200001d0
 8007920:	20000040 	.word	0x20000040
 8007924:	20000084 	.word	0x20000084

08007928 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800792c:	2200      	movs	r2, #0
 800792e:	4905      	ldr	r1, [pc, #20]	@ (8007944 <CDC_Init_FS+0x1c>)
 8007930:	4805      	ldr	r0, [pc, #20]	@ (8007948 <CDC_Init_FS+0x20>)
 8007932:	f7fe fef2 	bl	800671a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007936:	4905      	ldr	r1, [pc, #20]	@ (800794c <CDC_Init_FS+0x24>)
 8007938:	4803      	ldr	r0, [pc, #12]	@ (8007948 <CDC_Init_FS+0x20>)
 800793a:	f7fe ff08 	bl	800674e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800793e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007940:	4618      	mov	r0, r3
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000894 	.word	0x20000894
 8007948:	200001d0 	.word	0x200001d0
 800794c:	20000494 	.word	0x20000494

08007950 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007954:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007956:	4618      	mov	r0, r3
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	6039      	str	r1, [r7, #0]
 800796a:	71fb      	strb	r3, [r7, #7]
 800796c:	4613      	mov	r3, r2
 800796e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007970:	79fb      	ldrb	r3, [r7, #7]
 8007972:	2b23      	cmp	r3, #35	@ 0x23
 8007974:	d84a      	bhi.n	8007a0c <CDC_Control_FS+0xac>
 8007976:	a201      	add	r2, pc, #4	@ (adr r2, 800797c <CDC_Control_FS+0x1c>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	08007a0d 	.word	0x08007a0d
 8007980:	08007a0d 	.word	0x08007a0d
 8007984:	08007a0d 	.word	0x08007a0d
 8007988:	08007a0d 	.word	0x08007a0d
 800798c:	08007a0d 	.word	0x08007a0d
 8007990:	08007a0d 	.word	0x08007a0d
 8007994:	08007a0d 	.word	0x08007a0d
 8007998:	08007a0d 	.word	0x08007a0d
 800799c:	08007a0d 	.word	0x08007a0d
 80079a0:	08007a0d 	.word	0x08007a0d
 80079a4:	08007a0d 	.word	0x08007a0d
 80079a8:	08007a0d 	.word	0x08007a0d
 80079ac:	08007a0d 	.word	0x08007a0d
 80079b0:	08007a0d 	.word	0x08007a0d
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	08007a0d 	.word	0x08007a0d
 80079bc:	08007a0d 	.word	0x08007a0d
 80079c0:	08007a0d 	.word	0x08007a0d
 80079c4:	08007a0d 	.word	0x08007a0d
 80079c8:	08007a0d 	.word	0x08007a0d
 80079cc:	08007a0d 	.word	0x08007a0d
 80079d0:	08007a0d 	.word	0x08007a0d
 80079d4:	08007a0d 	.word	0x08007a0d
 80079d8:	08007a0d 	.word	0x08007a0d
 80079dc:	08007a0d 	.word	0x08007a0d
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	08007a0d 	.word	0x08007a0d
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a0d 	.word	0x08007a0d
 80079f0:	08007a0d 	.word	0x08007a0d
 80079f4:	08007a0d 	.word	0x08007a0d
 80079f8:	08007a0d 	.word	0x08007a0d
 80079fc:	08007a0d 	.word	0x08007a0d
 8007a00:	08007a0d 	.word	0x08007a0d
 8007a04:	08007a0d 	.word	0x08007a0d
 8007a08:	08007a0d 	.word	0x08007a0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a0c:	bf00      	nop
  }

  return (USBD_OK);
 8007a0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4805      	ldr	r0, [pc, #20]	@ (8007a40 <CDC_Receive_FS+0x24>)
 8007a2a:	f7fe fe90 	bl	800674e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a2e:	4804      	ldr	r0, [pc, #16]	@ (8007a40 <CDC_Receive_FS+0x24>)
 8007a30:	f7fe fea1 	bl	8006776 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	200001d0 	.word	0x200001d0

08007a44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	6039      	str	r1, [r7, #0]
 8007a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2212      	movs	r2, #18
 8007a54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a56:	4b03      	ldr	r3, [pc, #12]	@ (8007a64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	200000b0 	.word	0x200000b0

08007a68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2204      	movs	r2, #4
 8007a78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a7a:	4b03      	ldr	r3, [pc, #12]	@ (8007a88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	200000c4 	.word	0x200000c4

08007a8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d105      	bne.n	8007aaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	4907      	ldr	r1, [pc, #28]	@ (8007ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007aa2:	4808      	ldr	r0, [pc, #32]	@ (8007ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007aa4:	f7ff fe50 	bl	8007748 <USBD_GetString>
 8007aa8:	e004      	b.n	8007ab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	4904      	ldr	r1, [pc, #16]	@ (8007ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007aae:	4805      	ldr	r0, [pc, #20]	@ (8007ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ab0:	f7ff fe4a 	bl	8007748 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ab4:	4b02      	ldr	r3, [pc, #8]	@ (8007ac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000c94 	.word	0x20000c94
 8007ac4:	08008270 	.word	0x08008270

08007ac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	4904      	ldr	r1, [pc, #16]	@ (8007ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ad8:	4804      	ldr	r0, [pc, #16]	@ (8007aec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ada:	f7ff fe35 	bl	8007748 <USBD_GetString>
  return USBD_StrDesc;
 8007ade:	4b02      	ldr	r3, [pc, #8]	@ (8007ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	20000c94 	.word	0x20000c94
 8007aec:	08008288 	.word	0x08008288

08007af0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	221a      	movs	r2, #26
 8007b00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b02:	f000 f843 	bl	8007b8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b06:	4b02      	ldr	r3, [pc, #8]	@ (8007b10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	200000c8 	.word	0x200000c8

08007b14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d105      	bne.n	8007b32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4907      	ldr	r1, [pc, #28]	@ (8007b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b2a:	4808      	ldr	r0, [pc, #32]	@ (8007b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b2c:	f7ff fe0c 	bl	8007748 <USBD_GetString>
 8007b30:	e004      	b.n	8007b3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4904      	ldr	r1, [pc, #16]	@ (8007b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b36:	4805      	ldr	r0, [pc, #20]	@ (8007b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b38:	f7ff fe06 	bl	8007748 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b3c:	4b02      	ldr	r3, [pc, #8]	@ (8007b48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000c94 	.word	0x20000c94
 8007b4c:	0800829c 	.word	0x0800829c

08007b50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d105      	bne.n	8007b6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	4907      	ldr	r1, [pc, #28]	@ (8007b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b66:	4808      	ldr	r0, [pc, #32]	@ (8007b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b68:	f7ff fdee 	bl	8007748 <USBD_GetString>
 8007b6c:	e004      	b.n	8007b78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	4904      	ldr	r1, [pc, #16]	@ (8007b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b72:	4805      	ldr	r0, [pc, #20]	@ (8007b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b74:	f7ff fde8 	bl	8007748 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b78:	4b02      	ldr	r3, [pc, #8]	@ (8007b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20000c94 	.word	0x20000c94
 8007b88:	080082bc 	.word	0x080082bc

08007b8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b92:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd0 <Get_SerialNum+0x44>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b98:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd4 <Get_SerialNum+0x48>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd8 <Get_SerialNum+0x4c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4413      	add	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bb2:	2208      	movs	r2, #8
 8007bb4:	4909      	ldr	r1, [pc, #36]	@ (8007bdc <Get_SerialNum+0x50>)
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 f814 	bl	8007be4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bbc:	2204      	movs	r2, #4
 8007bbe:	4908      	ldr	r1, [pc, #32]	@ (8007be0 <Get_SerialNum+0x54>)
 8007bc0:	68b8      	ldr	r0, [r7, #8]
 8007bc2:	f000 f80f 	bl	8007be4 <IntToUnicode>
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	1ffff7ac 	.word	0x1ffff7ac
 8007bd4:	1ffff7b0 	.word	0x1ffff7b0
 8007bd8:	1ffff7b4 	.word	0x1ffff7b4
 8007bdc:	200000ca 	.word	0x200000ca
 8007be0:	200000da 	.word	0x200000da

08007be4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75fb      	strb	r3, [r7, #23]
 8007bfa:	e027      	b.n	8007c4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	0f1b      	lsrs	r3, r3, #28
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	d80b      	bhi.n	8007c1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	0f1b      	lsrs	r3, r3, #28
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	440b      	add	r3, r1
 8007c14:	3230      	adds	r2, #48	@ 0x30
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]
 8007c1a:	e00a      	b.n	8007c32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	0f1b      	lsrs	r3, r3, #28
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	4619      	mov	r1, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	440b      	add	r3, r1
 8007c2c:	3237      	adds	r2, #55	@ 0x37
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	75fb      	strb	r3, [r7, #23]
 8007c4c:	7dfa      	ldrb	r2, [r7, #23]
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3d3      	bcc.n	8007bfc <IntToUnicode+0x18>
  }
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08a      	sub	sp, #40	@ 0x28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c6c:	f107 0314 	add.w	r3, r7, #20
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	605a      	str	r2, [r3, #4]
 8007c76:	609a      	str	r2, [r3, #8]
 8007c78:	60da      	str	r2, [r3, #12]
 8007c7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a20      	ldr	r2, [pc, #128]	@ (8007d04 <HAL_PCD_MspInit+0xa0>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d139      	bne.n	8007cfa <HAL_PCD_MspInit+0x96>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c86:	4b20      	ldr	r3, [pc, #128]	@ (8007d08 <HAL_PCD_MspInit+0xa4>)
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007d08 <HAL_PCD_MspInit+0xa4>)
 8007c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c90:	6153      	str	r3, [r2, #20]
 8007c92:	4b1d      	ldr	r3, [pc, #116]	@ (8007d08 <HAL_PCD_MspInit+0xa4>)
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c9a:	613b      	str	r3, [r7, #16]
 8007c9c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8007c9e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007cac:	2303      	movs	r3, #3
 8007cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8007cb0:	230e      	movs	r3, #14
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cb4:	f107 0314 	add.w	r3, r7, #20
 8007cb8:	4619      	mov	r1, r3
 8007cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007cbe:	f7f8 fff3 	bl	8000ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007cc2:	4b11      	ldr	r3, [pc, #68]	@ (8007d08 <HAL_PCD_MspInit+0xa4>)
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	4a10      	ldr	r2, [pc, #64]	@ (8007d08 <HAL_PCD_MspInit+0xa4>)
 8007cc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ccc:	61d3      	str	r3, [r2, #28]
 8007cce:	4b0e      	ldr	r3, [pc, #56]	@ (8007d08 <HAL_PCD_MspInit+0xa4>)
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2100      	movs	r1, #0
 8007cde:	2013      	movs	r0, #19
 8007ce0:	f7f8 ffab 	bl	8000c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8007ce4:	2013      	movs	r0, #19
 8007ce6:	f7f8 ffc4 	bl	8000c72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8007cea:	2200      	movs	r2, #0
 8007cec:	2100      	movs	r1, #0
 8007cee:	2014      	movs	r0, #20
 8007cf0:	f7f8 ffa3 	bl	8000c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8007cf4:	2014      	movs	r0, #20
 8007cf6:	f7f8 ffbc 	bl	8000c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	3728      	adds	r7, #40	@ 0x28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	40005c00 	.word	0x40005c00
 8007d08:	40021000 	.word	0x40021000

08007d0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f7fe fddf 	bl	80068e6 <USBD_LL_SetupStage>
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	440b      	add	r3, r1
 8007d50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	f7fe fe11 	bl	8006980 <USBD_LL_DataOutStage>
}
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8007d78:	78fa      	ldrb	r2, [r7, #3]
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	440b      	add	r3, r1
 8007d86:	3324      	adds	r3, #36	@ 0x24
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f7fe fe68 	bl	8006a62 <USBD_LL_DataInStage>
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe ff7b 	bl	8006ca4 <USBD_LL_SOF>
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	795b      	ldrb	r3, [r3, #5]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d001      	beq.n	8007dce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dca:	f7f8 fb77 	bl	80004bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8007dd4:	7bfa      	ldrb	r2, [r7, #15]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe ff28 	bl	8006c2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fee1 	bl	8006bac <USBD_LL_Reset>
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe ff23 	bl	8006c4e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7a5b      	ldrb	r3, [r3, #9]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e10:	4b04      	ldr	r3, [pc, #16]	@ (8007e24 <HAL_PCD_SuspendCallback+0x30>)
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	4a03      	ldr	r2, [pc, #12]	@ (8007e24 <HAL_PCD_SuspendCallback+0x30>)
 8007e16:	f043 0306 	orr.w	r3, r3, #6
 8007e1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	e000ed00 	.word	0xe000ed00

08007e28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe ff1e 	bl	8006c78 <USBD_LL_Resume>
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e4c:	4a28      	ldr	r2, [pc, #160]	@ (8007ef0 <USBD_LL_Init+0xac>)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a26      	ldr	r2, [pc, #152]	@ (8007ef0 <USBD_LL_Init+0xac>)
 8007e58:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e5c:	4b24      	ldr	r3, [pc, #144]	@ (8007ef0 <USBD_LL_Init+0xac>)
 8007e5e:	4a25      	ldr	r2, [pc, #148]	@ (8007ef4 <USBD_LL_Init+0xb0>)
 8007e60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e62:	4b23      	ldr	r3, [pc, #140]	@ (8007ef0 <USBD_LL_Init+0xac>)
 8007e64:	2208      	movs	r2, #8
 8007e66:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e68:	4b21      	ldr	r3, [pc, #132]	@ (8007ef0 <USBD_LL_Init+0xac>)
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e6e:	4b20      	ldr	r3, [pc, #128]	@ (8007ef0 <USBD_LL_Init+0xac>)
 8007e70:	2202      	movs	r2, #2
 8007e72:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e74:	4b1e      	ldr	r3, [pc, #120]	@ (8007ef0 <USBD_LL_Init+0xac>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef0 <USBD_LL_Init+0xac>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e80:	481b      	ldr	r0, [pc, #108]	@ (8007ef0 <USBD_LL_Init+0xac>)
 8007e82:	f7f9 f9d5 	bl	8001230 <HAL_PCD_Init>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e8c:	f7f8 fb16 	bl	80004bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e96:	2318      	movs	r3, #24
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	f7fa fdee 	bl	8002a7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007ea6:	2358      	movs	r3, #88	@ 0x58
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2180      	movs	r1, #128	@ 0x80
 8007eac:	f7fa fde6 	bl	8002a7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007eb6:	23c0      	movs	r3, #192	@ 0xc0
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2181      	movs	r1, #129	@ 0x81
 8007ebc:	f7fa fdde 	bl	8002a7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007ec6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2101      	movs	r1, #1
 8007ece:	f7fa fdd5 	bl	8002a7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007ed8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007edc:	2200      	movs	r2, #0
 8007ede:	2182      	movs	r1, #130	@ 0x82
 8007ee0:	f7fa fdcc 	bl	8002a7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000e94 	.word	0x20000e94
 8007ef4:	40005c00 	.word	0x40005c00

08007ef8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7f9 fa55 	bl	80013be <HAL_PCD_Start>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 f908 	bl	8008130 <USBD_Get_USB_Status>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	4608      	mov	r0, r1
 8007f38:	4611      	mov	r1, r2
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	70fb      	strb	r3, [r7, #3]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70bb      	strb	r3, [r7, #2]
 8007f44:	4613      	mov	r3, r2
 8007f46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f56:	78bb      	ldrb	r3, [r7, #2]
 8007f58:	883a      	ldrh	r2, [r7, #0]
 8007f5a:	78f9      	ldrb	r1, [r7, #3]
 8007f5c:	f7f9 fb4d 	bl	80015fa <HAL_PCD_EP_Open>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 f8e2 	bl	8008130 <USBD_Get_USB_Status>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f94:	78fa      	ldrb	r2, [r7, #3]
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7f9 fbf3 	bl	8001784 <HAL_PCD_EP_SetStall>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 f8c3 	bl	8008130 <USBD_Get_USB_Status>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fd2:	78fa      	ldrb	r2, [r7, #3]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7f9 fc26 	bl	8001828 <HAL_PCD_EP_ClrStall>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 f8a4 	bl	8008130 <USBD_Get_USB_Status>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008008:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800800a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800800e:	2b00      	cmp	r3, #0
 8008010:	da0b      	bge.n	800802a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008018:	68f9      	ldr	r1, [r7, #12]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	440b      	add	r3, r1
 8008024:	3312      	adds	r3, #18
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	e00b      	b.n	8008042 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800802a:	78fb      	ldrb	r3, [r7, #3]
 800802c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008030:	68f9      	ldr	r1, [r7, #12]
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	440b      	add	r3, r1
 800803c:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008040:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008068:	78fa      	ldrb	r2, [r7, #3]
 800806a:	4611      	mov	r1, r2
 800806c:	4618      	mov	r0, r3
 800806e:	f7f9 faa0 	bl	80015b2 <HAL_PCD_SetAddress>
 8008072:	4603      	mov	r3, r0
 8008074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f859 	bl	8008130 <USBD_Get_USB_Status>
 800807e:	4603      	mov	r3, r0
 8008080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008082:	7bbb      	ldrb	r3, [r7, #14]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	607a      	str	r2, [r7, #4]
 8008096:	461a      	mov	r2, r3
 8008098:	460b      	mov	r3, r1
 800809a:	72fb      	strb	r3, [r7, #11]
 800809c:	4613      	mov	r3, r2
 800809e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080ae:	893b      	ldrh	r3, [r7, #8]
 80080b0:	7af9      	ldrb	r1, [r7, #11]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	f7f9 fb2f 	bl	8001716 <HAL_PCD_EP_Transmit>
 80080b8:	4603      	mov	r3, r0
 80080ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 f836 	bl	8008130 <USBD_Get_USB_Status>
 80080c4:	4603      	mov	r3, r0
 80080c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b086      	sub	sp, #24
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	461a      	mov	r2, r3
 80080de:	460b      	mov	r3, r1
 80080e0:	72fb      	strb	r3, [r7, #11]
 80080e2:	4613      	mov	r3, r2
 80080e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080f4:	893b      	ldrh	r3, [r7, #8]
 80080f6:	7af9      	ldrb	r1, [r7, #11]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	f7f9 fadb 	bl	80016b4 <HAL_PCD_EP_Receive>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 f813 	bl	8008130 <USBD_Get_USB_Status>
 800810a:	4603      	mov	r3, r0
 800810c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800810e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	2b03      	cmp	r3, #3
 8008142:	d817      	bhi.n	8008174 <USBD_Get_USB_Status+0x44>
 8008144:	a201      	add	r2, pc, #4	@ (adr r2, 800814c <USBD_Get_USB_Status+0x1c>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	0800815d 	.word	0x0800815d
 8008150:	08008163 	.word	0x08008163
 8008154:	08008169 	.word	0x08008169
 8008158:	0800816f 	.word	0x0800816f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
    break;
 8008160:	e00b      	b.n	800817a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008162:	2302      	movs	r3, #2
 8008164:	73fb      	strb	r3, [r7, #15]
    break;
 8008166:	e008      	b.n	800817a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008168:	2301      	movs	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]
    break;
 800816c:	e005      	b.n	800817a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800816e:	2302      	movs	r3, #2
 8008170:	73fb      	strb	r3, [r7, #15]
    break;
 8008172:	e002      	b.n	800817a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008174:	2302      	movs	r3, #2
 8008176:	73fb      	strb	r3, [r7, #15]
    break;
 8008178:	bf00      	nop
  }
  return usb_status;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <memset>:
 8008188:	4402      	add	r2, r0
 800818a:	4603      	mov	r3, r0
 800818c:	4293      	cmp	r3, r2
 800818e:	d100      	bne.n	8008192 <memset+0xa>
 8008190:	4770      	bx	lr
 8008192:	f803 1b01 	strb.w	r1, [r3], #1
 8008196:	e7f9      	b.n	800818c <memset+0x4>

08008198 <__libc_init_array>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	4d0d      	ldr	r5, [pc, #52]	@ (80081d0 <__libc_init_array+0x38>)
 800819c:	4c0d      	ldr	r4, [pc, #52]	@ (80081d4 <__libc_init_array+0x3c>)
 800819e:	1b64      	subs	r4, r4, r5
 80081a0:	10a4      	asrs	r4, r4, #2
 80081a2:	2600      	movs	r6, #0
 80081a4:	42a6      	cmp	r6, r4
 80081a6:	d109      	bne.n	80081bc <__libc_init_array+0x24>
 80081a8:	4d0b      	ldr	r5, [pc, #44]	@ (80081d8 <__libc_init_array+0x40>)
 80081aa:	4c0c      	ldr	r4, [pc, #48]	@ (80081dc <__libc_init_array+0x44>)
 80081ac:	f000 f818 	bl	80081e0 <_init>
 80081b0:	1b64      	subs	r4, r4, r5
 80081b2:	10a4      	asrs	r4, r4, #2
 80081b4:	2600      	movs	r6, #0
 80081b6:	42a6      	cmp	r6, r4
 80081b8:	d105      	bne.n	80081c6 <__libc_init_array+0x2e>
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c0:	4798      	blx	r3
 80081c2:	3601      	adds	r6, #1
 80081c4:	e7ee      	b.n	80081a4 <__libc_init_array+0xc>
 80081c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ca:	4798      	blx	r3
 80081cc:	3601      	adds	r6, #1
 80081ce:	e7f2      	b.n	80081b6 <__libc_init_array+0x1e>
 80081d0:	08008308 	.word	0x08008308
 80081d4:	08008308 	.word	0x08008308
 80081d8:	08008308 	.word	0x08008308
 80081dc:	0800830c 	.word	0x0800830c

080081e0 <_init>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr

080081ec <_fini>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr
